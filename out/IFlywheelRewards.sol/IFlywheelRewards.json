{
  "abi": [
    {
      "inputs": [],
      "name": "flywheel",
      "outputs": [
        {
          "internalType": "contract FlywheelCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "lastUpdatedTimestamp",
          "type": "uint32"
        }
      ],
      "name": "getAccruedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "flywheel()": "7acf5b92",
    "getAccruedRewards(address,uint32)": "b334db7b",
    "rewardToken()": "f7c618c1"
  },
  "ast": {
    "absolutePath": "/Users/veliko/git/midas/monorepo/packages/sdk/lib/contracts/lib/flywheel-v2/src/interfaces/IFlywheelRewards.sol",
    "id": 71671,
    "exportedSymbols": {
      "ERC20": [
        94430
      ],
      "FlywheelCore": [
        71611
      ],
      "IFlywheelRewards": [
        71670
      ]
    },
    "nodeType": "SourceUnit",
    "src": "42:1824:247",
    "nodes": [
      {
        "id": 71639,
        "nodeType": "PragmaDirective",
        "src": "42:23:247",
        "literals": [
          "solidity",
          "0.8",
          ".10"
        ]
      },
      {
        "id": 71641,
        "nodeType": "ImportDirective",
        "src": "67:47:247",
        "absolutePath": "/Users/veliko/git/midas/monorepo/packages/sdk/lib/contracts/lib/solmate/src/tokens/ERC20.sol",
        "file": "solmate/tokens/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 71671,
        "sourceUnit": 94431,
        "symbolAliases": [
          {
            "foreign": {
              "id": 71640,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "75:5:247",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 71643,
        "nodeType": "ImportDirective",
        "src": "115:49:247",
        "absolutePath": "/Users/veliko/git/midas/monorepo/packages/sdk/lib/contracts/lib/flywheel-v2/src/FlywheelCore.sol",
        "file": "../FlywheelCore.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 71671,
        "sourceUnit": 71612,
        "symbolAliases": [
          {
            "foreign": {
              "id": 71642,
              "name": "FlywheelCore",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "123:12:247",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 71670,
        "nodeType": "ContractDefinition",
        "src": "1171:694:247",
        "nodes": [
          {
            "id": 71655,
            "nodeType": "FunctionDefinition",
            "src": "1514:107:247",
            "documentation": {
              "id": 71645,
              "nodeType": "StructuredDocumentation",
              "src": "1204:305:247",
              "text": "@notice calculate the rewards amount accrued to a strategy since the last update.\n@param strategy the strategy to accrue rewards for.\n@param lastUpdatedTimestamp the last time rewards were accrued for the strategy.\n@return rewards the amount of rewards accrued to the market"
            },
            "functionSelector": "b334db7b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAccruedRewards",
            "nameLocation": "1523:17:247",
            "parameters": {
              "id": 71651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 71648,
                  "mutability": "mutable",
                  "name": "strategy",
                  "nameLocation": "1547:8:247",
                  "nodeType": "VariableDeclaration",
                  "scope": 71655,
                  "src": "1541:14:247",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$94430",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 71647,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 71646,
                      "name": "ERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 94430,
                      "src": "1541:5:247"
                    },
                    "referencedDeclaration": 94430,
                    "src": "1541:5:247",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$94430",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 71650,
                  "mutability": "mutable",
                  "name": "lastUpdatedTimestamp",
                  "nameLocation": "1564:20:247",
                  "nodeType": "VariableDeclaration",
                  "scope": 71655,
                  "src": "1557:27:247",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 71649,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1557:6:247",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1540:45:247"
            },
            "returnParameters": {
              "id": 71654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 71653,
                  "mutability": "mutable",
                  "name": "rewards",
                  "nameLocation": "1612:7:247",
                  "nodeType": "VariableDeclaration",
                  "scope": 71655,
                  "src": "1604:15:247",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 71652,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1604:7:247",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1603:17:247"
            },
            "scope": 71670,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 71662,
            "nodeType": "FunctionDefinition",
            "src": "1676:57:247",
            "documentation": {
              "id": 71656,
              "nodeType": "StructuredDocumentation",
              "src": "1627:44:247",
              "text": "@notice return the flywheel core address"
            },
            "functionSelector": "7acf5b92",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "flywheel",
            "nameLocation": "1685:8:247",
            "parameters": {
              "id": 71657,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1693:2:247"
            },
            "returnParameters": {
              "id": 71661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 71660,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 71662,
                  "src": "1719:12:247",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_FlywheelCore_$71611",
                    "typeString": "contract FlywheelCore"
                  },
                  "typeName": {
                    "id": 71659,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 71658,
                      "name": "FlywheelCore",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 71611,
                      "src": "1719:12:247"
                    },
                    "referencedDeclaration": 71611,
                    "src": "1719:12:247",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_FlywheelCore_$71611",
                      "typeString": "contract FlywheelCore"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1718:14:247"
            },
            "scope": 71670,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 71669,
            "nodeType": "FunctionDefinition",
            "src": "1810:53:247",
            "documentation": {
              "id": 71663,
              "nodeType": "StructuredDocumentation",
              "src": "1739:66:247",
              "text": "@notice return the reward token associated with flywheel core."
            },
            "functionSelector": "f7c618c1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rewardToken",
            "nameLocation": "1819:11:247",
            "parameters": {
              "id": 71664,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1830:2:247"
            },
            "returnParameters": {
              "id": 71668,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 71667,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 71669,
                  "src": "1856:5:247",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$94430",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 71666,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 71665,
                      "name": "ERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 94430,
                      "src": "1856:5:247"
                    },
                    "referencedDeclaration": 94430,
                    "src": "1856:5:247",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$94430",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1855:7:247"
            },
            "scope": 71670,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IFlywheelRewards",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 71644,
          "nodeType": "StructuredDocumentation",
          "src": "166:1004:247",
          "text": "@title Rewards Module for Flywheel\n@notice Flywheel is a general framework for managing token incentives.\nIt takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\nThe Rewards module is responsible for:\n determining the ongoing reward amounts to entire strategies (core handles the logic for dividing among users)\n actually holding rewards that are yet to be claimed\nThe reward stream can follow arbitrary logic as long as the amount of rewards passed to flywheel core has been sent to this contract.\nDifferent module strategies include:\n a static reward rate per second\n a decaying reward rate\n a dynamic just-in-time reward stream\n liquid governance reward delegation (Curve Gauge style)\nSECURITY NOTE: The rewards strategy should be smooth and continuous, to prevent gaming the reward distribution by frontrunning."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          71670
        ],
        "name": "IFlywheelRewards",
        "nameLocation": "1181:16:247",
        "scope": 71671,
        "usedErrors": []
      }
    ],
    "license": "AGPL-3.0-only"
  },
  "id": 247
}