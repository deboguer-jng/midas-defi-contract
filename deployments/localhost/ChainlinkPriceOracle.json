{
  "address": "0xf191e27B986a08E6C0FA215731130FE466FcEc4B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSecondsBeforePriceIsStale",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BTC_ETH_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_USD_PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "btcPriceFeeds",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ethPriceFeeds",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "hasPriceFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSecondsBeforePriceIsStale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usdPriceFeeds",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xef641d7cc966988668a84f19543bf5e5c642a0b78aaecfca5ebcd4eeb13149b4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2963528",
    "logsBloom": "0x
    "blockHash": "0xc68e8b470613fe6156a754855ebad2e28fe5c9af13b85f7f30ec7820c66f8fbb",
    "transactionHash": "0xef641d7cc966988668a84f19543bf5e5c642a0b78aaecfca5ebcd4eeb13149b4",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "2963528",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10
  ],
  "solcInputHash": "f7b1f2c0198a0fc30d3000710310a520",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BTC_ETH_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"btcPriceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPriceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"hasPriceFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdPriceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"details\":\"Implements `PriceOracle`.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor to set `maxSecondsBeforePriceIsStale` as well as all Chainlink price feeds.\"},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\",\"returns\":{\"_0\":\"Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\"}},\"hasPriceFeed(address)\":{\"details\":\"Returns a boolean indicating if a price feed exists for the underlying asset.\"},\"price(address)\":{\"details\":\"Returns the price in ETH of `underlying` (implements `BasePriceOracle`).\"}},\"title\":\"PreferredPriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BTC_ETH_PRICE_FEED()\":{\"notice\":\"Chainlink BTC/ETH price feed contracts.\"},\"ETH_USD_PRICE_FEED()\":{\"notice\":\"Chainlink ETH/USD price feed contracts.\"},\"btcPriceFeeds(address)\":{\"notice\":\"Maps ERC20 token addresses to BTC-based Chainlink price feed contracts.\"},\"ethPriceFeeds(address)\":{\"notice\":\"Maps ERC20 token addresses to ETH-based Chainlink price feed contracts.\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Returns the price in ETH of the token underlying `cToken`.\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the round was last updated before the price is considered stale. If set to 0, no limit is enforced.\"},\"usdPriceFeeds(address)\":{\"notice\":\"Maps ERC20 token addresses to USD-based Chainlink price feed contracts.\"}},\"notice\":\"Returns prices from Chainlink.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ChainlinkPriceOracle.sol\":\"ChainlinkPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"contracts/external/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x5674a657954c412572879de640f04485a7cb45ae541b25382b4843fcf3572534\",\"license\":\"MIT\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n    function underlying() external view returns (address);\\n    function liquidateBorrow(address borrower, uint repayAmount, ICToken cTokenCollateral) external returns (uint);\\n}\\n\",\"keccak256\":\"0xe0608ba20d92631a252f05ad317318524c1fa8719e06a90be292cbb1a2c351cc\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function comptroller() external view returns (address);\\n    function adminFeeMantissa() external view returns (uint256);\\n    function fuseFeeMantissa() external view returns (uint256);\\n    function reserveFactorMantissa() external view returns (uint256);\\n    function totalReserves() external view returns (uint);\\n    function totalAdminFees() external view returns (uint);\\n    function totalFuseFees() external view returns (uint);\\n\\n    function isCToken() external view returns (bool);\\n    function isCEther() external view returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0xb4424e22fcdb1f3c4748f7cdf88113cb9bf8bd69fcbfcfc48aa96a82759140e9\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xca54a109714442f65e5bcac19b1cb95eda8595305a65e601c9e846d0b4ccba70\",\"license\":\"BSD-3-Clause\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle is IPriceOracle {\\n    /**\\n     * @notice Get the price of an underlying asset.\\n     * @param underlying The underlying asset to get the price of.\\n     * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n     * Zero means the price is unavailable.\\n     */\\n    function price(address underlying) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x2b270ec498f44cd3fd9c5a63f71058beb91fe022a92331787f4f85a16561d2ef\",\"license\":\"UNLICENSED\"},\"contracts/oracles/ChainlinkPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\nimport \\\"../external/compound/ICToken.sol\\\";\\nimport \\\"../external/compound/ICErc20.sol\\\";\\n\\nimport \\\"../external/chainlink/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./BasePriceOracle.sol\\\";\\n\\n/**\\n * @title PreferredPriceOracle\\n * @notice Returns prices from Chainlink.\\n * @dev Implements `PriceOracle`.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract ChainlinkPriceOracle is IPriceOracle, BasePriceOracle {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @notice Maps ERC20 token addresses to ETH-based Chainlink price feed contracts.\\n     */\\n    mapping(address => AggregatorV3Interface) public ethPriceFeeds;\\n\\n    /**\\n     * @notice Maps ERC20 token addresses to USD-based Chainlink price feed contracts.\\n     */\\n    mapping(address => AggregatorV3Interface) public usdPriceFeeds;\\n\\n    /**\\n     * @notice Maps ERC20 token addresses to BTC-based Chainlink price feed contracts.\\n     */\\n    mapping(address => AggregatorV3Interface) public btcPriceFeeds;\\n\\n    /**\\n     * @notice Chainlink ETH/USD price feed contracts.\\n     */\\n    AggregatorV3Interface public constant ETH_USD_PRICE_FEED = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\n\\n    /**\\n     * @notice Chainlink BTC/ETH price feed contracts.\\n     */\\n    AggregatorV3Interface public constant BTC_ETH_PRICE_FEED = AggregatorV3Interface(0xdeb288F737066589598e9214E782fa5A8eD689e8);\\n\\n    /**\\n     * @notice The maxmimum number of seconds elapsed since the round was last updated before the price is considered stale. If set to 0, no limit is enforced.\\n     */\\n    uint256 public maxSecondsBeforePriceIsStale;\\n    \\n    /**\\n     * @dev Constructor to set `maxSecondsBeforePriceIsStale` as well as all Chainlink price feeds.\\n     */\\n    constructor(uint256 _maxSecondsBeforePriceIsStale) {\\n        // Set maxSecondsBeforePriceIsStale\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\n\\n        // Set Chainlink ETH price feeds\\n        ethPriceFeeds[0x111111111117dC0aa78b770fA6A738034120C302] = AggregatorV3Interface(0x72AFAECF99C9d9C8215fF44C77B94B99C28741e8); // 1INCH\\n        ethPriceFeeds[0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9] = AggregatorV3Interface(0x6Df09E975c830ECae5bd4eD9d90f3A95a4f88012); // AAVE\\n        ethPriceFeeds[0xD46bA6D942050d489DBd938a2C909A5d5039A161] = AggregatorV3Interface(0x492575FDD11a0fCf2C6C719867890a7648d526eB); // AMPL\\n        ethPriceFeeds[0xa117000000f279D81A1D3cc75430fAA017FA5A2e] = AggregatorV3Interface(0x8f83670260F8f7708143b836a2a6F11eF0aBac01); // ANT\\n        ethPriceFeeds[0x3472A5A71965499acd81997a54BBA8D852C6E53d] = AggregatorV3Interface(0x58921Ac140522867bf50b9E009599Da0CA4A2379); // BADGER\\n        ethPriceFeeds[0xba100000625a3754423978a60c9317c58a424e3D] = AggregatorV3Interface(0xC1438AA3823A6Ba0C159CfA8D98dF5A994bA120b); // BAL\\n        ethPriceFeeds[0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55] = AggregatorV3Interface(0x0BDb051e10c9718d1C29efbad442E88D38958274); // BAND\\n        ethPriceFeeds[0x0D8775F648430679A709E98d2b0Cb6250d2887EF] = AggregatorV3Interface(0x0d16d4528239e9ee52fa531af613AcdB23D88c94); // BAT\\n        ethPriceFeeds[0xB8c77482e45F1F44dE1745F52C74426C631bDD52] = AggregatorV3Interface(0xc546d2d06144F9DD42815b8bA46Ee7B8FcAFa4a2); // BNB\\n        ethPriceFeeds[0x617aeCB6137B5108D1E7D4918e3725C8cEbdB848] = AggregatorV3Interface(0xc546d2d06144F9DD42815b8bA46Ee7B8FcAFa4a2); // sBNB = BNB\\n        ethPriceFeeds[0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C] = AggregatorV3Interface(0xCf61d1841B178fe82C8895fe60c2EDDa08314416); // BNT\\n        ethPriceFeeds[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = AggregatorV3Interface(0xdeb288F737066589598e9214E782fa5A8eD689e8); // WBTC = BTC\\n        ethPriceFeeds[0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D] = AggregatorV3Interface(0xdeb288F737066589598e9214E782fa5A8eD689e8); // renBTC = BTC\\n        ethPriceFeeds[0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6] = AggregatorV3Interface(0xdeb288F737066589598e9214E782fa5A8eD689e8); // sBTC = BTC\\n        ethPriceFeeds[0x0316EB71485b0Ab14103307bf65a021042c6d380] = AggregatorV3Interface(0xdeb288F737066589598e9214E782fa5A8eD689e8); // HBTC = BTC\\n        ethPriceFeeds[0x4Fabb145d64652a948d72533023f6E7A623C7C53] = AggregatorV3Interface(0x614715d2Af89E6EC99A233818275142cE88d1Cfd); // BUSD\\n        ethPriceFeeds[0x56d811088235F11C8920698a204A5010a788f4b3] = AggregatorV3Interface(0x8f7C7181Ed1a2BA41cfC3f5d064eF91b67daef66); // BZRX\\n        ethPriceFeeds[0xaaAEBE6Fe48E54f431b0C390CfaF0b017d09D42d] = AggregatorV3Interface(0x75FbD83b4bd51dEe765b2a01e8D3aa1B020F9d33); // CEL\\n        ethPriceFeeds[0xc00e94Cb662C3520282E6f5717214004A7f26888] = AggregatorV3Interface(0x1B39Ee86Ec5979ba5C322b826B3ECb8C79991699); // COMP\\n        ethPriceFeeds[0x4688a8b1F292FDaB17E9a90c8Bc379dC1DBd8713] = AggregatorV3Interface(0x7B6230EF79D5E97C11049ab362c0b685faCBA0C2); // COVER\\n        ethPriceFeeds[0x2ba592F78dB6436527729929AAf6c908497cB200] = AggregatorV3Interface(0x82597CFE6af8baad7c0d441AA82cbC3b51759607); // CREAM\\n        ethPriceFeeds[0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b] = AggregatorV3Interface(0xcA696a9Eb93b81ADFE6435759A29aB4cf2991A96); // CRO\\n        ethPriceFeeds[0xD533a949740bb3306d119CC777fa900bA034cd52] = AggregatorV3Interface(0x8a12Be339B0cD1829b91Adc01977caa5E9ac121e); // CRV\\n        ethPriceFeeds[0x6B175474E89094C44Da98b954EedeAC495271d0F] = AggregatorV3Interface(0x773616E4d11A78F511299002da57A0a94577F1f4); // DAI\\n        ethPriceFeeds[0xEd91879919B71bB6905f23af0A68d231EcF87b14] = AggregatorV3Interface(0xD010e899f7ab723AC93f825cDC5Aa057669557c2); // DMG\\n        ethPriceFeeds[0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b] = AggregatorV3Interface(0x029849bbc0b1d93b85a8b6190e979fd38F5760E2); // DPI\\n        ethPriceFeeds[0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c] = AggregatorV3Interface(0x24D9aB51950F3d62E9144fdC2f3135DAA6Ce8D1B); // ENJ\\n        ethPriceFeeds[0x4E15361FD6b4BB609Fa63C81A2be19d873717870] = AggregatorV3Interface(0x2DE7E4a9488488e0058B95854CC2f7955B35dC9b); // FTM\\n        ethPriceFeeds[0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9] = AggregatorV3Interface(0xF0985f7E2CaBFf22CecC5a71282a89582c382EFE); // FTT\\n        ethPriceFeeds[0xc944E90C64B2c07662A292be6244BDf05Cda44a7] = AggregatorV3Interface(0x17D054eCac33D91F7340645341eFB5DE9009F1C1); // GRT\\n        ethPriceFeeds[0x584bC13c7D411c00c01A62e8019472dE68768430] = AggregatorV3Interface(0xAf5E8D9Cd9fC85725A83BF23C52f1C39A71588a6); // HEGIC\\n        ethPriceFeeds[0xdd974D5C2e2928deA5F71b9825b8b646686BD200] = AggregatorV3Interface(0x656c0544eF4C98A6a98491833A89204Abb045d6b); // KNC\\n        ethPriceFeeds[0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44] = AggregatorV3Interface(0xe7015CCb7E5F788B8c1010FC22343473EaaC3741); // KP3R\\n        ethPriceFeeds[0x514910771AF9Ca656af840dff83E8264EcF986CA] = AggregatorV3Interface(0xDC530D9457755926550b59e8ECcdaE7624181557); // LINK\\n        ethPriceFeeds[0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD] = AggregatorV3Interface(0x160AC928A16C93eD4895C2De6f81ECcE9a7eB7b4); // LRC\\n        ethPriceFeeds[0x0F5D2fB29fb7d3CFeE444a200298f468908cC942] = AggregatorV3Interface(0x82A44D92D6c329826dc557c5E1Be6ebeC5D5FeB9); // MANA\\n        ethPriceFeeds[0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2] = AggregatorV3Interface(0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2); // MKR\\n        ethPriceFeeds[0xec67005c4E498Ec7f55E092bd1d35cbC47C91892] = AggregatorV3Interface(0xDaeA8386611A157B08829ED4997A8A62B557014C); // MLN\\n        ethPriceFeeds[0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2] = AggregatorV3Interface(0x98334b85De2A8b998Ba844c5521e73D68AD69C00); // MTA\\n        ethPriceFeeds[0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671] = AggregatorV3Interface(0x9cB2A01A7E64992d32A34db7cEea4c919C391f6A); // NMR\\n        ethPriceFeeds[0xd26114cd6EE289AccF82350c8d8487fedB8A0C07] = AggregatorV3Interface(0x57C9aB3e56EE4a83752c181f241120a3DBba06a1); // OMG\\n        ethPriceFeeds[0x0258F474786DdFd37ABCE6df6BBb1Dd5dfC4434a] = AggregatorV3Interface(0xbA9B2a360eb8aBdb677d6d7f27E12De11AA052ef); // ORN\\n        ethPriceFeeds[0x8E870D67F660D95d5be530380D0eC0bd388289E1] = AggregatorV3Interface(0x3a08ebBaB125224b7b6474384Ee39fBb247D2200); // PAX\\n        ethPriceFeeds[0x45804880De22913dAFE09f4980848ECE6EcbAf78] = AggregatorV3Interface(0x9B97304EA12EFed0FAd976FBeCAad46016bf269e); // PAXG\\n        ethPriceFeeds[0x408e41876cCCDC0F92210600ef50372656052a38] = AggregatorV3Interface(0x3147D7203354Dc06D9fd350c7a2437bcA92387a4); // REN\\n        ethPriceFeeds[0x221657776846890989a759BA2973e427DfF5C9bB] = AggregatorV3Interface(0xD4CE430C3b67b3E2F7026D86E7128588629e2455); // REP\\n        ethPriceFeeds[0x607F4C5BB672230e8672085532f7e901544a7375] = AggregatorV3Interface(0x4cba1e1fdc738D0fe8DB3ee07728E2Bc4DA676c6); // RLC\\n        ethPriceFeeds[0x3155BA85D5F96b2d030a4966AF206230e46849cb] = AggregatorV3Interface(0x875D60C44cfbC38BaA4Eb2dDB76A767dEB91b97e); // RUNE\\n        ethPriceFeeds[0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F] = AggregatorV3Interface(0x79291A9d692Df95334B1a0B3B4AE6bC606782f8c); // SNX\\n        ethPriceFeeds[0x476c5E26a75bd202a9683ffD34359C0CC15be0fF] = AggregatorV3Interface(0x050c048c9a0CD0e76f166E2539F87ef2acCEC58f); // SRM\\n        ethPriceFeeds[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51] = AggregatorV3Interface(0x8e0b7e6062272B5eF4524250bFFF8e5Bd3497757); // sUSD\\n        ethPriceFeeds[0x6B3595068778DD592e39A122f4f5a5cF09C90fE2] = AggregatorV3Interface(0xe572CeF69f43c2E488b33924AF04BDacE19079cf); // SUSHI\\n        ethPriceFeeds[0x0000000000085d4780B73119b644AE5ecd22b376] = AggregatorV3Interface(0x3886BA987236181D98F2401c507Fb8BeA7871dF2); // TUSD\\n        ethPriceFeeds[0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828] = AggregatorV3Interface(0xf817B69EA583CAFF291E287CaE00Ea329d22765C); // UMA\\n        ethPriceFeeds[0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984] = AggregatorV3Interface(0xD6aA3D25116d8dA79Ea0246c4826EB951872e02e); // UNI\\n        ethPriceFeeds[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = AggregatorV3Interface(0x986b5E1e1755e3C2440e960477f25201B0a8bbD4); // USDC\\n        ethPriceFeeds[0xdAC17F958D2ee523a2206206994597C13D831ec7] = AggregatorV3Interface(0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46); // USDT\\n        ethPriceFeeds[0xa47c8bf37f92aBed4A126BDA807A7b7498661acD] = AggregatorV3Interface(0xa20623070413d42a5C01Db2c8111640DD7A5A03a); // UST\\n        ethPriceFeeds[0x0d438F3b5175Bebc262bF23753C1E53d03432bDE] = AggregatorV3Interface(0xe5Dc0A609Ab8bCF15d3f35cFaa1Ff40f521173Ea); // WNXM\\n        ethPriceFeeds[0xBd356a39BFf2cAda8E9248532DD879147221Cf76] = AggregatorV3Interface(0xcEBD2026d3C99F2a7CE028acf372C154aB4638a9); // WOM\\n        ethPriceFeeds[0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e] = AggregatorV3Interface(0x7c5d4F8345e66f68099581Db340cd65B078C41f4); // YFI\\n        ethPriceFeeds[0xa1d0E215a23d7030842FC67cE582a6aFa3CCaB83] = AggregatorV3Interface(0xaaB2f6b45B28E962B3aCd1ee4fC88aEdDf557756); // YFII\\n        ethPriceFeeds[0xE41d2489571d322189246DaFA5ebDe1F4699F498] = AggregatorV3Interface(0x2Da4983a622a8498bb1a21FaE9D8F6C664939962); // ZRX\\n\\n        // USD price feeds\\n        usdPriceFeeds[0xe36E2D3c7c34281FA3bC737950a68571736880A1] = AggregatorV3Interface(0xAE48c91dF1fE419994FFDa27da09D5aC69c30f55); // sADA = ADA\\n        usdPriceFeeds[0xADE00C28244d5CE17D72E40330B1c318cD12B7c3] = AggregatorV3Interface(0x231e764B44b2C1b7Ca171fa8021A24ed520Cde10); // ADX\\n        usdPriceFeeds[0xF48e200EAF9906362BB1442fca31e0835773b8B4] = AggregatorV3Interface(0x77F9710E7d0A19669A13c055F62cd80d313dF022); // sAUD = AUD\\n        usdPriceFeeds[0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d] = AggregatorV3Interface(0x449d117117838fFA61263B61dA6301AA2a88B13A); // sCHF = CHF\\n        usdPriceFeeds[0xfE33ae95A9f0DA8A845aF33516EDc240DCD711d6] = AggregatorV3Interface(0xFb0cADFEa136E9E343cfb55B863a6Df8348ab912); // sDASH = DASH\\n        usdPriceFeeds[0x1715AC0743102BF5Cd58EfBB6Cf2dC2685d967b6] = AggregatorV3Interface(0x1C07AFb8E2B827c5A4739C6d59Ae3A5035f28734); // sDOT = DOT\\n        usdPriceFeeds[0x88C8Cf3A212c0369698D13FE98Fcb76620389841] = AggregatorV3Interface(0x10a43289895eAff840E8d45995BBa89f9115ECEe); // sEOS = EOS\\n        usdPriceFeeds[0x22602469d704BfFb0936c7A7cfcD18f7aA269375] = AggregatorV3Interface(0xaEA2808407B7319A31A383B6F8B60f04BCa23cE2); // sETC = ETC\\n        usdPriceFeeds[0xD71eCFF9342A5Ced620049e616c5035F1dB98620] = AggregatorV3Interface(0xb49f677943BC038e9857d61E7d053CaA2C1734C1); // sEUR = EUR\\n        usdPriceFeeds[0xeF9Cd7882c067686691B6fF49e650b43AFBBCC6B] = AggregatorV3Interface(0x80070f7151BdDbbB1361937ad4839317af99AE6c); // FNX\\n        usdPriceFeeds[0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F] = AggregatorV3Interface(0x5c0Ab2d9b5a7ed9f470386e82BB36A3613cDd4b5); // sGBP = GBP\\n        usdPriceFeeds[0xFA1a856Cfa3409CFa145Fa4e20Eb270dF3EB21ab] = AggregatorV3Interface(0xd0935838935349401c73a06FCde9d63f719e84E5); // IOST\\n        usdPriceFeeds[0xC14103C2141E842e228FBaC594579e798616ce7A] = AggregatorV3Interface(0x6AF09DF7563C363B5763b9102712EbeD3b9e859B); // sLTC = LTC\\n        usdPriceFeeds[0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0] = AggregatorV3Interface(0x7bAC85A8a13A4BcD8abb3eB7d6b4d632c5a57676); // MATIC\\n        usdPriceFeeds[0x4575f41308EC1483f3d399aa9a2826d74Da13Deb] = AggregatorV3Interface(0xd75AAaE4AF0c398ca13e2667Be57AF2ccA8B5de6); // OXT\\n        usdPriceFeeds[0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9] = AggregatorV3Interface(0xFb0CfD6c19e25DB4a08D8a204a387cEa48Cc138f); // SXP\\n        usdPriceFeeds[0x4C19596f5aAfF459fA38B0f7eD92F11AE6543784] = AggregatorV3Interface(0x26929b85fE284EeAB939831002e1928183a10fb1); // TRU\\n        usdPriceFeeds[0xf2E08356588EC5cd9E437552Da87C0076b4970B0] = AggregatorV3Interface(0xacD0D1A29759CC01E8D925371B72cb2b5610EA25); // sTRX = TRX\\n        usdPriceFeeds[0x918dA91Ccbc32B7a6A0cc4eCd5987bbab6E31e6D] = AggregatorV3Interface(0x1ceDaaB50936881B3e449e47e40A2cDAF5576A4a); // sTSLA = TSLA\\n        usdPriceFeeds[0x1c48f86ae57291F7686349F12601910BD8D470bb] = AggregatorV3Interface(0xfAC81Ea9Dd29D8E9b212acd6edBEb6dE38Cb43Af); // USDK\\n        usdPriceFeeds[0x6A22e5e94388464181578Aa7A6B869e00fE27846] = AggregatorV3Interface(0x379589227b15F1a12195D3f2d90bBc9F31f95235); // sXAG = XAG\\n        usdPriceFeeds[0x261EfCdD24CeA98652B9700800a13DfBca4103fF] = AggregatorV3Interface(0x214eD9Da11D2fbe465a6fc601a91E62EbEc1a0D6); // sXAU = XAU\\n        usdPriceFeeds[0x5299d6F7472DCc137D7f3C4BcfBBB514BaBF341A] = AggregatorV3Interface(0xFA66458Cce7Dd15D8650015c4fce4D278271618F); // sXMR = XMR\\n        usdPriceFeeds[0xa2B0fDe6D710e201d0d608e924A484d1A5fEd57c] = AggregatorV3Interface(0xCed2660c6Dd1Ffd856A5A82C67f3482d88C50b12); // sXRP = XRP\\n        usdPriceFeeds[0x2e59005c5c0f0a4D77CcA82653d48b46322EE5Cd] = AggregatorV3Interface(0x5239a625dEb44bF3EeAc2CD5366ba24b8e9DB63F); // sXTZ = XTZ\\n        usdPriceFeeds[0xeABACD844A196D7Faf3CE596edeBF9900341B420] = AggregatorV3Interface(0x283D433435cFCAbf00263beEF6A362b7cc5ed9f2); // sCEX\\n        usdPriceFeeds[0xe1aFe1Fd76Fd88f78cBf599ea1846231B8bA3B6B] = AggregatorV3Interface(0xa8E875F94138B0C5b51d1e1d5dE35bbDdd28EA87); // sDEFI\\n\\n        // BTC price feeds\\n        btcPriceFeeds[0x798D1bE841a82a273720CE31c822C61a67a601C3] = AggregatorV3Interface(0x418a6C98CD5B8275955f08F0b8C1c6838c8b1685); // DIGG\\n        btcPriceFeeds[0xF970b8E36e23F7fC3FD752EeA86f8Be8D83375A6] = AggregatorV3Interface(0xEa0b3DCa635f4a4E77D9654C5c18836EE771566e); // RCN\\n    }\\n\\n    /**\\n     * @dev Returns a boolean indicating if a price feed exists for the underlying asset.\\n     */\\n    function hasPriceFeed(address underlying) external view returns (bool) {\\n        return address(ethPriceFeeds[underlying]) != address(0) || address(usdPriceFeeds[underlying]) != address(0) || address(btcPriceFeeds[underlying]) != address(0);\\n    }\\n\\n    /**\\n     * @dev Internal function returning the price in ETH of `underlying`.\\n     */\\n    function _price(address underlying) internal view returns (uint) {\\n        // Return 1e18 for WETH\\n        if (underlying == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) return 1e18;\\n\\n        // Get token/ETH price from Chainlink\\n        if (address(ethPriceFeeds[underlying]) != address(0)) {\\n            (, int256 tokenEthPrice, , uint256 updatedAt, ) = ethPriceFeeds[underlying].latestRoundData();\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= updatedAt + maxSecondsBeforePriceIsStale, \\\"Token/ETH Chainlink price is stale.\\\");\\n            return tokenEthPrice >= 0 ? uint256(tokenEthPrice).mul(1e18).div(10 ** uint256(ethPriceFeeds[underlying].decimals())) : 0;\\n        } else if (address(usdPriceFeeds[underlying]) != address(0)) {\\n            (, int256 ethUsdPrice, , uint256 updatedAt, ) = ETH_USD_PRICE_FEED.latestRoundData();\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= updatedAt + maxSecondsBeforePriceIsStale, \\\"ETH/USD Chainlink price is stale.\\\");\\n            if (ethUsdPrice <= 0) return 0;\\n            int256 tokenUsdPrice;\\n            (, tokenUsdPrice, , updatedAt, ) = usdPriceFeeds[underlying].latestRoundData();\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= updatedAt + maxSecondsBeforePriceIsStale, \\\"Token/USD Chainlink price is stale.\\\");\\n            return tokenUsdPrice >= 0 ? uint256(tokenUsdPrice).mul(1e26).div(10 ** uint256(usdPriceFeeds[underlying].decimals())).div(uint256(ethUsdPrice)) : 0;\\n        } else if (address(btcPriceFeeds[underlying]) != address(0)) {\\n            (, int256 btcEthPrice, , uint256 updatedAt, ) = BTC_ETH_PRICE_FEED.latestRoundData();\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= updatedAt + maxSecondsBeforePriceIsStale, \\\"BTC/ETH Chainlink price is stale.\\\");\\n            if (btcEthPrice <= 0) return 0;\\n            int256 tokenBtcPrice;\\n            (, tokenBtcPrice, , updatedAt, ) = btcPriceFeeds[underlying].latestRoundData();\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= updatedAt + maxSecondsBeforePriceIsStale, \\\"Token/BTC Chainlink price is stale.\\\");\\n            return tokenBtcPrice >= 0 ? uint256(tokenBtcPrice).mul(uint256(btcEthPrice)).div(10 ** uint256(btcPriceFeeds[underlying].decimals())) : 0;\\n        } else revert(\\\"No Chainlink price feed found for this underlying ERC20 token.\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the price in ETH of `underlying` (implements `BasePriceOracle`).\\n     */\\n    function price(address underlying) external override view returns (uint) {\\n        return _price(underlying);\\n    }\\n\\n    /**\\n     * @notice Returns the price in ETH of the token underlying `cToken`.\\n     * @dev Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\\n     * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n     */\\n    function getUnderlyingPrice(ICToken cToken) external override view returns (uint) {\\n        // Return 1e18 for ETH\\n        if (cToken.isCEther()) return 1e18;\\n\\n        // Get underlying token address\\n        address underlying = ICErc20(address(cToken)).underlying();\\n\\n        // Get price\\n        uint256 chainlinkPrice = _price(underlying);\\n\\n        // Format and return price\\n        uint256 underlyingDecimals = uint256(ERC20Upgradeable(underlying).decimals());\\n        return underlyingDecimals <= 18 ? uint256(chainlinkPrice).mul(10 ** (18 - underlyingDecimals)) : uint256(chainlinkPrice).div(10 ** (underlyingDecimals - 18));\\n    }\\n}\\n\",\"keccak256\":\"0x97ad982365c2cc24195c1bebac281fca7ba5cfdaace4f534d5fb11c878be7845\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516123cf3803806123cf8339818101604052602081101561003357600080fd5b50516003557f922605635d8625baeee2632c4abd30ed3e656c608e4e1d527ac798b2e7bbaf8080546001600160a01b03199081167372afaecf99c9d9c8215ff44c77b94b99c28741e8179091557f7145bb02480b505fc02ccfdba07d3ba3a9d821606f0688263abedd0ac6e5bec580548216736df09e975c830ecae5bd4ed9d90f3a95a4f880121790557f652f71c42b843343e1ef371dbb9eee4ae200cef6c0330cc356d68047e9c79b628054821673492575fdd11a0fcf2c6c719867890a7648d526eb1790557f6aa415b64acb0a434cca4219caf83aa35a6e08e958efcfbc0a11e6938dcca50b80548216738f83670260f8f7708143b836a2a6f11ef0abac011790557f8dd1acf2f417f842f399a5c6c5a803e3017458a53801bad96df1fe1972a4537c805482167358921ac140522867bf50b9e009599da0ca4a23791790557f2bc93a8060526cefdf8802183664660d7d7310808def67df12894f0e5193b4338054821673c1438aa3823a6ba0c159cfa8d98df5a994ba120b1790557f60788a10714095b4b847dd17e28e2482eb05bcedcbe89ea8d5fa139281c227ff80548216730bdb051e10c9718d1c29efbad442e88d389582741790557f9d36796f595ad8c503b82568e7e967e06e60c0e85648af5d26070800c033c7f080548216730d16d4528239e9ee52fa531af613acdb23d88c941790557f2ada67348576a5f43965aeed43cfc775fb3796c746b8d7e063e9e31abe7756108054821673c546d2d06144f9dd42815b8ba46ee7b8fcafa4a29081179091557f98d1e320c17e2a1a87baab27194cf61fc6f4cbb6cda0040c2dbf58758d8effb78054831690911790557f72ecb6b277d69e65f266d635816977482f3bd43f38cd571ba98aab196b191eb28054821673cf61d1841b178fe82c8895fe60c2edda083144161790557ff0b998666205e50af945dcd5198861491334a6162cc24264d9a801634ee07ec88054821673deb288f737066589598e9214e782fa5a8ed689e89081179091557f0ad657e79cb9f74bdf6f33badc318d69537edcaf175eb59af2e123b577dd466580548316821790557f8237a75246863a956acc84e18f74a40be5a5e45c1449659b16fff884d97b2d2180548316821790557fc58542b7442a09818236d2c23eecf870f3688f99e43a40b094f6ed48f76581118054831690911790557f939f7cabc28bdbedc4485191b21a60d41b948f6b2be04fad8a9bba962c7a74b18054821673614715d2af89e6ec99a233818275142ce88d1cfd1790557f714d08b158d6cc294ffeb4a3b345613fb0e642c104a5bce757c5f7f16bd4df5480548216738f7c7181ed1a2ba41cfc3f5d064ef91b67daef661790557fc19dbee4376f33a2c7d0d8afb05074ae4879269d0731097362888a48b88cbe4e805482167375fbd83b4bd51dee765b2a01e8d3aa1b020f9d331790557f511cc89fca1810b4d2868146b87932d94ee0e38147e04dc2f8572df83cf520a880548216731b39ee86ec5979ba5c322b826b3ecb8c799916991790557f74b21504d6ce8d3085ff4d3c40f4f6f826f045fe400f691809753490c1113ccc80548216737b6230ef79d5e97c11049ab362c0b685facba0c21790557fa321655a2bbe4fb76e06e998714ab65c52c1c2c1d83195276a2c435589568d76805482167382597cfe6af8baad7c0d441aa82cbc3b517596071790557ff7b15f98e94b56adc7bc4251d8e5bab2a85df3c658d291f469be1863917931e98054821673ca696a9eb93b81adfe6435759a29ab4cf2991a961790557f70c3dba262fa5eaaf3e393830b86a1923f032bbcdc463b5d2b22ed5f11b1e68580548216738a12be339b0cd1829b91adc01977caa5e9ac121e1790557f5306b8fbe80b30a74098357ee8e26fad8dc069da9011cca5f0870a0a5982e5418054821673773616e4d11a78f511299002da57a0a94577f1f41790557f2dd12e72a092c6022dd4b244c76871f9fba900e3c17d078fa30123d4cc431b5f8054821673d010e899f7ab723ac93f825cdc5aa057669557c21790557f1bc36087bcda8c8f0a1d3644ff9e81045f37abda2f3e48c9950fe55b89d0df568054821673029849bbc0b1d93b85a8b6190e979fd38f5760e21790557f2a792ecbe4cc20859315764ffd1173cc3d655abe0eab051e1b91505d05664e5f805482167324d9ab51950f3d62e9144fdc2f3135daa6ce8d1b1790557f69385f4f59c73b47d354995d37e8afb2d12626a98f707577a862ca34c9b8dfab80548216732de7e4a9488488e0058b95854cc2f7955b35dc9b1790557f7fa58701f5444cd8686e8db74991cfac490ac6c67543759a064d4a1d9437208b8054821673f0985f7e2cabff22cecc5a71282a89582c382efe1790557f1937f4929bf506eeb2c6a1d0a2fcd058a6c656179f2f8b4280efa139cc62bcba805482167317d054ecac33d91f7340645341efb5de9009f1c11790557f65ddfc0b22efd48a70a9225c1497ac6013365784568b598beb41c24a618196638054821673af5e8d9cd9fc85725a83bf23c52f1c39a71588a61790557ff3da0919264f7c718053ecd775aaadf3e60482b8a48602c1a29f9e3fa1891d1c8054821673656c0544ef4c98a6a98491833a89204abb045d6b1790557fcf66ea24a3a22ace3478fe5474bcc1fe794b64f2f3e3e510121d34175d9fca748054821673e7015ccb7e5f788b8c1010fc22343473eaac37411790557f730d6fdf8f2d5e5e75a62ad49cc4d175b7750703aa72e452e1e22258c77079fb8054821673dc530d9457755926550b59e8eccdae76241815571790557ffde91a0e4ce347aee87f50e1828f560ac227f5a85b774d40a730df907420cbdd8054821673160ac928a16c93ed4895c2de6f81ecce9a7eb7b41790557fe9ac309054ae3ea057b8ba5ade5fbdb631fd2a69208b4c4996b5da5c0c28541a805482167382a44d92d6c329826dc557c5e1be6ebec5d5feb91790557fdda00a57bee26ed4ac93f73d0238caf2b0b80d455de521e247ae994efa80def5805482167324551a8fb2a7211a25a17b1481f043a8a8adc7f21790557fd85a4d964d4d582b84640f5fb5e87df4a5d5298bb387091004bd9260d56a89e38054821673daea8386611a157b08829ed4997a8a62b557014c1790557f8368c25c4b2f30d7b2ab019df22a73e277c773d0fb7cde331e90efc89d2692fb805482167398334b85de2a8b998ba844c5521e73d68ad69c001790557f7b66cee30b2b198fbf35e728c76f17d88c3a425bd48097e22eafaff9da2e7e8f80548216739cb2a01a7e64992d32a34db7ceea4c919c391f6a1790557f692c63a03bf35f688365fdce87bd4530629214d76f11021ca81cb251428807a9805482167357c9ab3e56ee4a83752c181f241120a3dbba06a11790557f629da0e8ff2229b61f23ea59f6fc9fae5385ec7d86836d69d66518b801a1a2b98054821673ba9b2a360eb8abdb677d6d7f27e12de11aa052ef1790557fc13b7ee270ec43e8a6443e3b8f180d8f4fca097dedaede03fcc04df7145c999a80548216733a08ebbab125224b7b6474384ee39fbb247d22001790557fdfcc185e406aad40b3880bc723dcc773f9b6e7bc42904ab3f9845c594921f49d80548216739b97304ea12efed0fad976fbecaad46016bf269e1790557f72d1ea1bd06e478789ce223c9d4541833ee2f7ebeef7a8270683f3d403f32f9480548216733147d7203354dc06d9fd350c7a2437bca92387a41790557f5048cdc78b2b28093fa136992d1ca5cef83e144d947de68225926a0ff2827a6c8054821673d4ce430c3b67b3e2f7026d86e7128588629e24551790557f915ea3178cf8d84ce8970365961a708ef05e98859d8d4717485c47bf3cbcb26480548216734cba1e1fdc738d0fe8db3ee07728e2bc4da676c61790557f3a366db8310f607ec90a3e157b2d9c96b54e5b9058a23c07ffef108dcac299bf8054821673875d60c44cfbc38baa4eb2ddb76a767deb91b97e1790557f6cd63715d5f0db03eec592ada4e78050279222b9583fb20a52ef8a37c8e911b9805482167379291a9d692df95334b1a0b3b4ae6bc606782f8c1790557f86533f34a757e46c0721fbd7d349a6f1936fb78c3f41968b01245132d7a80c658054821673050c048c9a0cd0e76f166e2539f87ef2accec58f1790557f891368e9fb55bce905a27799ff398f5706410e14205316f805cafda2a6c93be480548216738e0b7e6062272b5ef4524250bfff8e5bd34977571790557fb738e63d4f4906dfb172df67af9f36b70db9ec183d59b161eabe70a6ea8083e68054821673e572cef69f43c2e488b33924af04bdace19079cf1790557f690bb39a0a5e54120bf07b6463b8fcd7bea90578d8ae77d1e573a88ddc40bfec80548216733886ba987236181d98f2401c507fb8bea7871df21790557fef188c9425e10b9ff1f1fb69b77afe1d1874b5bbe31bfcba2584fae894ee14478054821673f817b69ea583caff291e287cae00ea329d22765c1790557f6da98f1d47bb0bc5549e1497f71ab684f8d693b19b458fbccae05e126d246e908054821673d6aa3d25116d8da79ea0246c4826eb951872e02e1790557fc6521c8ea4247e8beb499344e591b9401fb2807ff9997dd598fd9e56c73a264d8054821673986b5e1e1755e3c2440e960477f25201b0a8bbd41790557fa934b07068f5d95a11413ed6d08a4a1122dc4b8c14a6ab2d94f8b279dac630428054821673ee9f2375b4bdf6387aa8265dd4fb8f16512a1d461790557fbfbb6e0ba78daf468733c76bad8771bca2c4b9e50f4caf63c623fea7eda8d6028054821673a20623070413d42a5c01db2c8111640dd7a5a03a1790557fe2f5263ab0aff2d245fbc15bf86f3654aada3c07fe237aa7b35d5a4307de57698054821673e5dc0a609ab8bcf15d3f35cfaa1ff40f521173ea1790557fca39940d9fe8cb630469ab5caba946836b0cc51b0835f081f9fe5be60d1be4ca8054821673cebd2026d3c99f2a7ce028acf372c154ab4638a91790557f828ac2cfae8391df6fe4c86c1beb4a85a14c88f651908f41682259723170b5dc80548216737c5d4f8345e66f68099581db340cd65b078c41f41790557f1ce7425dcaab438b3aa06773f467c327bc5dafb088bd4b5574d752d6ef71f7d78054821673aab2f6b45b28e962b3acd1ee4fc88aeddf5577561790557fd3bdcf34226f9e810a1afecc8561c82ca9d9fd3955869ad47d9842f2dba8fa1e80548216732da4983a622a8498bb1a21fae9d8f6c6649399621790557fc16ce42b99dfd9b3e8f651b2f0b0ba7f21a54924ccfc1edbab49a269b7c4e4358054821673ae48c91df1fe419994ffda27da09d5ac69c30f551790557f228b035097642596abbc6f7f0758ba63a695d310ef53868d044ec2dc14fe61e38054821673231e764b44b2c1b7ca171fa8021a24ed520cde101790557fcfaddbd6ace3a979cf8d823997c93cc8a906b3474c7c04f7ead4ed4386dc3402805482167377f9710e7d0a19669a13c055f62cd80d313df0221790557ff84f2148991de777f629d59c7b1bf4c1e645096d98447d3406dc8a49e573c9128054821673449d117117838ffa61263b61da6301aa2a88b13a1790557f363d907798d05e664f1ad8bea95d518f44f828b18fee97195d3a12419b4d99968054821673fb0cadfea136e9e343cfb55b863a6df8348ab9121790557f1d5dd85bf54141e1e9825d67c3e9d9099cd3f284f85b90ce8fdb48fbe7587fa080548216731c07afb8e2b827c5a4739c6d59ae3a5035f287341790557f045c4c1a1887c6351dd9b50a806c6f3b969a704c2a71296883f55e466a2911dc805482167310a43289895eaff840e8d45995bba89f9115ecee1790557f29fdff8d3c2f67b2e13270227e40ac2535955bc3d63b7251c804d64b03e714348054821673aea2808407b7319a31a383b6f8b60f04bca23ce21790557fdf8318910f030d17d9af780fe90952ef38366f74eda98a29c961fc58d2506d6d8054821673b49f677943bc038e9857d61e7d053caa2c1734c11790557fdf99644981f13d8b18357d5d983b2f719203481d0d4a1c649a4b2d67d7e456b3805482167380070f7151bddbbb1361937ad4839317af99ae6c1790557fa134e427ef6529de95c7765b9831befbe26d2405ec3c4e872f967e2dfdeb2b1980548216735c0ab2d9b5a7ed9f470386e82bb36a3613cdd4b51790557f10db6a6613161f0e0a549f1f0c4bad6fd3d4dca1a45778499973aa27ae242c258054821673d0935838935349401c73a06fcde9d63f719e84e51790557ff03828b358f7faf17cd412f0c681ddd3c48f493565d84f6640a42fb86eb389a580548216736af09df7563c363b5763b9102712ebed3b9e859b1790557f422f9fa51c3ebf73c3fd74a817bc14bebb8d41805604ee0e2943143a024fcc5380548216737bac85a8a13a4bcd8abb3eb7d6b4d632c5a576761790557fce4c145f89f04763ecd4949aa72a46f7b1cf90c8e8cfea822705f79653b30bd58054821673d75aaae4af0c398ca13e2667be57af2cca8b5de61790557f7a08f1a05d6f24183b50d93ad9678cd6a18b49fd99d86f4b3f052a07b2c5938d8054821673fb0cfd6c19e25db4a08d8a204a387cea48cc138f1790557f5be6a1eae107afa7bddcea28ecc6a0b9200d088fac46ebde1b0899da28675fd9805482167326929b85fe284eeab939831002e1928183a10fb11790557f67aa7916c724f9f4889561f854c87d81b72d222616ad75f627be8b9da1bd3e7f8054821673acd0d1a29759cc01e8d925371b72cb2b5610ea251790557f1e8be566fcb0087c849bfa725bf2f34a4a7d61340491f533e4d911ecdcb0c72080548216731cedaab50936881b3e449e47e40a2cdaf5576a4a1790557fded36a01f3cd1f3dfbc4133230ddd9496f6aed7b580122c52fead359496a27c08054821673fac81ea9dd29d8e9b212acd6edbeb6de38cb43af1790557f5fc8b5a5372582c92ca1f5fc34b2fc67ecab129876bc197e421abf3ae3b194248054821673379589227b15f1a12195d3f2d90bbc9f31f952351790557f73d276fb9ee560332ea673c295519551375beccedfa7958021f64ecec0704a1a8054821673214ed9da11d2fbe465a6fc601a91e62ebec1a0d61790557f7aed1cbd1e9f97c301a09e560743c612867d0c3c140b9154207868811d8d02a48054821673fa66458cce7dd15d8650015c4fce4d278271618f1790557f2f2e13da20646f0b6f1b541c9f8163d18fa60c60eb923a097bb66e5419e01a328054821673ced2660c6dd1ffd856a5a82c67f3482d88c50b121790557fbac4733c84e9b7c5f58930c8b72ed3a84e28397c77f4d2a0ea79414e9dc1768d80548216735239a625deb44bf3eeac2cd5366ba24b8e9db63f1790557f4caf056ab4b9e3eea26c6d6d0e54b16f1d0982867848072f0cd1369efbfea7928054821673283d433435cfcabf00263beef6a362b7cc5ed9f21790557f9d30438784fca7535cf1019a1c35e8440741f3b7114721a1363f20893e998f378054821673a8e875f94138b0c5b51d1e1d5de35bbddd28ea8717905560026020527f7cbd64aab4b04ae4829b2aa2d6141aed77c1ac938af266e79812be8c48d67c9e8054821673418a6c98cd5b8275955f08f0b8c1c6838c8b168517905573f970b8e36e23f7fc3fd752eea86f8be8d83375a66000527f7907f4cd94db47062093d965fccb17a1a5b0ea0aadfc6b16658c8c50ac50163a805490911673ea0b3dca635f4a4e77d9654c5c18836ee771566e179055610dbb806116146000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b0f0abe911610066578063b0f0abe914610172578063cf0b06131461017a578063e073a24114610182578063f0e0626f1461018a578063fc57d4df146101b057610093565b80630b7983a2146100985780631c5ed620146100d257806336bfdf7214610114578063aea910781461013a575b600080fd5b6100be600480360360208110156100ae57600080fd5b50356001600160a01b03166101d6565b604080519115158252519081900360200190f35b6100f8600480360360208110156100e857600080fd5b50356001600160a01b0316610245565b604080516001600160a01b039092168252519081900360200190f35b6100f86004803603602081101561012a57600080fd5b50356001600160a01b0316610260565b6101606004803603602081101561015057600080fd5b50356001600160a01b031661027b565b60408051918252519081900360200190f35b6100f8610286565b6100f861029e565b6101606102b6565b6100f8600480360360208110156101a057600080fd5b50356001600160a01b03166102bc565b610160600480360360208110156101c657600080fd5b50356001600160a01b03166102d7565b6001600160a01b0381811660009081526020819052604081205490911615158061021957506001600160a01b038281166000908152600160205260409020541615155b8061023d57506001600160a01b038281166000908152600260205260409020541615155b90505b919050565b6000602081905290815260409020546001600160a01b031681565b6002602052600090815260409020546001600160a01b031681565b600061023d8261046d565b735f4ec3df9cbd43714fe2740f5e3616155c5b841981565b73deb288f737066589598e9214e782fa5a8ed689e881565b60035481565b6001602052600090815260409020546001600160a01b031681565b6000816001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d602081101561033c57600080fd5b5051156103525750670de0b6b3a7640000610240565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561038d57600080fd5b505afa1580156103a1573d6000803e3d6000fd5b505050506040513d60208110156103b757600080fd5b5051905060006103c68261046d565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b505160ff16905060128111156104535761044e826011198301600a0a610bb2565b610464565b610464826012839003600a0a610c1b565b95945050505050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03831614156104a35750670de0b6b3a7640000610240565b6001600160a01b038281166000908152602081905260409020541615610656576001600160a01b03808316600090815260208190526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a0929190829003018186803b15801561051857600080fd5b505afa15801561052c573d6000803e3d6000fd5b505050506040513d60a081101561054257600080fd5b50602081015160609091015160035491935091501561059e57600354810142111561059e5760405162461bcd60e51b8152600401808060200182810382526023815260200180610c9d6023913960400191505060405180910390fd5b60008212156105ae57600061064d565b6001600160a01b038085166000908152602081815260409182902054825163313ce56760e01b8152925161064d94919091169263313ce567926004808301939192829003018186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d602081101561062d57600080fd5b505160ff16600a0a61064784670de0b6b3a7640000610c1b565b90610bb2565b92505050610240565b6001600160a01b0382811660009081526001602052604090205416156108f557600080735f4ec3df9cbd43714fe2740f5e3616155c5b84196001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d60a08110156106f057600080fd5b50602081015160609091015160035491935091501561074c57600354810142111561074c5760405162461bcd60e51b8152600401808060200182810382526021815260200180610ce36021913960400191505060405180910390fd5b6000821361075f57600092505050610240565b6001600160a01b03808516600090815260016020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a092909190829003018186803b1580156107b257600080fd5b505afa1580156107c6573d6000803e3d6000fd5b505050506040513d60a08110156107dc57600080fd5b506020810151606090910151600354909350909150156108395760035482014211156108395760405162461bcd60e51b8152600401808060200182810382526023815260200180610cc06023913960400191505060405180910390fd5b60008112156108495760006108eb565b6001600160a01b0380861660009081526001602090815260409182902054825163313ce56760e01b815292516108eb94889461064794939091169263313ce56792600480840193829003018186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d60208110156108ce57600080fd5b505160ff16600a0a610647856a52b7d2dcc80cd2e4000000610c1b565b9350505050610240565b6001600160a01b038281166000908152600260205260409020541615610b7b5760008073deb288f737066589598e9214e782fa5a8ed689e86001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096557600080fd5b505afa158015610979573d6000803e3d6000fd5b505050506040513d60a081101561098f57600080fd5b5060208101516060909101516003549193509150156109eb5760035481014211156109eb5760405162461bcd60e51b8152600401808060200182810382526021815260200180610c7c6021913960400191505060405180910390fd5b600082136109fe57600092505050610240565b6001600160a01b03808516600090815260026020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a092909190829003018186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d60a0811015610a7b57600080fd5b50602081015160609091015160035490935090915015610ad8576003548201421115610ad85760405162461bcd60e51b8152600401808060200182810382526023815260200180610d636023913960400191505060405180910390fd5b6000811215610ae85760006108eb565b6001600160a01b0380861660009081526002602090815260409182902054825163313ce56760e01b815292516108eb94919091169263313ce567926004808301939192829003018186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050506040513d6020811015610b6957600080fd5b505160ff16600a0a6106478386610c1b565b60405162461bcd60e51b815260040180806020018281038252603e815260200180610d04603e913960400191505060405180910390fd5b6000808211610c08576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c1157fe5b0490505b92915050565b600082610c2a57506000610c15565b82820282848281610c3757fe5b0414610c745760405162461bcd60e51b8152600401808060200182810382526021815260200180610d426021913960400191505060405180910390fd5b939250505056fe4254432f45544820436861696e6c696e6b207072696365206973207374616c652e546f6b656e2f45544820436861696e6c696e6b207072696365206973207374616c652e546f6b656e2f55534420436861696e6c696e6b207072696365206973207374616c652e4554482f55534420436861696e6c696e6b207072696365206973207374616c652e4e6f20436861696e6c696e6b207072696365206665656420666f756e6420666f72207468697320756e6465726c79696e6720455243323020746f6b656e2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e2f42544320436861696e6c696e6b207072696365206973207374616c652ea264697066735822122036add950e65834390f5a69094296f732d88965188f7ee07cce8258d0c66cb51264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063b0f0abe911610066578063b0f0abe914610172578063cf0b06131461017a578063e073a24114610182578063f0e0626f1461018a578063fc57d4df146101b057610093565b80630b7983a2146100985780631c5ed620146100d257806336bfdf7214610114578063aea910781461013a575b600080fd5b6100be600480360360208110156100ae57600080fd5b50356001600160a01b03166101d6565b604080519115158252519081900360200190f35b6100f8600480360360208110156100e857600080fd5b50356001600160a01b0316610245565b604080516001600160a01b039092168252519081900360200190f35b6100f86004803603602081101561012a57600080fd5b50356001600160a01b0316610260565b6101606004803603602081101561015057600080fd5b50356001600160a01b031661027b565b60408051918252519081900360200190f35b6100f8610286565b6100f861029e565b6101606102b6565b6100f8600480360360208110156101a057600080fd5b50356001600160a01b03166102bc565b610160600480360360208110156101c657600080fd5b50356001600160a01b03166102d7565b6001600160a01b0381811660009081526020819052604081205490911615158061021957506001600160a01b038281166000908152600160205260409020541615155b8061023d57506001600160a01b038281166000908152600260205260409020541615155b90505b919050565b6000602081905290815260409020546001600160a01b031681565b6002602052600090815260409020546001600160a01b031681565b600061023d8261046d565b735f4ec3df9cbd43714fe2740f5e3616155c5b841981565b73deb288f737066589598e9214e782fa5a8ed689e881565b60035481565b6001602052600090815260409020546001600160a01b031681565b6000816001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d602081101561033c57600080fd5b5051156103525750670de0b6b3a7640000610240565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561038d57600080fd5b505afa1580156103a1573d6000803e3d6000fd5b505050506040513d60208110156103b757600080fd5b5051905060006103c68261046d565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b505160ff16905060128111156104535761044e826011198301600a0a610bb2565b610464565b610464826012839003600a0a610c1b565b95945050505050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03831614156104a35750670de0b6b3a7640000610240565b6001600160a01b038281166000908152602081905260409020541615610656576001600160a01b03808316600090815260208190526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a0929190829003018186803b15801561051857600080fd5b505afa15801561052c573d6000803e3d6000fd5b505050506040513d60a081101561054257600080fd5b50602081015160609091015160035491935091501561059e57600354810142111561059e5760405162461bcd60e51b8152600401808060200182810382526023815260200180610c9d6023913960400191505060405180910390fd5b60008212156105ae57600061064d565b6001600160a01b038085166000908152602081815260409182902054825163313ce56760e01b8152925161064d94919091169263313ce567926004808301939192829003018186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d602081101561062d57600080fd5b505160ff16600a0a61064784670de0b6b3a7640000610c1b565b90610bb2565b92505050610240565b6001600160a01b0382811660009081526001602052604090205416156108f557600080735f4ec3df9cbd43714fe2740f5e3616155c5b84196001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d60a08110156106f057600080fd5b50602081015160609091015160035491935091501561074c57600354810142111561074c5760405162461bcd60e51b8152600401808060200182810382526021815260200180610ce36021913960400191505060405180910390fd5b6000821361075f57600092505050610240565b6001600160a01b03808516600090815260016020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a092909190829003018186803b1580156107b257600080fd5b505afa1580156107c6573d6000803e3d6000fd5b505050506040513d60a08110156107dc57600080fd5b506020810151606090910151600354909350909150156108395760035482014211156108395760405162461bcd60e51b8152600401808060200182810382526023815260200180610cc06023913960400191505060405180910390fd5b60008112156108495760006108eb565b6001600160a01b0380861660009081526001602090815260409182902054825163313ce56760e01b815292516108eb94889461064794939091169263313ce56792600480840193829003018186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d60208110156108ce57600080fd5b505160ff16600a0a610647856a52b7d2dcc80cd2e4000000610c1b565b9350505050610240565b6001600160a01b038281166000908152600260205260409020541615610b7b5760008073deb288f737066589598e9214e782fa5a8ed689e86001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561096557600080fd5b505afa158015610979573d6000803e3d6000fd5b505050506040513d60a081101561098f57600080fd5b5060208101516060909101516003549193509150156109eb5760035481014211156109eb5760405162461bcd60e51b8152600401808060200182810382526021815260200180610c7c6021913960400191505060405180910390fd5b600082136109fe57600092505050610240565b6001600160a01b03808516600090815260026020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a092909190829003018186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d60a0811015610a7b57600080fd5b50602081015160609091015160035490935090915015610ad8576003548201421115610ad85760405162461bcd60e51b8152600401808060200182810382526023815260200180610d636023913960400191505060405180910390fd5b6000811215610ae85760006108eb565b6001600160a01b0380861660009081526002602090815260409182902054825163313ce56760e01b815292516108eb94919091169263313ce567926004808301939192829003018186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050506040513d6020811015610b6957600080fd5b505160ff16600a0a6106478386610c1b565b60405162461bcd60e51b815260040180806020018281038252603e815260200180610d04603e913960400191505060405180910390fd5b6000808211610c08576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c1157fe5b0490505b92915050565b600082610c2a57506000610c15565b82820282848281610c3757fe5b0414610c745760405162461bcd60e51b8152600401808060200182810382526021815260200180610d426021913960400191505060405180910390fd5b939250505056fe4254432f45544820436861696e6c696e6b207072696365206973207374616c652e546f6b656e2f45544820436861696e6c696e6b207072696365206973207374616c652e546f6b656e2f55534420436861696e6c696e6b207072696365206973207374616c652e4554482f55534420436861696e6c696e6b207072696365206973207374616c652e4e6f20436861696e6c696e6b207072696365206665656420666f756e6420666f72207468697320756e6465726c79696e6720455243323020746f6b656e2e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e2f42544320436861696e6c696e6b207072696365206973207374616c652ea264697066735822122036add950e65834390f5a69094296f732d88965188f7ee07cce8258d0c66cb51264736f6c63430007060033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "details": "Implements `PriceOracle`.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor to set `maxSecondsBeforePriceIsStale` as well as all Chainlink price feeds."
      },
      "getUnderlyingPrice(address)": {
        "details": "Implements the `PriceOracle` interface for Fuse pools (and Compound v2).",
        "returns": {
          "_0": "Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`."
        }
      },
      "hasPriceFeed(address)": {
        "details": "Returns a boolean indicating if a price feed exists for the underlying asset."
      },
      "price(address)": {
        "details": "Returns the price in ETH of `underlying` (implements `BasePriceOracle`)."
      }
    },
    "title": "PreferredPriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BTC_ETH_PRICE_FEED()": {
        "notice": "Chainlink BTC/ETH price feed contracts."
      },
      "ETH_USD_PRICE_FEED()": {
        "notice": "Chainlink ETH/USD price feed contracts."
      },
      "btcPriceFeeds(address)": {
        "notice": "Maps ERC20 token addresses to BTC-based Chainlink price feed contracts."
      },
      "ethPriceFeeds(address)": {
        "notice": "Maps ERC20 token addresses to ETH-based Chainlink price feed contracts."
      },
      "getUnderlyingPrice(address)": {
        "notice": "Returns the price in ETH of the token underlying `cToken`."
      },
      "maxSecondsBeforePriceIsStale()": {
        "notice": "The maxmimum number of seconds elapsed since the round was last updated before the price is considered stale. If set to 0, no limit is enforced."
      },
      "usdPriceFeeds(address)": {
        "notice": "Maps ERC20 token addresses to USD-based Chainlink price feed contracts."
      }
    },
    "notice": "Returns prices from Chainlink.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38563,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "ethPriceFeeds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)31219)"
      },
      {
        "astId": 38568,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "usdPriceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)31219)"
      },
      {
        "astId": 38573,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "btcPriceFeeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)31219)"
      },
      {
        "astId": 38588,
        "contract": "contracts/oracles/ChainlinkPriceOracle.sol:ChainlinkPriceOracle",
        "label": "maxSecondsBeforePriceIsStale",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)31219": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)31219)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)31219"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}