{
  "address": "0x1705853Ca13129DD267F3fb4d56bbE3D724DE7cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "underlyingCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingCollateralSeized",
          "type": "uint256"
        },
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeemCustomCollateral",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract ICEther",
          "name": "cEther",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20Collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeSeizedTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        }
      ],
      "name": "safeLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeSeizedTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        }
      ],
      "name": "safeLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICEther",
          "name": "cEther",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20Collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minProfitAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeProfitTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForCollateral",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "ethToCoinbase",
          "type": "uint256"
        }
      ],
      "name": "safeLiquidateToEthWithFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cErc20",
          "type": "address"
        },
        {
          "internalType": "contract ICToken",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minProfitAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchangeProfitTo",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForBorrow",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2RouterForCollateral",
          "type": "address"
        },
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "redemptionStrategies",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "strategyData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "ethToCoinbase",
          "type": "uint256"
        }
      ],
      "name": "safeLiquidateToTokensWithFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x588e23c03dcfc0ef95328ff2fb9550d91358ba774474adcc3a54c99f229197e6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "4327445",
    "logsBloom": "0x
    "blockHash": "0x037db0fff380aa775cd20aef7999c84553f15fdc3728fd4bee3942c60daf3618",
    "transactionHash": "0x588e23c03dcfc0ef95328ff2fb9550d91358ba774474adcc3a54c99f229197e6",
    "logs": [],
    "blockNumber": 16928779,
    "cumulativeGasUsed": "4502453",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "3d1437e8d55f798e63f8457f025a242e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"underlyingCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingCollateralSeized\",\"type\":\"uint256\"},{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeemCustomCollateral\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract ICEther\",\"name\":\"cEther\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20Collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeSeizedTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"}],\"name\":\"safeLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeSeizedTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"}],\"name\":\"safeLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICEther\",\"name\":\"cEther\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20Collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minProfitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeProfitTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"ethToCoinbase\",\"type\":\"uint256\"}],\"name\":\"safeLiquidateToEthWithFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cErc20\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minProfitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchangeProfitTo\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForBorrow\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2RouterForCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"redemptionStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"strategyData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"ethToCoinbase\",\"type\":\"uint256\"}],\"name\":\"safeLiquidateToTokensWithFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"details\":\"Do not transfer ETH or tokens directly to this address. Only send ETH here when using a method, and only approve tokens for transfer to here when using a method. Direct ETH transfers will be rejected and direct token transfers will be lost.\",\"kind\":\"dev\",\"methods\":{\"redeemCustomCollateral(address,uint256,address,bytes)\":{\"details\":\"Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap). Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\"},\"safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20Collateral\":\"The cErc20 collateral contract to be liquidated.\",\"cEther\":\"The borrowed cEther contract to repay.\",\"exchangeSeizedTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\",\"minOutputAmount\":\"The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2Router\":\"The UniswapV2Router to use to convert the seized underlying collateral.\"}},\"safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20\":\"The borrowed cErc20 to repay.\",\"cTokenCollateral\":\"The cToken collateral to be liquidated.\",\"exchangeSeizedTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\",\"minOutputAmount\":\"The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2Router\":\"The UniswapV2Router to use to convert the seized underlying collateral.\"}},\"safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20Collateral\":\"The CErc20 collateral contract to be liquidated.\",\"cEther\":\"The borrowed CEther contract to repay.\",\"exchangeProfitTo\":\"If set to an address other than `cErc20Collateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\",\"minProfitAmount\":\"The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The ETH amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2RouterForCollateral\":\"The UniswapV2Router to use to convert the underlying collateral to ETH.\"}},\"safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)\":{\"params\":{\"borrower\":\"The borrower's Ethereum address.\",\"cErc20\":\"The borrowed CErc20 contract to repay.\",\"cTokenCollateral\":\"The cToken collateral contract to be liquidated.\",\"exchangeProfitTo\":\"If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\",\"minProfitAmount\":\"The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\",\"redemptionStrategies\":\"The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\",\"repayAmount\":\"The amount to repay to liquidate the unhealthy loan.\",\"strategyData\":\"The data for the chosen IRedemptionStrategy contracts, if any.\",\"uniswapV2RouterForBorrow\":\"The UniswapV2Router to use to convert the ETH to the underlying borrow (and flashloan the underlying borrow for ETH).\",\"uniswapV2RouterForCollateral\":\"The UniswapV2Router to use to convert the underlying collateral to ETH.\"}},\"uniswapV2Call(address,uint256,uint256,bytes)\":{\"details\":\"Callback function for Uniswap flashloans.\"}},\"stateVariables\":{\"UNISWAP_V2_ROUTER_02\":{\"details\":\"UniswapV2Router02 contract object.\"},\"UNISWAP_V2_ROUTER_02_ADDRESS\":{\"details\":\"UniswapV2Router02 contract address.\"},\"WETH\":{\"details\":\"WETH contract object.\"},\"WETH_ADDRESS\":{\"details\":\"WETH contract address.\"},\"_liquidatorProfitExchangeSource\":{\"details\":\"Cached liquidator profit exchange source. ERC20 token address or the zero address for ETH. For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`.\"}},\"title\":\"FuseSafeLiquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])\":{\"notice\":\"Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable). \"},\"safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])\":{\"notice\":\"Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable). \"},\"safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)\":{\"notice\":\"Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in ETH profit is seized. \"},\"safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)\":{\"notice\":\"Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in ETH profit is seized. \"}},\"notice\":\"FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FuseSafeLiquidator.sol\":\"FuseSafeLiquidator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/FuseSafeLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./liquidators/IRedemptionStrategy.sol\\\";\\n\\nimport \\\"./external/compound/ICToken.sol\\\";\\nimport \\\"./external/compound/ICErc20.sol\\\";\\nimport \\\"./external/compound/ICEther.sol\\\";\\n\\nimport \\\"./external/aave/IWETH.sol\\\";\\n\\nimport \\\"./external/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Callee.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"./external/uniswap/UniswapV2Library.sol\\\";\\n\\n/**\\n * @title FuseSafeLiquidator\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).\\n * @dev Do not transfer ETH or tokens directly to this address. Only send ETH here when using a method, and only approve tokens for transfer to here when using a method. Direct ETH transfers will be rejected and direct token transfers will be lost.\\n */\\ncontract FuseSafeLiquidator is Initializable, IUniswapV2Callee {\\n    using AddressUpgradeable for address payable;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /**\\n     * @dev Internal function to approve unlimited tokens of `erc20Contract` to `to`.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address to, uint256 minAmount) private {\\n        uint256 allowance = token.allowance(address(this), to);\\n\\n        if (allowance < minAmount) {\\n            if (allowance > 0) token.safeApprove(to, 0);\\n            token.safeApprove(to, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to exchange the entire balance of `from` to at least `minOutputAmount` of `to`.\\n     * @param from The input ERC20 token address (or the zero address if ETH) to exchange from.\\n     * @param to The output ERC20 token address (or the zero address if ETH) to exchange to.\\n     * @param minOutputAmount The minimum output amount of `to` necessary to complete the exchange without reversion.\\n     * @param uniswapV2Router The UniswapV2Router02 to use.\\n     */\\n    function exchangeAllEthOrTokens(address from, address to, uint256 minOutputAmount, IUniswapV2Router02 uniswapV2Router) private {\\n        if (to == from) return;\\n\\n        // From ETH, WETH, or something else?\\n        if (from == address(0)) {\\n            if (to == WETH_ADDRESS) {\\n                // Deposit all ETH to WETH\\n                WETH.deposit{value: address(this).balance}();\\n            } else {\\n                // Exchange from ETH to tokens\\n                uniswapV2Router.swapExactETHForTokens{value: address(this).balance}(minOutputAmount, array(WETH_ADDRESS, to), address(this), block.timestamp);\\n            }\\n        } else if (from == WETH_ADDRESS && to == address(0)) {\\n            // Withdraw all WETH to ETH\\n            WETH.withdraw(IERC20Upgradeable(WETH_ADDRESS).balanceOf(address(this)));\\n        } else {\\n            // Approve input tokens\\n            IERC20Upgradeable fromToken = IERC20Upgradeable(from);\\n            uint256 inputBalance = fromToken.balanceOf(address(this));\\n            safeApprove(fromToken, address(uniswapV2Router), inputBalance);\\n\\n            // Exchange from tokens to ETH or tokens\\n            if (to == address(0)) uniswapV2Router.swapExactTokensForETH(inputBalance, minOutputAmount, array(from, WETH_ADDRESS), address(this), block.timestamp);\\n            else uniswapV2Router.swapExactTokensForTokens(inputBalance, minOutputAmount, from == WETH_ADDRESS || to == WETH_ADDRESS ? array(from, to) : array(from, WETH_ADDRESS, to), address(this), block.timestamp); // Put WETH in the middle of the path if not already a part of the path\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to exchange the entire balance of `from` to at least `minOutputAmount` of `to`.\\n     * @param from The input ERC20 token address (or the zero address if ETH) to exchange from.\\n     * @param outputAmount The output amount of ETH.\\n     * @param uniswapV2Router The UniswapV2Router02 to use.\\n     */\\n    function exchangeToExactEth(address from, uint256 outputAmount, IUniswapV2Router02 uniswapV2Router) private {\\n        if (from == address(0)) return;\\n\\n        // From WETH something else?\\n        if (from == WETH_ADDRESS) {\\n            // Withdraw WETH to ETH\\n            WETH.withdraw(outputAmount);\\n        } else {\\n            // Approve input tokens\\n            IERC20Upgradeable fromToken = IERC20Upgradeable(from);\\n            uint256 inputBalance = fromToken.balanceOf(address(this));\\n            safeApprove(fromToken, address(uniswapV2Router), inputBalance);\\n\\n            // Exchange from tokens to ETH\\n            uniswapV2Router.swapTokensForExactETH(outputAmount, inputBalance, array(from, WETH_ADDRESS), address(this), block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable). \\n     * @param borrower The borrower's Ethereum address.\\n     * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n     * @param cErc20 The borrowed cErc20 to repay.\\n     * @param cTokenCollateral The cToken collateral to be liquidated.\\n     * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n     * @param exchangeSeizedTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\\n     * @param uniswapV2Router The UniswapV2Router to use to convert the seized underlying collateral.\\n     * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n     * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n     */\\n    function safeLiquidate(address borrower, uint256 repayAmount, ICErc20 cErc20, ICToken cTokenCollateral, uint256 minOutputAmount, address exchangeSeizedTo, IUniswapV2Router02 uniswapV2Router, IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategyData) external returns (uint256) {\\n        // Transfer tokens in, approve to cErc20, and liquidate borrow\\n        require(repayAmount > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n        IERC20Upgradeable underlying = IERC20Upgradeable(cErc20.underlying());\\n        underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\\n        safeApprove(underlying, address(cErc20), repayAmount);\\n        require(cErc20.liquidateBorrow(borrower, repayAmount, cTokenCollateral) == 0, \\\"Liquidation failed.\\\");\\n\\n        // Redeem seized cToken collateral if necessary\\n        if (exchangeSeizedTo != address(cTokenCollateral)) {\\n            uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n\\n            if (seizedCTokenAmount > 0) {\\n                uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n                require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n                // If cTokenCollateral is CEther\\n                if (cTokenCollateral.isCEther()) {\\n                    // Exchange redeemed ETH collateral if necessary\\n                    exchangeAllEthOrTokens(address(0), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n                } else {\\n                    // Redeem custom collateral if liquidation strategy is set\\n                    IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n\\n                    if (redemptionStrategies.length > 0) {\\n                        require(redemptionStrategies.length == strategyData.length, \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\");\\n                        uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n                        for (uint256 i = 0; i < redemptionStrategies.length; i++) (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(underlyingCollateral, underlyingCollateralSeized, redemptionStrategies[i], strategyData[i]);\\n                    }\\n\\n                    // Exchange redeemed token collateral if necessary\\n                    exchangeAllEthOrTokens(address(underlyingCollateral), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n                }\\n            }\\n        }\\n\\n        // Transfer seized amount to sender\\n        return transferSeizedFunds(exchangeSeizedTo, minOutputAmount);\\n    }\\n\\n    /**\\n     * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable). \\n     * @param borrower The borrower's Ethereum address.\\n     * @param cEther The borrowed cEther contract to repay.\\n     * @param cErc20Collateral The cErc20 collateral contract to be liquidated.\\n     * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n     * @param exchangeSeizedTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\\n     * @param uniswapV2Router The UniswapV2Router to use to convert the seized underlying collateral.\\n     * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n     * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n     */\\n    function safeLiquidate(address borrower, ICEther cEther, ICErc20 cErc20Collateral, uint256 minOutputAmount, address exchangeSeizedTo, IUniswapV2Router02 uniswapV2Router, IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategyData) external payable returns (uint256) {\\n        // Liquidate ETH borrow\\n        require(msg.value > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n        cEther.liquidateBorrow{value: msg.value}(borrower, ICToken(cErc20Collateral));\\n\\n        // Redeem seized cToken collateral if necessary\\n        if (exchangeSeizedTo != address(cErc20Collateral)) {\\n            uint256 seizedCTokenAmount = cErc20Collateral.balanceOf(address(this));\\n\\n            if (seizedCTokenAmount > 0) {\\n                uint256 redeemResult = cErc20Collateral.redeem(seizedCTokenAmount);\\n                require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n                // Redeem custom collateral if liquidation strategy is set\\n                IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cErc20Collateral.underlying());\\n\\n                if (redemptionStrategies.length > 0) {\\n                    require(redemptionStrategies.length == strategyData.length, \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\");\\n                    uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n                    for (uint256 i = 0; i < redemptionStrategies.length; i++) (underlyingCollateral, underlyingCollateralSeized) = this.redeemCustomCollateral(underlyingCollateral, underlyingCollateralSeized, redemptionStrategies[i], strategyData[i]); // redeemCustomCollateral called externally because this safeLiquidate function is payable (for some reason delegatecall fails when called with msg.value > 0)\\n                }\\n\\n                // Exchange redeemed collateral if necessary\\n                exchangeAllEthOrTokens(address(underlyingCollateral), exchangeSeizedTo, minOutputAmount, uniswapV2Router);\\n            }\\n        }\\n\\n        // Transfer seized amount to sender\\n        return transferSeizedFunds(exchangeSeizedTo, minOutputAmount);\\n    }\\n\\n    /**\\n     * @dev Transfers seized funds to the sender.\\n     * @param erc20Contract The address of the token to transfer.\\n     * @param minOutputAmount The minimum amount to transfer.\\n     */\\n    function transferSeizedFunds(address erc20Contract, uint256 minOutputAmount) internal returns (uint256) {\\n        uint256 seizedOutputAmount;\\n\\n        if (erc20Contract == address(0)) {\\n            seizedOutputAmount = address(this).balance;\\n            require(seizedOutputAmount >= minOutputAmount, \\\"Minimum ETH output amount not satisfied.\\\");\\n\\n            if (seizedOutputAmount > 0) {\\n                (bool success, ) = msg.sender.call{value: seizedOutputAmount}(\\\"\\\");\\n                require(success, \\\"Failed to transfer output ETH to msg.sender.\\\");\\n            }\\n        } else {\\n            IERC20Upgradeable token = IERC20Upgradeable(erc20Contract);\\n            seizedOutputAmount = token.balanceOf(address(this));\\n            require(seizedOutputAmount >= minOutputAmount, \\\"Minimum token output amount not satified.\\\");\\n            if (seizedOutputAmount > 0) token.safeTransfer(msg.sender, seizedOutputAmount);\\n        }\\n\\n        return seizedOutputAmount;\\n    }\\n\\n    /**\\n     * @dev WETH contract address.\\n     */\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /**\\n     * @dev WETH contract object.\\n     */\\n    IWETH constant private WETH = IWETH(WETH_ADDRESS);\\n\\n    /**\\n     * @dev UniswapV2Router02 contract address.\\n     */\\n    address constant private UNISWAP_V2_ROUTER_02_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    /**\\n     * @dev UniswapV2Router02 contract object.\\n     */\\n    IUniswapV2Router02 constant private UNISWAP_V2_ROUTER_02 = IUniswapV2Router02(UNISWAP_V2_ROUTER_02_ADDRESS);\\n\\n    /**\\n     * @dev Cached liquidator profit exchange source.\\n     * ERC20 token address or the zero address for ETH.\\n     * For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`.\\n     */\\n    address private _liquidatorProfitExchangeSource;\\n\\n    /**\\n     * @notice Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in ETH profit is seized. \\n     * @param borrower The borrower's Ethereum address.\\n     * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n     * @param cErc20 The borrowed CErc20 contract to repay.\\n     * @param cTokenCollateral The cToken collateral contract to be liquidated.\\n     * @param minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\\n     * @param exchangeProfitTo If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\\n     * @param uniswapV2RouterForBorrow The UniswapV2Router to use to convert the ETH to the underlying borrow (and flashloan the underlying borrow for ETH).\\n     * @param uniswapV2RouterForCollateral The UniswapV2Router to use to convert the underlying collateral to ETH.\\n     * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n     * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n     */\\n    function safeLiquidateToTokensWithFlashLoan(address borrower, uint256 repayAmount, ICErc20 cErc20, ICToken cTokenCollateral, uint256 minProfitAmount, address exchangeProfitTo, IUniswapV2Router02 uniswapV2RouterForBorrow, IUniswapV2Router02 uniswapV2RouterForCollateral, IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategyData, uint256 ethToCoinbase) external returns (uint256) {\\n        // Input validation\\n        require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n        // Flashloan via Uniswap (scoping `underlyingBorrow` variable to avoid \\\"stack too deep\\\" compiler error)\\n        IUniswapV2Pair pair;\\n        bool token0IsUnderlyingBorrow;\\n        {\\n            address underlyingBorrow = cErc20.underlying();\\n            pair = IUniswapV2Pair(IUniswapV2Factory(uniswapV2RouterForBorrow.factory()).getPair(underlyingBorrow, WETH_ADDRESS));\\n            token0IsUnderlyingBorrow = pair.token0() == underlyingBorrow;\\n        }\\n        pair.swap(token0IsUnderlyingBorrow ? repayAmount : 0, !token0IsUnderlyingBorrow ? repayAmount : 0, address(this), msg.data);\\n\\n        // Exchange profit, send ETH to coinbase if necessary, and transfer seized funds\\n        return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n    }\\n\\n    /**\\n     * @notice Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in ETH profit is seized. \\n     * @param borrower The borrower's Ethereum address.\\n     * @param repayAmount The ETH amount to repay to liquidate the unhealthy loan.\\n     * @param cEther The borrowed CEther contract to repay.\\n     * @param cErc20Collateral The CErc20 collateral contract to be liquidated.\\n     * @param minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\\n     * @param exchangeProfitTo If set to an address other than `cErc20Collateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).\\n     * @param uniswapV2RouterForCollateral The UniswapV2Router to use to convert the underlying collateral to ETH.\\n     * @param redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n     * @param strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n     */\\n    function safeLiquidateToEthWithFlashLoan(address borrower, uint256 repayAmount, ICEther cEther, ICErc20 cErc20Collateral, uint256 minProfitAmount, address exchangeProfitTo, IUniswapV2Router02 uniswapV2RouterForCollateral, IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategyData, uint256 ethToCoinbase) external returns (uint256) {\\n        // Input validation\\n        require(repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n        // Flashloan via Uniswap\\n        IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_ROUTER_02.factory(), address(uniswapV2RouterForCollateral) == UNISWAP_V2_ROUTER_02_ADDRESS && cErc20Collateral.underlying() == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 ? 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 : 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, WETH_ADDRESS)); // Use USDC unless collateral is USDC, in which case we use WBTC to avoid a reentrancy error when exchanging the collateral to repay the borrow\\n        address token0 = pair.token0();\\n        pair.swap(token0 == WETH_ADDRESS ? repayAmount : 0, token0 != WETH_ADDRESS ? repayAmount : 0, address(this), msg.data);\\n\\n        // Exchange profit, send ETH to coinbase if necessary, and transfer seized funds\\n        return distributeProfit(exchangeProfitTo, minProfitAmount, ethToCoinbase);\\n    }\\n\\n    /**\\n     * Exchange profit, send ETH to coinbase if necessary, and transfer seized funds to sender.\\n     */\\n    function distributeProfit(address exchangeProfitTo, uint256 minProfitAmount, uint256 ethToCoinbase) private returns (uint256) {\\n        if (exchangeProfitTo == address(0)) {\\n            // Exchange profit if necessary\\n            exchangeAllEthOrTokens(_liquidatorProfitExchangeSource, exchangeProfitTo, minProfitAmount + ethToCoinbase, UNISWAP_V2_ROUTER_02);\\n\\n            // Transfer ETH to block.coinbase if requested\\n            if (ethToCoinbase > 0) block.coinbase.call{value: ethToCoinbase}(\\\"\\\");\\n\\n            // Transfer profit to msg.sender\\n            return transferSeizedFunds(exchangeProfitTo, minProfitAmount);\\n        } else {\\n            // Transfer ETH to block.coinbase if requested\\n            if (ethToCoinbase > 0) {\\n                exchangeToExactEth(_liquidatorProfitExchangeSource, ethToCoinbase, UNISWAP_V2_ROUTER_02);\\n                block.coinbase.call{value: ethToCoinbase}(\\\"\\\");\\n            }\\n\\n            // Exchange profit if necessary\\n            exchangeAllEthOrTokens(_liquidatorProfitExchangeSource, exchangeProfitTo, minProfitAmount + ethToCoinbase, UNISWAP_V2_ROUTER_02);\\n\\n            // Transfer profit to msg.sender\\n            return transferSeizedFunds(exchangeProfitTo, minProfitAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Receives ETH from liquidations and flashloans.\\n     * Requires that `msg.sender` is WETH, a CToken, or a Uniswap V2 Router, or another contract.\\n     */\\n    receive() external payable {\\n        require(payable(msg.sender).isContract(), \\\"Sender is not a contract.\\\");\\n    }\\n\\n    /**\\n     * @dev Callback function for Uniswap flashloans.\\n     */\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override {\\n        (address cToken) = abi.decode(data[68:100], (address));\\n\\n        // Liquidate unhealthy borrow, exchange seized collateral, return flashloaned funds, and exchange profit\\n        if (ICToken(cToken).isCEther()) {\\n            // Decode params\\n            (address borrower, uint256 repayAmount, , address cTokenCollateral, uint256 minProfitAmount, address exchangeProfitTo, IUniswapV2Router02 uniswapV2Router, address[] memory redemptionStrategies, bytes[] memory strategyData) = abi.decode(data[4:], (address, uint256, address, address, uint256, address, IUniswapV2Router02, address[], bytes[]));\\n\\n            // Calculate flashloan return amount\\n            uint256 flashLoanReturnAmount = (repayAmount * 1000) / 997;\\n            if ((repayAmount * 1000) % 997 > 0) flashLoanReturnAmount++; // Round up if division resulted in a remainder\\n\\n            // Post WETH flashloan\\n            // Cache liquidation profit token (or the zero address for ETH) for use as source for exchange later\\n            _liquidatorProfitExchangeSource = postFlashLoanWeth(borrower, repayAmount, ICEther(cToken), ICErc20(cTokenCollateral), minProfitAmount, exchangeProfitTo, flashLoanReturnAmount, uniswapV2Router, redemptionStrategies, strategyData);\\n        }\\n        else {\\n            // Decode params\\n            (address borrower, uint256 repayAmount, , address cTokenCollateral, uint256 minProfitAmount, address exchangeProfitTo, IUniswapV2Router02 uniswapV2RouterForBorrow, IUniswapV2Router02 uniswapV2RouterForCollateral, address[] memory redemptionStrategies, bytes[] memory strategyData) = abi.decode(data[4:], (address, uint256, address, address, uint256, address, IUniswapV2Router02, IUniswapV2Router02, address[], bytes[]));\\n\\n            // Calculate flashloan return amount\\n            uint256 flashLoanReturnAmount = (repayAmount * 1000) / 997;\\n            if ((repayAmount * 1000) % 997 > 0) flashLoanReturnAmount++; // Round up if division resulted in a remainder\\n\\n            // Post token flashloan\\n            // Cache liquidation profit token (or the zero address for ETH) for use as source for exchange later\\n            _liquidatorProfitExchangeSource = postFlashLoanTokens(borrower, repayAmount, ICErc20(cToken), ICToken(cTokenCollateral), minProfitAmount, exchangeProfitTo, flashLoanReturnAmount, uniswapV2RouterForBorrow, uniswapV2RouterForCollateral, redemptionStrategies, strategyData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches and sorts the reserves for a pair.\\n     * Original code from UniswapV2Library.\\n     */\\n    function getReserves(address factory, address tokenA, address tokenB) private view returns (uint reserveA, uint reserveB) {\\n        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /**\\n     * @dev Performs chained getAmountIn calculations on any number of pairs.\\n     * Original code from UniswapV2Library.\\n     */\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) private view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = UniswapV2Library.getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    /**\\n     * @dev Liquidate unhealthy ETH borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n     */\\n    function postFlashLoanWeth(address borrower, uint256 repayAmount, ICEther cEther, ICErc20 cErc20Collateral, uint256 minProfitAmount, address exchangeProfitTo, uint256 flashLoanReturnAmount, IUniswapV2Router02 uniswapV2Router, address[] memory redemptionStrategies, bytes[] memory strategyData) private returns (address) {\\n        // Unwrap WETH\\n        WETH.withdraw(repayAmount);\\n\\n        // Liquidate ETH borrow using flashloaned ETH\\n        cEther.liquidateBorrow{value: repayAmount}(borrower, ICToken(cErc20Collateral));\\n\\n        // Redeem seized cTokens for underlying asset\\n        uint256 seizedCTokenAmount = cErc20Collateral.balanceOf(address(this));\\n        require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n        uint256 redeemResult = cErc20Collateral.redeem(seizedCTokenAmount);\\n        require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n        // Repay flashloan\\n        return repayWethFlashLoan(repayAmount, cErc20Collateral, exchangeProfitTo, flashLoanReturnAmount, uniswapV2Router, redemptionStrategies, strategyData);\\n    }\\n\\n    /**\\n     * @dev Repays WETH flashloans.\\n     */\\n    function repayWethFlashLoan(uint256 repayAmount, ICErc20 cErc20Collateral, address exchangeProfitTo, uint256 flashLoanReturnAmount, IUniswapV2Router02 uniswapV2Router, address[] memory redemptionStrategies, bytes[] memory strategyData) private returns (address) {\\n        // Check underlying collateral seized\\n        IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cErc20Collateral.underlying());\\n        uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n        // Redeem custom collateral if liquidation strategy is set\\n        if (redemptionStrategies.length > 0) {\\n            require(redemptionStrategies.length == strategyData.length, \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\");\\n            for (uint256 i = 0; i < redemptionStrategies.length; i++) (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(underlyingCollateral, underlyingCollateralSeized, IRedemptionStrategy(redemptionStrategies[i]), strategyData[i]);\\n        }\\n\\n        // Check side of the flashloan to repay: if input token (underlying collateral) is part of flashloan, repay it (to avoid reentracy error); otherwise, convert to WETH and repay WETH\\n        if (address(uniswapV2Router) == UNISWAP_V2_ROUTER_02_ADDRESS && address(underlyingCollateral) == (cErc20Collateral.underlying() == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 ? 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599 : 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\\n            // Get tokens required to repay flashloan and repay flashloan in non-WETH tokens\\n            uint256 tokensRequired = getAmountsIn(uniswapV2Router.factory(), repayAmount, array(address(underlyingCollateral), WETH_ADDRESS))[0];\\n            require(tokensRequired <= underlyingCollateralSeized, \\\"Flashloan return amount greater than seized collateral.\\\");\\n            require(underlyingCollateral.transfer(msg.sender, tokensRequired), \\\"Failed to transfer non-WETH tokens back to flashlender.\\\");\\n        } else {\\n            // If underlying collateral is not already WETH, convert it to WETH\\n            if (address(underlyingCollateral) != WETH_ADDRESS) {\\n                // If underlying collateral is ETH, deposit to WETH; if token, exchange to WETH\\n                if (address(underlyingCollateral) == address(0)) {\\n                    // Deposit ETH to WETH to repay flashloan\\n                    WETH.deposit{value: flashLoanReturnAmount}();\\n                } else {\\n                    // Approve to Uniswap router\\n                    safeApprove(underlyingCollateral, address(uniswapV2Router), underlyingCollateralSeized);\\n\\n                    // Swap collateral tokens for WETH via Uniswap router\\n                    if (exchangeProfitTo == address(underlyingCollateral)) uniswapV2Router.swapTokensForExactTokens(flashLoanReturnAmount, underlyingCollateralSeized, array(address(underlyingCollateral), WETH_ADDRESS), address(this), block.timestamp);\\n                    else {\\n                        uniswapV2Router.swapExactTokensForTokens(underlyingCollateralSeized, flashLoanReturnAmount, array(address(underlyingCollateral), WETH_ADDRESS), address(this), block.timestamp);\\n                        underlyingCollateral = IERC20Upgradeable(WETH_ADDRESS);\\n                    }\\n                }\\n            }\\n\\n            // Repay flashloan in WETH\\n            require(flashLoanReturnAmount <= IERC20Upgradeable(WETH_ADDRESS).balanceOf(address(this)), \\\"Flashloan return amount greater than WETH exchanged from seized collateral.\\\");\\n            require(WETH.transfer(msg.sender, flashLoanReturnAmount), \\\"Failed to transfer WETH back to flashlender.\\\");\\n        }\\n\\n        // Return the profited token\\n        return address(underlyingCollateral);\\n    }\\n\\n    /**\\n     * @dev Liquidate unhealthy token borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n     */\\n    function postFlashLoanTokens(address borrower, uint256 repayAmount, ICErc20 cErc20, ICToken cTokenCollateral, uint256 minProfitAmount, address exchangeProfitTo, uint256 flashLoanReturnAmount, IUniswapV2Router02 uniswapV2RouterForBorrow, IUniswapV2Router02 uniswapV2RouterForCollateral, address[] memory redemptionStrategies, bytes[] memory strategyData) private returns (address) {\\n        // Approve repayAmount to cErc20\\n        IERC20Upgradeable underlyingBorrow = IERC20Upgradeable(cErc20.underlying());\\n        safeApprove(underlyingBorrow, address(cErc20), repayAmount);\\n\\n        // Liquidate ETH borrow using flashloaned ETH\\n        require(cErc20.liquidateBorrow(borrower, repayAmount, cTokenCollateral) == 0, \\\"Liquidation failed.\\\");\\n\\n        // Redeem seized cTokens for underlying asset\\n        uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n        require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n        uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n        require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n        // Repay flashloan\\n        return repayTokenFlashLoan(repayAmount, cTokenCollateral, exchangeProfitTo, flashLoanReturnAmount, uniswapV2RouterForBorrow, uniswapV2RouterForCollateral, redemptionStrategies, strategyData, underlyingBorrow);\\n    }\\n\\n    /**\\n     * @dev Repays token flashloans.\\n     */\\n    function repayTokenFlashLoan(uint256 repayAmount, ICToken cTokenCollateral, address exchangeProfitTo, uint256 flashLoanReturnAmount, IUniswapV2Router02 uniswapV2RouterForBorrow, IUniswapV2Router02 uniswapV2RouterForCollateral, address[] memory redemptionStrategies, bytes[] memory strategyData, IERC20Upgradeable underlyingBorrow) private returns (address) {\\n        // Swap cTokenCollateral for cErc20 via Uniswap\\n        if (cTokenCollateral.isCEther()) {\\n            // Get flashloan repay amount in terms of WETH collateral via Uniswap router\\n            // uniswapV2RouterForCollateral is ignored because it should be the same as uniswapV2RouterForBorrow\\n            uint256 underlyingCollateralSeized = address(this).balance;\\n            uint256 wethRequired = getAmountsIn(uniswapV2RouterForBorrow.factory(), repayAmount, array(WETH_ADDRESS, address(underlyingBorrow)))[0];\\n\\n            // Repay flashloan\\n            require(wethRequired <= underlyingCollateralSeized, \\\"Seized ETH collateral not enough to repay flashloan.\\\");\\n            WETH.deposit{value: wethRequired}();\\n            require(WETH.transfer(msg.sender, wethRequired), \\\"Failed to repay Uniswap flashloan with WETH exchanged from seized collateral.\\\");\\n\\n            // Return the profited token (ETH)\\n            return address(0);\\n        } else {\\n            // Check underlying collateral seized\\n            IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n            uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n            // Redeem custom collateral if liquidation strategy is set\\n            if (redemptionStrategies.length > 0) {\\n                require(redemptionStrategies.length == strategyData.length, \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\");\\n                for (uint256 i = 0; i < redemptionStrategies.length; i++) (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(underlyingCollateral, underlyingCollateralSeized, IRedemptionStrategy(redemptionStrategies[i]), strategyData[i]);\\n            }\\n\\n            // Check which side of the flashloan to repay\\n            if (address(underlyingCollateral) == address(underlyingBorrow)) {\\n                // Repay flashloan on borrow side with collateral\\n                require(flashLoanReturnAmount <= underlyingBorrow.balanceOf(address(this)), \\\"Token flashloan return amount greater than tokens exchanged from seized collateral.\\\");\\n                require(underlyingBorrow.transfer(msg.sender, flashLoanReturnAmount), \\\"Failed to repay token flashloan on borrow (non-WETH) side.\\\");\\n\\n                // Return the profited token (same as collateral and borrow)\\n                return address(underlyingCollateral);\\n            } else {\\n                // Get WETH required to repay flashloan\\n                uint256 wethRequired = getAmountsIn(uniswapV2RouterForBorrow.factory(), repayAmount, array(WETH_ADDRESS, address(underlyingBorrow)))[0];\\n\\n                if (address(underlyingCollateral) != WETH_ADDRESS) {\\n                    // Approve to Uniswap router\\n                    safeApprove(underlyingCollateral, address(uniswapV2RouterForCollateral), underlyingCollateralSeized);\\n\\n                    // Swap collateral tokens for WETH to be repaid via Uniswap router\\n                    if (exchangeProfitTo == address(underlyingCollateral)) uniswapV2RouterForCollateral.swapTokensForExactTokens(wethRequired, underlyingCollateralSeized, array(address(underlyingCollateral), WETH_ADDRESS), address(this), block.timestamp);\\n                    else uniswapV2RouterForCollateral.swapExactTokensForTokens(underlyingCollateralSeized, wethRequired, array(address(underlyingCollateral), WETH_ADDRESS), address(this), block.timestamp);\\n                }\\n\\n                // Repay flashloan\\n                require(wethRequired <= IERC20Upgradeable(WETH_ADDRESS).balanceOf(address(this)), \\\"Not enough WETH exchanged from seized collateral to repay flashloan.\\\");\\n                require(WETH.transfer(msg.sender, wethRequired), \\\"Failed to repay Uniswap flashloan with WETH exchanged from seized collateral.\\\");\\n\\n                // Return the profited token (underlying collateral if same as exchangeProfitTo; otherwise, WETH)\\n                return exchangeProfitTo == address(underlyingCollateral) ? address(underlyingCollateral) : WETH_ADDRESS;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n     * Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\\n     */\\n    function redeemCustomCollateral(IERC20Upgradeable underlyingCollateral, uint256 underlyingCollateralSeized, IRedemptionStrategy strategy, bytes memory strategyData) public returns (IERC20Upgradeable, uint256) {\\n        bytes memory returndata = _functionDelegateCall(address(strategy), abi.encodeWithSelector(strategy.redeem.selector, underlyingCollateral, underlyingCollateralSeized, strategyData));\\n        return abi.decode(returndata, (IERC20Upgradeable, uint256));\\n    }\\n    \\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], but performing a delegate call.\\n     * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L37\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Used by `_functionDelegateCall` to verify the result of a delegate call.\\n     * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L45\\n     */\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array containing the parameters supplied.\\n     */\\n    function array(uint256 a) private pure returns (uint256[] memory) {\\n        uint256[] memory arr = new uint256[](1);\\n        arr[0] = a;\\n        return arr;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing the parameters supplied.\\n     */\\n    function array(address a) private pure returns (address[] memory) {\\n        address[] memory arr = new address[](1);\\n        arr[0] = a;\\n        return arr;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing the parameters supplied.\\n     */\\n    function array(address a, address b) private pure returns (address[] memory) {\\n        address[] memory arr = new address[](2);\\n        arr[0] = a;\\n        arr[1] = b;\\n        return arr;\\n    }\\n\\n    /**\\n     * @dev Returns an array containing the parameters supplied.\\n     */\\n    function array(address a, address b, address c) private pure returns (address[] memory) {\\n        address[] memory arr = new address[](3);\\n        arr[0] = a;\\n        arr[1] = b;\\n        arr[2] = c;\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0x06770d22eb7ca35de8577be4eb00e89ab6a3843b3b1a6f6e9d653f6db9277bbd\",\"license\":\"UNLICENSED\"},\"contracts/external/aave/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transfer(address dst, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf3e6fb5623734fe85abb238ab9d846f70129ab15dd4cba4e56951736ec92b4b3\",\"license\":\"agpl-3.0\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n    function underlying() external view returns (address);\\n    function liquidateBorrow(address borrower, uint repayAmount, ICToken cTokenCollateral) external returns (uint);\\n}\\n\",\"keccak256\":\"0x6372f7428d7f26e1b75e148bb97ba708e0ae5e11403890264b68c1cd3a35d288\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICEther.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CEther Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICEther is ICToken {\\n    function liquidateBorrow(address borrower, ICToken cTokenCollateral) external payable;\\n}\\n\",\"keccak256\":\"0xff5356ae2e745a8218c702d909525fdaa9a6bdda10aae07ac1ea7a3c4d09fe55\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function comptroller() external view returns (address);\\n    function adminFeeMantissa() external view returns (uint256);\\n    function fuseFeeMantissa() external view returns (uint256);\\n    function reserveFactorMantissa() external view returns (uint256);\\n    function totalReserves() external view returns (uint);\\n    function totalAdminFees() external view returns (uint);\\n    function totalFuseFees() external view returns (uint);\\n\\n    function isCToken() external view returns (bool);\\n    function isCEther() external view returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x8612e6d992c55389287de1495b7ae867c59a3c5cd2aee1d6f6d9c1138a473b48\",\"license\":\"BSD-3-Clause\"},\"contracts/external/uniswap/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9c52af5d140489ca4530af145841276bc0fbccde6a9b65ba9ac9cfc3f206b5d5\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x81df8718581a02a6613af4f2b9fa9b024e45ef8a9478234564ac9a0849ada6c0\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x169f7dfa721d0159176bf155acb4e011ff0ff5014bbb13949a998fd71255aa54\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x34b17143348fd68836771fb0f583098ab3be34fcc5cc8d35600b15f50ff02195\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb87dfe4acf800d562adabf7a0ceecd97020ab73f0afa674c22d3717ecd883c1\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            )))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn * 997;\\n        uint numerator = amountInWithFee * reserveOut;\\n        uint denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn * amountOut * 1000;\\n        uint denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa652fa1479767b815bf3d90af9a6c8d380444684d14ee18862d14ed9e4003e45\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n    /**\\n     * @notice Redeems custom collateral `token` for an underlying token.\\n     * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n     * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n     * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n     * @return outputToken The underlying ERC20 token outputted.\\n     * @return outputAmount The quantity of underlying tokens outputted.\\n     */\\n    function redeem(IERC20Upgradeable inputToken, uint256 inputAmount, bytes memory strategyData) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x351a6713b0d10d442ab5e0c8fd63d6b424489ec44403cac2165812225b66da16\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614d30806100206000396000f3fe6080604052600436106100595760003560e01c80630d1b2763146100b857806310d1e85c146100de578063700d5dd7146100fe578063a68ee1191461011e578063b59662581461013e578063c8348b541461017d57600080fd5b366100b357333b6100b15760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f74206120636f6e74726163742e0000000000000060448201526064015b60405180910390fd5b005b600080fd5b6100cb6100c6366004614003565b61019d565b6040519081526020015b60405180910390f35b3480156100ea57600080fd5b506100b16100f93660046140cd565b61052d565b34801561010a57600080fd5b506100cb610119366004614162565b61074c565b34801561012a57600080fd5b506100cb61013936600461424e565b6109d2565b34801561014a57600080fd5b5061015e61015936600461431c565b610e55565b604080516001600160a01b0390931683526020830191909152016100d5565b34801561018957600080fd5b506100cb610198366004614387565b610ed6565b60008034116101be5760405162461bcd60e51b81526004016100a89061445c565b604051635572051560e11b81526001600160a01b038a81166004830152888116602483015289169063aae40a2a9034906044016000604051808303818588803b15801561020a57600080fd5b505af115801561021e573d6000803e3d6000fd5b5050505050866001600160a01b0316856001600160a01b031614610516576040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a791906144b9565b905080156105145760405163db006a7560e01b8152600481018290526000906001600160a01b038a169063db006a75906024016020604051808303816000875af11580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d91906144b9565b9050801561033d5760405162461bcd60e51b81526004016100a8906144d2565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190614530565b8651909150156105055784518651146103cc5760405162461bcd60e51b81526004016100a89061454d565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043791906144b9565b905060005b875181101561050257306001600160a01b031663b596625884848b8581518110610468576104686145d0565b60200260200101518b8681518110610482576104826145d0565b60200260200101516040518563ffffffff1660e01b81526004016104a9949392919061463e565b60408051808303816000875af11580156104c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104eb9190614671565b9093509150806104fa816146b5565b91505061043c565b50505b61051181898b8a6111ad565b50505b505b6105208587611607565b9998505050505050505050565b600061053d6064604484866146d0565b81019061054a91906146fa565b9050806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190614717565b1561067b576000808080808080806105c98a6004818e6146d0565b8101906105d6919061479d565b985098509850985098509850509750975060006103e5886103e86105fa9190614837565b610604919061486c565b905060006103e56106178a6103e8614837565b6106219190614880565b11156106355780610631816146b5565b9150505b61064789898c8a8a8a878b8b8b611826565b600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050505050610744565b600080808080808080806106928b6004818f6146d0565b81019061069f9190614894565b9950995099509950995099509950509850985060006103e5896103e86106c59190614837565b6106cf919061486c565b905060006103e56106e28b6103e8614837565b6106ec9190614880565b111561070057806106fc816146b5565b9150505b6107138a8a8d8b8b8b878c8c8c8c611a3c565b600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050505050505b505050505050565b6000808b1161076d5760405162461bcd60e51b81526004016100a890614970565b60008060008c6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190614530565b9050886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190614530565b60405163e6a4390560e01b81526001600160a01b038381166004830152600080516020614cb48339815191526024830152919091169063e6a4390590604401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190614530565b9250806001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190614530565b6001600160a01b031614915050816001600160a01b031663022c0d9f8261094e576000610950565b8e5b831561095d57600061095f565b8f5b306000366040518663ffffffff1660e01b81526004016109839594939291906149b4565b600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506109c0898b86611cd0565b9e9d5050505050505050505050505050565b60008089116109f35760405162461bcd60e51b81526004016100a89061445c565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190614530565b9050610a6e6001600160a01b03821633308d611e1c565b610a79818a8c611e87565b604051637af1e23160e11b81526001600160a01b038c81166004830152602482018c905289811660448301528a169063f5e3c462906064016020604051808303816000875af1158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af491906144b9565b15610b375760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b60448201526064016100a8565b876001600160a01b0316866001600160a01b031614610e3c576040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb91906144b9565b90508015610e3a5760405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906144b9565b90508015610c515760405162461bcd60e51b81526004016100a8906144d2565b896001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190614717565b15610cca57610cc56000898b8a6111ad565b610e38565b60008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190614530565b875190915015610e2a578551875114610d595760405162461bcd60e51b81526004016100a89061454d565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc491906144b9565b905060005b8851811015610e2757610e1083838b8481518110610de957610de96145d0565b60200260200101518b8581518110610e0357610e036145d0565b6020026020010151610e55565b909350915080610e1f816146b5565b915050610dc9565b50505b610e36818a8c8b6111ad565b505b505b505b610e468688611607565b9b9a5050505050505050505050565b6000806000610eb2856310badf4e60e01b898988604051602401610e7b93929190614a03565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f36565b905080806020019051810190610ec89190614671565b925092505094509492505050565b6000808a11610ef75760405162461bcd60e51b81526004016100a890614970565b600061106c737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190614530565b6001600160a01b038816737a250d5630b4cf539739df2c5dacb4c659f2488d14801561102457508a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614530565b6001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b0316145b6110425773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48611058565b732260fac5e5542a773aa44fbcfedf7c193bc2c5995b600080516020614cb4833981519152612021565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d29190614530565b9050816001600160a01b031663022c0d9f600080516020614cb48339815191526001600160a01b0316836001600160a01b031614611111576000611113565b8d5b6001600160a01b038416600080516020614cb4833981519152141561113957600061113b565b8e5b306000366040518663ffffffff1660e01b815260040161115f9594939291906149b4565b600060405180830381600087803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b5050505061119c888a86611cd0565b9d9c50505050505050505050505050565b836001600160a01b0316836001600160a01b031614156111cc57611601565b6001600160a01b0384166112f7576001600160a01b038316600080516020614cb4833981519152141561126057600080516020614cb48339815191526001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561124257600080fd5b505af1158015611256573d6000803e3d6000fd5b5050505050611601565b806001600160a01b0316637ff36ab54784611289600080516020614cb4833981519152886120fa565b30426040518663ffffffff1660e01b81526004016112aa9493929190614a6e565b60006040518083038185885af11580156112c8573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526112f19190810190614aa3565b50611601565b6001600160a01b038416600080516020614cb483398151915214801561132457506001600160a01b038316155b156113f3576040516370a0823160e01b8152306004820152600080516020614cb483398151915290632e1a7d4d9082906370a0823190602401602060405180830381865afa15801561137a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139e91906144b9565b6040518263ffffffff1660e01b81526004016113bc91815260200190565b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b50505050611601565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146091906144b9565b905061146d828483611e87565b6001600160a01b03851661151357826001600160a01b03166318cbafe582866114a48a600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b81526004016114c6959493929190614b28565b6000604051808303816000875af11580156114e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261150d9190810190614aa3565b50610744565b826001600160a01b03166338ed17398286600080516020614cb48339815191526001600160a01b03168a6001600160a01b0316148061156857506001600160a01b038916600080516020614cb4833981519152145b61158a576115858a600080516020614cb48339815191528b612187565b611594565b6115948a8a6120fa565b30426040518663ffffffff1660e01b81526004016115b6959493929190614b28565b6000604051808303816000875af11580156115d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115fd9190810190614aa3565b5050505b50505050565b6000806001600160a01b0384166117355750478281101561167b5760405162461bcd60e51b815260206004820152602860248201527f4d696e696d756d20455448206f757470757420616d6f756e74206e6f742073616044820152673a34b9b334b2b21760c11b60648201526084016100a8565b801561173057604051600090339083908381818185875af1925050503d80600081146116c3576040519150601f19603f3d011682016040523d82523d6000602084013e6116c8565b606091505b505090508061172e5760405162461bcd60e51b815260206004820152602c60248201527f4661696c656420746f207472616e73666572206f75747075742045544820746f60448201526b1036b9b39739b2b73232b91760a11b60648201526084016100a8565b505b61181f565b6040516370a0823160e01b815230600482015284906001600160a01b038216906370a0823190602401602060405180830381865afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f91906144b9565b9150838210156118035760405162461bcd60e51b815260206004820152602960248201527f4d696e696d756d20746f6b656e206f757470757420616d6f756e74206e6f742060448201526839b0ba34b334b2b21760b91b60648201526084016100a8565b811561181d5761181d6001600160a01b038216338461224a565b505b9392505050565b604051632e1a7d4d60e01b8152600481018a9052600090600080516020614cb483398151915290632e1a7d4d90602401600060405180830381600087803b15801561187057600080fd5b505af1158015611884573d6000803e3d6000fd5b5050604051635572051560e11b81526001600160a01b038e811660048301528b811660248301528c16925063aae40a2a91508c906044016000604051808303818588803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b038c1692506370a082319150602401602060405180830381865afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195891906144b9565b90506000811161199f5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b60448201526064016100a8565b60405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af11580156119e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0d91906144b9565b90508015611a2d5760405162461bcd60e51b81526004016100a8906144d2565b61119c8c8b8a8a8a8a8a61227f565b6000808a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa19190614530565b9050611aae818c8e611e87565b604051637af1e23160e11b81526001600160a01b038e81166004830152602482018e90528b811660448301528c169063f5e3c462906064016020604051808303816000875af1158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2991906144b9565b15611b6c5760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b60448201526064016100a8565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa158015611bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd791906144b9565b905060008111611c1e5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b60448201526064016100a8565b60405163db006a7560e01b8152600481018290526000906001600160a01b038d169063db006a75906024016020604051808303816000875af1158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c91906144b9565b90508015611cac5760405162461bcd60e51b81526004016100a8906144d2565b611cbd8e8d8c8c8c8c8c8c8b612aa1565b9f9e505050505050505050505050505050565b60006001600160a01b038416611d7b57600054611d1b906201000090046001600160a01b031685611d018587614b64565b737a250d5630b4cf539739df2c5dacb4c659f2488d6111ad565b8115611d6a5760405141908390600081818185875af1925050503d8060008114611d61576040519150601f19603f3d011682016040523d82523d6000602084013e611d66565b606091505b5050505b611d748484611607565b905061181f565b8115611dfb57600054611db2906201000090046001600160a01b031683737a250d5630b4cf539739df2c5dacb4c659f2488d613438565b60405141908390600081818185875af1925050503d8060008114611df2576040519150601f19603f3d011682016040523d82523d6000602084013e611df7565b606091505b5050505b600054611d6a906201000090046001600160a01b031685611d018587614b64565b6040516001600160a01b03808516602483015283166044820152606481018290526116019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135d1565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efb91906144b9565b905081811015611601578015611f2057611f206001600160a01b0385168460006136a3565b6116016001600160a01b038516846000196136a3565b6060823b611f955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100a8565b600080846001600160a01b031684604051611fb09190614b7c565b600060405180830381855af49150503d8060008114611feb576040519150601f19603f3d011682016040523d82523d6000602084013e611ff0565b606091505b50915091506120188282604051806060016040528060278152602001614cd4602791396137b8565b95945050505050565b600080600061203085856137f1565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091508690604801604051602081830303815290604052805190602001206040516020016120d89291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516002808252606080830184529260009291906020830190803683370190505090508381600081518110612133576121336145d0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110612167576121676145d0565b6001600160a01b0390921660209283029190910190910152905092915050565b604080516003808252608082019092526060916000919060208201848036833701905050905084816000815181106121c1576121c16145d0565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106121f5576121f56145d0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110612229576122296145d0565b6001600160a01b039092166020928302919091019091015290509392505050565b6040516001600160a01b03831660248201526044810182905261227a90849063a9059cbb60e01b90606401611e50565b505050565b600080876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e49190614530565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561232e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235291906144b9565b8551909150156123d357835185511461237d5760405162461bcd60e51b81526004016100a89061454d565b60005b85518110156123d1576123ba83838884815181106123a0576123a06145d0565b6020026020010151888581518110610e0357610e036145d0565b9093509150806123c9816146b5565b915050612380565b505b6001600160a01b038616737a250d5630b4cf539739df2c5dacb4c659f2488d1480156124cd5750886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245c9190614530565b6001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b0316146124a25773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486124b8565b732260fac5e5542a773aa44fbcfedf7c193bc2c5995b6001600160a01b0316826001600160a01b0316145b156126d2576000612557876001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125399190614530565b8c61255286600080516020614cb48339815191526120fa565b6138e9565b600081518110612569576125696145d0565b60200260200101519050818111156125e95760405162461bcd60e51b815260206004820152603760248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e207365697a656420636f6c6c61746572616c2e00000000000000000060648201526084016100a8565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a9190614717565b6126cc5760405162461bcd60e51b815260206004820152603760248201527f4661696c656420746f207472616e73666572206e6f6e2d5745544820746f6b6560448201527f6e73206261636b20746f20666c6173686c656e6465722e00000000000000000060648201526084016100a8565b50612a94565b6001600160a01b038216600080516020614cb4833981519152146128c7576001600160a01b03821661276557600080516020614cb48339815191526001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b15801561274757600080fd5b505af115801561275b573d6000803e3d6000fd5b50505050506128c7565b612770828783611e87565b816001600160a01b0316886001600160a01b0316141561282257856001600160a01b0316638803dbee88836127b386600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b81526004016127d5959493929190614b28565b6000604051808303816000875af11580156127f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261281c9190810190614aa3565b506128c7565b856001600160a01b03166338ed1739828961284b86600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b815260040161286d959493929190614b28565b6000604051808303816000875af115801561288c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128b49190810190614aa3565b50600080516020614cb483398151915291505b6040516370a0823160e01b8152306004820152600080516020614cb4833981519152906370a0823190602401602060405180830381865afa158015612910573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293491906144b9565b8711156129bd5760405162461bcd60e51b815260206004820152604b60248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e20574554482065786368616e6765642066726f6d207365697a65642060648201526a31b7b63630ba32b930b61760a91b608482015260a4016100a8565b60405163a9059cbb60e01b815233600482015260248101889052600080516020614cb48339815191529063a9059cbb906044016020604051808303816000875af1158015612a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a339190614717565b612a945760405162461bcd60e51b815260206004820152602c60248201527f4661696c656420746f207472616e736665722057455448206261636b20746f2060448201526b333630b9b43632b73232b91760a11b60648201526084016100a8565b5098975050505050505050565b6000886001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b059190614717565b15612d185760004790506000612b8f886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b769190614530565b8d612552600080516020614cb4833981519152886120fa565b600081518110612ba157612ba16145d0565b6020026020010151905081811115612c185760405162461bcd60e51b815260206004820152603460248201527f5365697a65642045544820636f6c6c61746572616c206e6f7420656e6f756768604482015273103a37903932b830bc90333630b9b43637b0b71760611b60648201526084016100a8565b600080516020614cb48339815191526001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c6157600080fd5b505af1158015612c75573d6000803e3d6000fd5b505060405163a9059cbb60e01b815233600482015260248101859052600080516020614cb4833981519152935063a9059cbb925060440190506020604051808303816000875af1158015612ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf19190614717565b612d0d5760405162461bcd60e51b81526004016100a890614b98565b600092505050610520565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7c9190614530565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dea91906144b9565b865190915015612e6b578451865114612e155760405162461bcd60e51b81526004016100a89061454d565b60005b8651811015612e6957612e528383898481518110612e3857612e386145d0565b6020026020010151898581518110610e0357610e036145d0565b909350915080612e61816146b5565b915050612e18565b505b836001600160a01b0316826001600160a01b03161415613069576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed91906144b9565b891115612f7e5760405162461bcd60e51b815260206004820152605360248201527f546f6b656e20666c6173686c6f616e2072657475726e20616d6f756e7420677260448201527f6561746572207468616e20746f6b656e732065786368616e6765642066726f6d6064820152721039b2b4bd32b21031b7b63630ba32b930b61760691b608482015260a4016100a8565b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fef9190614717565b6130615760405162461bcd60e51b815260206004820152603a60248201527f4661696c656420746f20726570617920746f6b656e20666c6173686c6f616e2060448201527f6f6e20626f72726f7720286e6f6e2d574554482920736964652e00000000000060648201526084016100a8565b509050610520565b60006130e9896001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d09190614530565b8e612552600080516020614cb4833981519152896120fa565b6000815181106130fb576130fb6145d0565b60200260200101519050600080516020614cb48339815191526001600160a01b0316836001600160a01b03161461327d57613137838984611e87565b826001600160a01b03168b6001600160a01b031614156131e957876001600160a01b0316638803dbee828461317a87600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b815260040161319c959493929190614b28565b6000604051808303816000875af11580156131bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131e39190810190614aa3565b5061327d565b876001600160a01b03166338ed1739838361321287600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b8152600401613234959493929190614b28565b6000604051808303816000875af1158015613253573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261327b9190810190614aa3565b505b6040516370a0823160e01b8152306004820152600080516020614cb4833981519152906370a0823190602401602060405180830381865afa1580156132c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ea91906144b9565b81111561336d5760405162461bcd60e51b8152602060048201526044602482018190527f4e6f7420656e6f75676820574554482065786368616e6765642066726f6d2073908201527f65697a656420636f6c6c61746572616c20746f20726570617920666c6173686c60648201526337b0b71760e11b608482015260a4016100a8565b60405163a9059cbb60e01b815233600482015260248101829052600080516020614cb48339815191529063a9059cbb906044016020604051808303816000875af11580156133bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e39190614717565b6133ff5760405162461bcd60e51b81526004016100a890614b98565b826001600160a01b03168b6001600160a01b03161461342c57600080516020614cb483398151915261342e565b825b9350505050610520565b6001600160a01b03831661344b57505050565b6001600160a01b038316600080516020614cb483398151915214156134c557604051632e1a7d4d60e01b815260048101839052600080516020614cb483398151915290632e1a7d4d90602401600060405180830381600087803b1580156134b157600080fd5b505af11580156115fd573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561350e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353291906144b9565b905061353f828483611e87565b826001600160a01b0316634a25d94a858361356889600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b815260040161358a959493929190614b28565b6000604051808303816000875af11580156135a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107449190810190614aa3565b6000613626826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a769092919063ffffffff16565b80519091501561227a57808060200190518101906136449190614717565b61227a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100a8565b80158061371d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156136f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371b91906144b9565b155b6137885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016100a8565b6040516001600160a01b03831660248201526044810182905261227a90849063095ea7b360e01b90606401611e50565b606083156137c757508161181f565b8251156137d75782518084602001fd5b8160405162461bcd60e51b81526004016100a89190614c0b565b600080826001600160a01b0316846001600160a01b031614156138645760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016100a8565b826001600160a01b0316846001600160a01b031610613884578284613887565b83835b90925090506001600160a01b0382166138e25760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016100a8565b9250929050565b606060028251101561393d5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016100a8565b81516001600160401b0381111561395657613956613e38565b60405190808252806020026020018201604052801561397f578160200160208202803683370190505b5090508281600183516139929190614c1e565b815181106139a2576139a26145d0565b6020026020010181815250506000600183516139be9190614c1e565b90505b801561181d57600080613a1187866139da600187614c1e565b815181106139ea576139ea6145d0565b6020026020010151878681518110613a0457613a046145d0565b6020026020010151613a8d565b91509150613a39848481518110613a2a57613a2a6145d0565b60200260200101518383613bc2565b84613a45600186614c1e565b81518110613a5557613a556145d0565b60200260200101818152505050508080613a6e90614c35565b9150506139c1565b6060613a858484600085613ce8565b949350505050565b6000806000613a9c85856137f1565b5060405163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291925060009182919089169063e6a4390590604401602060405180830381865afa158015613af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b189190614530565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b799190614c63565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613bb0578082613bb3565b81815b90999098509650505050505050565b6000808411613c285760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b60648201526084016100a8565b600083118015613c385750600082115b613c955760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016100a8565b6000613ca18585614837565b613cad906103e8614837565b90506000613cbb8685614c1e565b613cc7906103e5614837565b9050613cd3818361486c565b613cde906001614b64565b9695505050505050565b606082471015613d495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100a8565b843b613d975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100a8565b600080866001600160a01b03168587604051613db39190614b7c565b60006040518083038185875af1925050503d8060008114613df0576040519150601f19603f3d011682016040523d82523d6000602084013e613df5565b606091505b5091509150613e058282866137b8565b979650505050505050565b6001600160a01b0381168114613e2557600080fd5b50565b8035613e3381613e10565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e7657613e76613e38565b604052919050565b60006001600160401b03821115613e9757613e97613e38565b5060051b60200190565b600082601f830112613eb257600080fd5b81356020613ec7613ec283613e7e565b613e4e565b82815260059290921b84018101918181019086841115613ee657600080fd5b8286015b84811015613f0a578035613efd81613e10565b8352918301918301613eea565b509695505050505050565b600082601f830112613f2657600080fd5b81356001600160401b03811115613f3f57613f3f613e38565b613f52601f8201601f1916602001613e4e565b818152846020838601011115613f6757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613f9557600080fd5b81356020613fa5613ec283613e7e565b82815260059290921b84018101918181019086841115613fc457600080fd5b8286015b84811015613f0a5780356001600160401b03811115613fe75760008081fd5b613ff58986838b0101613f15565b845250918301918301613fc8565b600080600080600080600080610100898b03121561402057600080fd5b883561402b81613e10565b9750602089013561403b81613e10565b9650604089013561404b81613e10565b955060608901359450608089013561406281613e10565b935060a089013561407281613e10565b925060c08901356001600160401b038082111561408e57600080fd5b61409a8c838d01613ea1565b935060e08b01359150808211156140b057600080fd5b506140bd8b828c01613f84565b9150509295985092959890939650565b6000806000806000608086880312156140e557600080fd5b85356140f081613e10565b9450602086013593506040860135925060608601356001600160401b038082111561411a57600080fd5b818801915088601f83011261412e57600080fd5b81358181111561413d57600080fd5b89602082850101111561414f57600080fd5b9699959850939650602001949392505050565b60008060008060008060008060008060006101608c8e03121561418457600080fd5b61418d8c613e28565b9a5060208c013599506141a260408d01613e28565b98506141b060608d01613e28565b975060808c013596506141c560a08d01613e28565b95506141d360c08d01613e28565b94506141e160e08d01613e28565b93506001600160401b03806101008e013511156141fd57600080fd5b61420e8e6101008f01358f01613ea1565b9350806101208e0135111561422257600080fd5b506142348d6101208e01358e01613f84565b91506101408c013590509295989b509295989b9093969950565b60008060008060008060008060006101208a8c03121561426d57600080fd5b893561427881613e10565b985060208a0135975060408a013561428f81613e10565b965061429d60608b01613e28565b955060808a013594506142b260a08b01613e28565b93506142c060c08b01613e28565b925060e08a01356001600160401b03808211156142dc57600080fd5b6142e88d838e01613ea1565b93506101008c01359150808211156142ff57600080fd5b5061430c8c828d01613f84565b9150509295985092959850929598565b6000806000806080858703121561433257600080fd5b843561433d81613e10565b935060208501359250604085013561435481613e10565b915060608501356001600160401b0381111561436f57600080fd5b61437b87828801613f15565b91505092959194509250565b6000806000806000806000806000806101408b8d0312156143a757600080fd5b6143b08b613e28565b995060208b013598506143c560408c01613e28565b97506143d360608c01613e28565b965060808b013595506143e860a08c01613e28565b94506143f660c08c01613e28565b935060e08b01356001600160401b038082111561441257600080fd5b61441e8e838f01613ea1565b94506101008d013591508082111561443557600080fd5b506144428d828e01613f84565b9250506101208b013590509295989b9194979a5092959850565b60208082526038908201527f526570617920616d6f756e7420287472616e73616374696f6e2076616c75652960408201527f206d7573742062652067726561746572207468616e20302e0000000000000000606082015260800190565b6000602082840312156144cb57600080fd5b5051919050565b602080825260409082018190527f4572726f722063616c6c696e672072656465656d696e67207365697a65642063908201527f546f6b656e3a206572726f7220636f6465206e6f7420657175616c20746f2030606082015260800190565b60006020828403121561454257600080fd5b815161181f81613e10565b6020808252605b908201527f49526564656d7074696f6e537472617465677920636f6e74726163742061727260408201527f617920616e64207374726174656779206461746120627974657320617272617960608201527f206d6e75737420746865207468652073616d65206c656e6774682e0000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60005b838110156146015781810151838201526020016145e9565b838111156116015750506000910152565b6000815180845261462a8160208601602086016145e6565b601f01601f19169290920160200192915050565b6001600160a01b0385811682526020820185905283166040820152608060608201819052600090613cde90830184614612565b6000806040838503121561468457600080fd5b825161468f81613e10565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156146c9576146c961469f565b5060010190565b600080858511156146e057600080fd5b838611156146ed57600080fd5b5050820193919092039150565b60006020828403121561470c57600080fd5b813561181f81613e10565b60006020828403121561472957600080fd5b8151801515811461181f57600080fd5b600082601f83011261474a57600080fd5b8135602061475a613ec283613e7e565b82815260059290921b8401810191818101908684111561477957600080fd5b8286015b84811015613f0a57803561479081613e10565b835291830191830161477d565b60008060008060008060008060006101208a8c0312156147bc57600080fd5b89356147c781613e10565b985060208a0135975060408a01356147de81613e10565b96506147ec60608b01613e28565b955060808a0135945061480160a08b01613e28565b935061480f60c08b01613e28565b925060e08a01356001600160401b038082111561482b57600080fd5b6142e88d838e01614739565b60008160001904831182151516156148515761485161469f565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261487b5761487b614856565b500490565b60008261488f5761488f614856565b500690565b6000806000806000806000806000806101408b8d0312156148b457600080fd5b6148bd8b613e28565b995060208b013598506148d260408c01613e28565b97506148e060608c01613e28565b965060808b013595506148f560a08c01613e28565b945061490360c08c01613e28565b935061491160e08c01613e28565b92506101008b01356001600160401b038082111561492e57600080fd5b61493a8e838f01614739565b93506101208d013591508082111561495157600080fd5b5061495e8d828e01613f84565b9150509295989b9194979a5092959850565b60208082526024908201527f526570617920616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b858152602081018590526001600160a01b03841660408201526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60018060a01b03841681528260208201526060604082015260006120186060830184614612565b600081518084526020808501945080840160005b83811015614a635781516001600160a01b031687529582019590820190600101614a3e565b509495945050505050565b848152608060208201526000614a876080830186614a2a565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215614ab657600080fd5b82516001600160401b03811115614acc57600080fd5b8301601f81018513614add57600080fd5b8051614aeb613ec282613e7e565b81815260059190911b82018301908381019087831115614b0a57600080fd5b928401925b82841015613e0557835182529284019290840190614b0f565b85815284602082015260a060408201526000614b4760a0830186614a2a565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115614b7757614b7761469f565b500190565b60008251614b8e8184602087016145e6565b9190910192915050565b6020808252604d908201527f4661696c656420746f20726570617920556e697377617020666c6173686c6f6160408201527f6e207769746820574554482065786368616e6765642066726f6d207365697a6560608201526c321031b7b63630ba32b930b61760991b608082015260a00190565b60208152600061181f6020830184614612565b600082821015614c3057614c3061469f565b500390565b600081614c4457614c4461469f565b506000190190565b80516001600160701b0381168114613e3357600080fd5b600080600060608486031215614c7857600080fd5b614c8184614c4c565b9250614c8f60208501614c4c565b9150604084015163ffffffff81168114614ca857600080fd5b80915050925092509256fe000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206a075e33d9b1987cd481b29bd01e76b6c727a31ca89df526354734c8465ab65964736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80630d1b2763146100b857806310d1e85c146100de578063700d5dd7146100fe578063a68ee1191461011e578063b59662581461013e578063c8348b541461017d57600080fd5b366100b357333b6100b15760405162461bcd60e51b815260206004820152601960248201527f53656e646572206973206e6f74206120636f6e74726163742e0000000000000060448201526064015b60405180910390fd5b005b600080fd5b6100cb6100c6366004614003565b61019d565b6040519081526020015b60405180910390f35b3480156100ea57600080fd5b506100b16100f93660046140cd565b61052d565b34801561010a57600080fd5b506100cb610119366004614162565b61074c565b34801561012a57600080fd5b506100cb61013936600461424e565b6109d2565b34801561014a57600080fd5b5061015e61015936600461431c565b610e55565b604080516001600160a01b0390931683526020830191909152016100d5565b34801561018957600080fd5b506100cb610198366004614387565b610ed6565b60008034116101be5760405162461bcd60e51b81526004016100a89061445c565b604051635572051560e11b81526001600160a01b038a81166004830152888116602483015289169063aae40a2a9034906044016000604051808303818588803b15801561020a57600080fd5b505af115801561021e573d6000803e3d6000fd5b5050505050866001600160a01b0316856001600160a01b031614610516576040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a791906144b9565b905080156105145760405163db006a7560e01b8152600481018290526000906001600160a01b038a169063db006a75906024016020604051808303816000875af11580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d91906144b9565b9050801561033d5760405162461bcd60e51b81526004016100a8906144d2565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190614530565b8651909150156105055784518651146103cc5760405162461bcd60e51b81526004016100a89061454d565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610413573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043791906144b9565b905060005b875181101561050257306001600160a01b031663b596625884848b8581518110610468576104686145d0565b60200260200101518b8681518110610482576104826145d0565b60200260200101516040518563ffffffff1660e01b81526004016104a9949392919061463e565b60408051808303816000875af11580156104c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104eb9190614671565b9093509150806104fa816146b5565b91505061043c565b50505b61051181898b8a6111ad565b50505b505b6105208587611607565b9998505050505050505050565b600061053d6064604484866146d0565b81019061054a91906146fa565b9050806001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae9190614717565b1561067b576000808080808080806105c98a6004818e6146d0565b8101906105d6919061479d565b985098509850985098509850509750975060006103e5886103e86105fa9190614837565b610604919061486c565b905060006103e56106178a6103e8614837565b6106219190614880565b11156106355780610631816146b5565b9150505b61064789898c8a8a8a878b8b8b611826565b600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050505050610744565b600080808080808080806106928b6004818f6146d0565b81019061069f9190614894565b9950995099509950995099509950509850985060006103e5896103e86106c59190614837565b6106cf919061486c565b905060006103e56106e28b6103e8614837565b6106ec9190614880565b111561070057806106fc816146b5565b9150505b6107138a8a8d8b8b8b878c8c8c8c611a3c565b600060026101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050505050505b505050505050565b6000808b1161076d5760405162461bcd60e51b81526004016100a890614970565b60008060008c6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190614530565b9050886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190614530565b60405163e6a4390560e01b81526001600160a01b038381166004830152600080516020614cb48339815191526024830152919091169063e6a4390590604401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190614530565b9250806001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190614530565b6001600160a01b031614915050816001600160a01b031663022c0d9f8261094e576000610950565b8e5b831561095d57600061095f565b8f5b306000366040518663ffffffff1660e01b81526004016109839594939291906149b4565b600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506109c0898b86611cd0565b9e9d5050505050505050505050505050565b60008089116109f35760405162461bcd60e51b81526004016100a89061445c565b6000886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190614530565b9050610a6e6001600160a01b03821633308d611e1c565b610a79818a8c611e87565b604051637af1e23160e11b81526001600160a01b038c81166004830152602482018c905289811660448301528a169063f5e3c462906064016020604051808303816000875af1158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af491906144b9565b15610b375760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b60448201526064016100a8565b876001600160a01b0316866001600160a01b031614610e3c576040516370a0823160e01b81523060048201526000906001600160a01b038a16906370a0823190602401602060405180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb91906144b9565b90508015610e3a5760405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af1158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906144b9565b90508015610c515760405162461bcd60e51b81526004016100a8906144d2565b896001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190614717565b15610cca57610cc56000898b8a6111ad565b610e38565b60008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190614530565b875190915015610e2a578551875114610d595760405162461bcd60e51b81526004016100a89061454d565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc491906144b9565b905060005b8851811015610e2757610e1083838b8481518110610de957610de96145d0565b60200260200101518b8581518110610e0357610e036145d0565b6020026020010151610e55565b909350915080610e1f816146b5565b915050610dc9565b50505b610e36818a8c8b6111ad565b505b505b505b610e468688611607565b9b9a5050505050505050505050565b6000806000610eb2856310badf4e60e01b898988604051602401610e7b93929190614a03565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f36565b905080806020019051810190610ec89190614671565b925092505094509492505050565b6000808a11610ef75760405162461bcd60e51b81526004016100a890614970565b600061106c737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190614530565b6001600160a01b038816737a250d5630b4cf539739df2c5dacb4c659f2488d14801561102457508a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614530565b6001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b0316145b6110425773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48611058565b732260fac5e5542a773aa44fbcfedf7c193bc2c5995b600080516020614cb4833981519152612021565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d29190614530565b9050816001600160a01b031663022c0d9f600080516020614cb48339815191526001600160a01b0316836001600160a01b031614611111576000611113565b8d5b6001600160a01b038416600080516020614cb4833981519152141561113957600061113b565b8e5b306000366040518663ffffffff1660e01b815260040161115f9594939291906149b4565b600060405180830381600087803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b5050505061119c888a86611cd0565b9d9c50505050505050505050505050565b836001600160a01b0316836001600160a01b031614156111cc57611601565b6001600160a01b0384166112f7576001600160a01b038316600080516020614cb4833981519152141561126057600080516020614cb48339815191526001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561124257600080fd5b505af1158015611256573d6000803e3d6000fd5b5050505050611601565b806001600160a01b0316637ff36ab54784611289600080516020614cb4833981519152886120fa565b30426040518663ffffffff1660e01b81526004016112aa9493929190614a6e565b60006040518083038185885af11580156112c8573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526112f19190810190614aa3565b50611601565b6001600160a01b038416600080516020614cb483398151915214801561132457506001600160a01b038316155b156113f3576040516370a0823160e01b8152306004820152600080516020614cb483398151915290632e1a7d4d9082906370a0823190602401602060405180830381865afa15801561137a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139e91906144b9565b6040518263ffffffff1660e01b81526004016113bc91815260200190565b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b50505050611601565b6040516370a0823160e01b815230600482015284906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146091906144b9565b905061146d828483611e87565b6001600160a01b03851661151357826001600160a01b03166318cbafe582866114a48a600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b81526004016114c6959493929190614b28565b6000604051808303816000875af11580156114e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261150d9190810190614aa3565b50610744565b826001600160a01b03166338ed17398286600080516020614cb48339815191526001600160a01b03168a6001600160a01b0316148061156857506001600160a01b038916600080516020614cb4833981519152145b61158a576115858a600080516020614cb48339815191528b612187565b611594565b6115948a8a6120fa565b30426040518663ffffffff1660e01b81526004016115b6959493929190614b28565b6000604051808303816000875af11580156115d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115fd9190810190614aa3565b5050505b50505050565b6000806001600160a01b0384166117355750478281101561167b5760405162461bcd60e51b815260206004820152602860248201527f4d696e696d756d20455448206f757470757420616d6f756e74206e6f742073616044820152673a34b9b334b2b21760c11b60648201526084016100a8565b801561173057604051600090339083908381818185875af1925050503d80600081146116c3576040519150601f19603f3d011682016040523d82523d6000602084013e6116c8565b606091505b505090508061172e5760405162461bcd60e51b815260206004820152602c60248201527f4661696c656420746f207472616e73666572206f75747075742045544820746f60448201526b1036b9b39739b2b73232b91760a11b60648201526084016100a8565b505b61181f565b6040516370a0823160e01b815230600482015284906001600160a01b038216906370a0823190602401602060405180830381865afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f91906144b9565b9150838210156118035760405162461bcd60e51b815260206004820152602960248201527f4d696e696d756d20746f6b656e206f757470757420616d6f756e74206e6f742060448201526839b0ba34b334b2b21760b91b60648201526084016100a8565b811561181d5761181d6001600160a01b038216338461224a565b505b9392505050565b604051632e1a7d4d60e01b8152600481018a9052600090600080516020614cb483398151915290632e1a7d4d90602401600060405180830381600087803b15801561187057600080fd5b505af1158015611884573d6000803e3d6000fd5b5050604051635572051560e11b81526001600160a01b038e811660048301528b811660248301528c16925063aae40a2a91508c906044016000604051808303818588803b1580156118d457600080fd5b505af11580156118e8573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093506001600160a01b038c1692506370a082319150602401602060405180830381865afa158015611934573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195891906144b9565b90506000811161199f5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b60448201526064016100a8565b60405163db006a7560e01b8152600481018290526000906001600160a01b038b169063db006a75906024016020604051808303816000875af11580156119e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0d91906144b9565b90508015611a2d5760405162461bcd60e51b81526004016100a8906144d2565b61119c8c8b8a8a8a8a8a61227f565b6000808a6001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa19190614530565b9050611aae818c8e611e87565b604051637af1e23160e11b81526001600160a01b038e81166004830152602482018e90528b811660448301528c169063f5e3c462906064016020604051808303816000875af1158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2991906144b9565b15611b6c5760405162461bcd60e51b81526020600482015260136024820152722634b8bab4b230ba34b7b7103330b4b632b21760691b60448201526064016100a8565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa158015611bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd791906144b9565b905060008111611c1e5760405162461bcd60e51b815260206004820152601260248201527127379031aa37b5b2b7399039b2b4bd32b21760711b60448201526064016100a8565b60405163db006a7560e01b8152600481018290526000906001600160a01b038d169063db006a75906024016020604051808303816000875af1158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c91906144b9565b90508015611cac5760405162461bcd60e51b81526004016100a8906144d2565b611cbd8e8d8c8c8c8c8c8c8b612aa1565b9f9e505050505050505050505050505050565b60006001600160a01b038416611d7b57600054611d1b906201000090046001600160a01b031685611d018587614b64565b737a250d5630b4cf539739df2c5dacb4c659f2488d6111ad565b8115611d6a5760405141908390600081818185875af1925050503d8060008114611d61576040519150601f19603f3d011682016040523d82523d6000602084013e611d66565b606091505b5050505b611d748484611607565b905061181f565b8115611dfb57600054611db2906201000090046001600160a01b031683737a250d5630b4cf539739df2c5dacb4c659f2488d613438565b60405141908390600081818185875af1925050503d8060008114611df2576040519150601f19603f3d011682016040523d82523d6000602084013e611df7565b606091505b5050505b600054611d6a906201000090046001600160a01b031685611d018587614b64565b6040516001600160a01b03808516602483015283166044820152606481018290526116019085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135d1565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efb91906144b9565b905081811015611601578015611f2057611f206001600160a01b0385168460006136a3565b6116016001600160a01b038516846000196136a3565b6060823b611f955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016100a8565b600080846001600160a01b031684604051611fb09190614b7c565b600060405180830381855af49150503d8060008114611feb576040519150601f19603f3d011682016040523d82523d6000602084013e611ff0565b606091505b50915091506120188282604051806060016040528060278152602001614cd4602791396137b8565b95945050505050565b600080600061203085856137f1565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091508690604801604051602081830303815290604052805190602001206040516020016120d89291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516002808252606080830184529260009291906020830190803683370190505090508381600081518110612133576121336145d0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110612167576121676145d0565b6001600160a01b0390921660209283029190910190910152905092915050565b604080516003808252608082019092526060916000919060208201848036833701905050905084816000815181106121c1576121c16145d0565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106121f5576121f56145d0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110612229576122296145d0565b6001600160a01b039092166020928302919091019091015290509392505050565b6040516001600160a01b03831660248201526044810182905261227a90849063a9059cbb60e01b90606401611e50565b505050565b600080876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e49190614530565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561232e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235291906144b9565b8551909150156123d357835185511461237d5760405162461bcd60e51b81526004016100a89061454d565b60005b85518110156123d1576123ba83838884815181106123a0576123a06145d0565b6020026020010151888581518110610e0357610e036145d0565b9093509150806123c9816146b5565b915050612380565b505b6001600160a01b038616737a250d5630b4cf539739df2c5dacb4c659f2488d1480156124cd5750886001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245c9190614530565b6001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486001600160a01b0316146124a25773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486124b8565b732260fac5e5542a773aa44fbcfedf7c193bc2c5995b6001600160a01b0316826001600160a01b0316145b156126d2576000612557876001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125399190614530565b8c61255286600080516020614cb48339815191526120fa565b6138e9565b600081518110612569576125696145d0565b60200260200101519050818111156125e95760405162461bcd60e51b815260206004820152603760248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e207365697a656420636f6c6c61746572616c2e00000000000000000060648201526084016100a8565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015612636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265a9190614717565b6126cc5760405162461bcd60e51b815260206004820152603760248201527f4661696c656420746f207472616e73666572206e6f6e2d5745544820746f6b6560448201527f6e73206261636b20746f20666c6173686c656e6465722e00000000000000000060648201526084016100a8565b50612a94565b6001600160a01b038216600080516020614cb4833981519152146128c7576001600160a01b03821661276557600080516020614cb48339815191526001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b15801561274757600080fd5b505af115801561275b573d6000803e3d6000fd5b50505050506128c7565b612770828783611e87565b816001600160a01b0316886001600160a01b0316141561282257856001600160a01b0316638803dbee88836127b386600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b81526004016127d5959493929190614b28565b6000604051808303816000875af11580156127f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261281c9190810190614aa3565b506128c7565b856001600160a01b03166338ed1739828961284b86600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b815260040161286d959493929190614b28565b6000604051808303816000875af115801561288c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128b49190810190614aa3565b50600080516020614cb483398151915291505b6040516370a0823160e01b8152306004820152600080516020614cb4833981519152906370a0823190602401602060405180830381865afa158015612910573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293491906144b9565b8711156129bd5760405162461bcd60e51b815260206004820152604b60248201527f466c6173686c6f616e2072657475726e20616d6f756e7420677265617465722060448201527f7468616e20574554482065786368616e6765642066726f6d207365697a65642060648201526a31b7b63630ba32b930b61760a91b608482015260a4016100a8565b60405163a9059cbb60e01b815233600482015260248101889052600080516020614cb48339815191529063a9059cbb906044016020604051808303816000875af1158015612a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a339190614717565b612a945760405162461bcd60e51b815260206004820152602c60248201527f4661696c656420746f207472616e736665722057455448206261636b20746f2060448201526b333630b9b43632b73232b91760a11b60648201526084016100a8565b5098975050505050505050565b6000886001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b059190614717565b15612d185760004790506000612b8f886001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b769190614530565b8d612552600080516020614cb4833981519152886120fa565b600081518110612ba157612ba16145d0565b6020026020010151905081811115612c185760405162461bcd60e51b815260206004820152603460248201527f5365697a65642045544820636f6c6c61746572616c206e6f7420656e6f756768604482015273103a37903932b830bc90333630b9b43637b0b71760611b60648201526084016100a8565b600080516020614cb48339815191526001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c6157600080fd5b505af1158015612c75573d6000803e3d6000fd5b505060405163a9059cbb60e01b815233600482015260248101859052600080516020614cb4833981519152935063a9059cbb925060440190506020604051808303816000875af1158015612ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf19190614717565b612d0d5760405162461bcd60e51b81526004016100a890614b98565b600092505050610520565b6000896001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7c9190614530565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dea91906144b9565b865190915015612e6b578451865114612e155760405162461bcd60e51b81526004016100a89061454d565b60005b8651811015612e6957612e528383898481518110612e3857612e386145d0565b6020026020010151898581518110610e0357610e036145d0565b909350915080612e61816146b5565b915050612e18565b505b836001600160a01b0316826001600160a01b03161415613069576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015612ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eed91906144b9565b891115612f7e5760405162461bcd60e51b815260206004820152605360248201527f546f6b656e20666c6173686c6f616e2072657475726e20616d6f756e7420677260448201527f6561746572207468616e20746f6b656e732065786368616e6765642066726f6d6064820152721039b2b4bd32b21031b7b63630ba32b930b61760691b608482015260a4016100a8565b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fef9190614717565b6130615760405162461bcd60e51b815260206004820152603a60248201527f4661696c656420746f20726570617920746f6b656e20666c6173686c6f616e2060448201527f6f6e20626f72726f7720286e6f6e2d574554482920736964652e00000000000060648201526084016100a8565b509050610520565b60006130e9896001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d09190614530565b8e612552600080516020614cb4833981519152896120fa565b6000815181106130fb576130fb6145d0565b60200260200101519050600080516020614cb48339815191526001600160a01b0316836001600160a01b03161461327d57613137838984611e87565b826001600160a01b03168b6001600160a01b031614156131e957876001600160a01b0316638803dbee828461317a87600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b815260040161319c959493929190614b28565b6000604051808303816000875af11580156131bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131e39190810190614aa3565b5061327d565b876001600160a01b03166338ed1739838361321287600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b8152600401613234959493929190614b28565b6000604051808303816000875af1158015613253573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261327b9190810190614aa3565b505b6040516370a0823160e01b8152306004820152600080516020614cb4833981519152906370a0823190602401602060405180830381865afa1580156132c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ea91906144b9565b81111561336d5760405162461bcd60e51b8152602060048201526044602482018190527f4e6f7420656e6f75676820574554482065786368616e6765642066726f6d2073908201527f65697a656420636f6c6c61746572616c20746f20726570617920666c6173686c60648201526337b0b71760e11b608482015260a4016100a8565b60405163a9059cbb60e01b815233600482015260248101829052600080516020614cb48339815191529063a9059cbb906044016020604051808303816000875af11580156133bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e39190614717565b6133ff5760405162461bcd60e51b81526004016100a890614b98565b826001600160a01b03168b6001600160a01b03161461342c57600080516020614cb483398151915261342e565b825b9350505050610520565b6001600160a01b03831661344b57505050565b6001600160a01b038316600080516020614cb483398151915214156134c557604051632e1a7d4d60e01b815260048101839052600080516020614cb483398151915290632e1a7d4d90602401600060405180830381600087803b1580156134b157600080fd5b505af11580156115fd573d6000803e3d6000fd5b6040516370a0823160e01b815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561350e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353291906144b9565b905061353f828483611e87565b826001600160a01b0316634a25d94a858361356889600080516020614cb48339815191526120fa565b30426040518663ffffffff1660e01b815260040161358a959493929190614b28565b6000604051808303816000875af11580156135a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107449190810190614aa3565b6000613626826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a769092919063ffffffff16565b80519091501561227a57808060200190518101906136449190614717565b61227a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100a8565b80158061371d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156136f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371b91906144b9565b155b6137885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016100a8565b6040516001600160a01b03831660248201526044810182905261227a90849063095ea7b360e01b90606401611e50565b606083156137c757508161181f565b8251156137d75782518084602001fd5b8160405162461bcd60e51b81526004016100a89190614c0b565b600080826001600160a01b0316846001600160a01b031614156138645760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016100a8565b826001600160a01b0316846001600160a01b031610613884578284613887565b83835b90925090506001600160a01b0382166138e25760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016100a8565b9250929050565b606060028251101561393d5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016100a8565b81516001600160401b0381111561395657613956613e38565b60405190808252806020026020018201604052801561397f578160200160208202803683370190505b5090508281600183516139929190614c1e565b815181106139a2576139a26145d0565b6020026020010181815250506000600183516139be9190614c1e565b90505b801561181d57600080613a1187866139da600187614c1e565b815181106139ea576139ea6145d0565b6020026020010151878681518110613a0457613a046145d0565b6020026020010151613a8d565b91509150613a39848481518110613a2a57613a2a6145d0565b60200260200101518383613bc2565b84613a45600186614c1e565b81518110613a5557613a556145d0565b60200260200101818152505050508080613a6e90614c35565b9150506139c1565b6060613a858484600085613ce8565b949350505050565b6000806000613a9c85856137f1565b5060405163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291925060009182919089169063e6a4390590604401602060405180830381865afa158015613af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b189190614530565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b799190614c63565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613bb0578082613bb3565b81815b90999098509650505050505050565b6000808411613c285760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b60648201526084016100a8565b600083118015613c385750600082115b613c955760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b60648201526084016100a8565b6000613ca18585614837565b613cad906103e8614837565b90506000613cbb8685614c1e565b613cc7906103e5614837565b9050613cd3818361486c565b613cde906001614b64565b9695505050505050565b606082471015613d495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100a8565b843b613d975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100a8565b600080866001600160a01b03168587604051613db39190614b7c565b60006040518083038185875af1925050503d8060008114613df0576040519150601f19603f3d011682016040523d82523d6000602084013e613df5565b606091505b5091509150613e058282866137b8565b979650505050505050565b6001600160a01b0381168114613e2557600080fd5b50565b8035613e3381613e10565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e7657613e76613e38565b604052919050565b60006001600160401b03821115613e9757613e97613e38565b5060051b60200190565b600082601f830112613eb257600080fd5b81356020613ec7613ec283613e7e565b613e4e565b82815260059290921b84018101918181019086841115613ee657600080fd5b8286015b84811015613f0a578035613efd81613e10565b8352918301918301613eea565b509695505050505050565b600082601f830112613f2657600080fd5b81356001600160401b03811115613f3f57613f3f613e38565b613f52601f8201601f1916602001613e4e565b818152846020838601011115613f6757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613f9557600080fd5b81356020613fa5613ec283613e7e565b82815260059290921b84018101918181019086841115613fc457600080fd5b8286015b84811015613f0a5780356001600160401b03811115613fe75760008081fd5b613ff58986838b0101613f15565b845250918301918301613fc8565b600080600080600080600080610100898b03121561402057600080fd5b883561402b81613e10565b9750602089013561403b81613e10565b9650604089013561404b81613e10565b955060608901359450608089013561406281613e10565b935060a089013561407281613e10565b925060c08901356001600160401b038082111561408e57600080fd5b61409a8c838d01613ea1565b935060e08b01359150808211156140b057600080fd5b506140bd8b828c01613f84565b9150509295985092959890939650565b6000806000806000608086880312156140e557600080fd5b85356140f081613e10565b9450602086013593506040860135925060608601356001600160401b038082111561411a57600080fd5b818801915088601f83011261412e57600080fd5b81358181111561413d57600080fd5b89602082850101111561414f57600080fd5b9699959850939650602001949392505050565b60008060008060008060008060008060006101608c8e03121561418457600080fd5b61418d8c613e28565b9a5060208c013599506141a260408d01613e28565b98506141b060608d01613e28565b975060808c013596506141c560a08d01613e28565b95506141d360c08d01613e28565b94506141e160e08d01613e28565b93506001600160401b03806101008e013511156141fd57600080fd5b61420e8e6101008f01358f01613ea1565b9350806101208e0135111561422257600080fd5b506142348d6101208e01358e01613f84565b91506101408c013590509295989b509295989b9093969950565b60008060008060008060008060006101208a8c03121561426d57600080fd5b893561427881613e10565b985060208a0135975060408a013561428f81613e10565b965061429d60608b01613e28565b955060808a013594506142b260a08b01613e28565b93506142c060c08b01613e28565b925060e08a01356001600160401b03808211156142dc57600080fd5b6142e88d838e01613ea1565b93506101008c01359150808211156142ff57600080fd5b5061430c8c828d01613f84565b9150509295985092959850929598565b6000806000806080858703121561433257600080fd5b843561433d81613e10565b935060208501359250604085013561435481613e10565b915060608501356001600160401b0381111561436f57600080fd5b61437b87828801613f15565b91505092959194509250565b6000806000806000806000806000806101408b8d0312156143a757600080fd5b6143b08b613e28565b995060208b013598506143c560408c01613e28565b97506143d360608c01613e28565b965060808b013595506143e860a08c01613e28565b94506143f660c08c01613e28565b935060e08b01356001600160401b038082111561441257600080fd5b61441e8e838f01613ea1565b94506101008d013591508082111561443557600080fd5b506144428d828e01613f84565b9250506101208b013590509295989b9194979a5092959850565b60208082526038908201527f526570617920616d6f756e7420287472616e73616374696f6e2076616c75652960408201527f206d7573742062652067726561746572207468616e20302e0000000000000000606082015260800190565b6000602082840312156144cb57600080fd5b5051919050565b602080825260409082018190527f4572726f722063616c6c696e672072656465656d696e67207365697a65642063908201527f546f6b656e3a206572726f7220636f6465206e6f7420657175616c20746f2030606082015260800190565b60006020828403121561454257600080fd5b815161181f81613e10565b6020808252605b908201527f49526564656d7074696f6e537472617465677920636f6e74726163742061727260408201527f617920616e64207374726174656779206461746120627974657320617272617960608201527f206d6e75737420746865207468652073616d65206c656e6774682e0000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60005b838110156146015781810151838201526020016145e9565b838111156116015750506000910152565b6000815180845261462a8160208601602086016145e6565b601f01601f19169290920160200192915050565b6001600160a01b0385811682526020820185905283166040820152608060608201819052600090613cde90830184614612565b6000806040838503121561468457600080fd5b825161468f81613e10565b6020939093015192949293505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156146c9576146c961469f565b5060010190565b600080858511156146e057600080fd5b838611156146ed57600080fd5b5050820193919092039150565b60006020828403121561470c57600080fd5b813561181f81613e10565b60006020828403121561472957600080fd5b8151801515811461181f57600080fd5b600082601f83011261474a57600080fd5b8135602061475a613ec283613e7e565b82815260059290921b8401810191818101908684111561477957600080fd5b8286015b84811015613f0a57803561479081613e10565b835291830191830161477d565b60008060008060008060008060006101208a8c0312156147bc57600080fd5b89356147c781613e10565b985060208a0135975060408a01356147de81613e10565b96506147ec60608b01613e28565b955060808a0135945061480160a08b01613e28565b935061480f60c08b01613e28565b925060e08a01356001600160401b038082111561482b57600080fd5b6142e88d838e01614739565b60008160001904831182151516156148515761485161469f565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261487b5761487b614856565b500490565b60008261488f5761488f614856565b500690565b6000806000806000806000806000806101408b8d0312156148b457600080fd5b6148bd8b613e28565b995060208b013598506148d260408c01613e28565b97506148e060608c01613e28565b965060808b013595506148f560a08c01613e28565b945061490360c08c01613e28565b935061491160e08c01613e28565b92506101008b01356001600160401b038082111561492e57600080fd5b61493a8e838f01614739565b93506101208d013591508082111561495157600080fd5b5061495e8d828e01613f84565b9150509295989b9194979a5092959850565b60208082526024908201527f526570617920616d6f756e74206d7573742062652067726561746572207468616040820152633710181760e11b606082015260800190565b858152602081018590526001600160a01b03841660408201526080606082018190528101829052818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60018060a01b03841681528260208201526060604082015260006120186060830184614612565b600081518084526020808501945080840160005b83811015614a635781516001600160a01b031687529582019590820190600101614a3e565b509495945050505050565b848152608060208201526000614a876080830186614a2a565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215614ab657600080fd5b82516001600160401b03811115614acc57600080fd5b8301601f81018513614add57600080fd5b8051614aeb613ec282613e7e565b81815260059190911b82018301908381019087831115614b0a57600080fd5b928401925b82841015613e0557835182529284019290840190614b0f565b85815284602082015260a060408201526000614b4760a0830186614a2a565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115614b7757614b7761469f565b500190565b60008251614b8e8184602087016145e6565b9190910192915050565b6020808252604d908201527f4661696c656420746f20726570617920556e697377617020666c6173686c6f6160408201527f6e207769746820574554482065786368616e6765642066726f6d207365697a6560608201526c321031b7b63630ba32b930b61760991b608082015260a00190565b60208152600061181f6020830184614612565b600082821015614c3057614c3061469f565b500390565b600081614c4457614c4461469f565b506000190190565b80516001600160701b0381168114613e3357600080fd5b600080600060608486031215614c7857600080fd5b614c8184614c4c565b9250614c8f60208501614c4c565b9150604084015163ffffffff81168114614ca857600080fd5b80915050925092509256fe000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206a075e33d9b1987cd481b29bd01e76b6c727a31ca89df526354734c8465ab65964736f6c634300080b0033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "details": "Do not transfer ETH or tokens directly to this address. Only send ETH here when using a method, and only approve tokens for transfer to here when using a method. Direct ETH transfers will be rejected and direct token transfers will be lost.",
    "kind": "dev",
    "methods": {
      "redeemCustomCollateral(address,uint256,address,bytes)": {
        "details": "Redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap). Public visibility because we have to call this function externally if called from a payable FuseSafeLiquidator function (for some reason delegatecall fails when called with msg.value > 0)."
      },
      "safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20Collateral": "The cErc20 collateral contract to be liquidated.",
          "cEther": "The borrowed cEther contract to repay.",
          "exchangeSeizedTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).",
          "minOutputAmount": "The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2Router": "The UniswapV2Router to use to convert the seized underlying collateral."
        }
      },
      "safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20": "The borrowed cErc20 to repay.",
          "cTokenCollateral": "The cToken collateral to be liquidated.",
          "exchangeSeizedTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).",
          "minOutputAmount": "The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2Router": "The UniswapV2Router to use to convert the seized underlying collateral."
        }
      },
      "safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20Collateral": "The CErc20 collateral contract to be liquidated.",
          "cEther": "The borrowed CEther contract to repay.",
          "exchangeProfitTo": "If set to an address other than `cErc20Collateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).",
          "minProfitAmount": "The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The ETH amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2RouterForCollateral": "The UniswapV2Router to use to convert the underlying collateral to ETH."
        }
      },
      "safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)": {
        "params": {
          "borrower": "The borrower's Ethereum address.",
          "cErc20": "The borrowed CErc20 contract to repay.",
          "cTokenCollateral": "The cToken collateral contract to be liquidated.",
          "exchangeProfitTo": "If set to an address other than `cTokenCollateral`, exchange seized collateral to this ERC20 token contract address (or the zero address for ETH).",
          "minProfitAmount": "The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.",
          "redemptionStrategies": "The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).",
          "repayAmount": "The amount to repay to liquidate the unhealthy loan.",
          "strategyData": "The data for the chosen IRedemptionStrategy contracts, if any.",
          "uniswapV2RouterForBorrow": "The UniswapV2Router to use to convert the ETH to the underlying borrow (and flashloan the underlying borrow for ETH).",
          "uniswapV2RouterForCollateral": "The UniswapV2Router to use to convert the underlying collateral to ETH."
        }
      },
      "uniswapV2Call(address,uint256,uint256,bytes)": {
        "details": "Callback function for Uniswap flashloans."
      }
    },
    "stateVariables": {
      "UNISWAP_V2_ROUTER_02": {
        "details": "UniswapV2Router02 contract object."
      },
      "UNISWAP_V2_ROUTER_02_ADDRESS": {
        "details": "UniswapV2Router02 contract address."
      },
      "WETH": {
        "details": "WETH contract object."
      },
      "WETH_ADDRESS": {
        "details": "WETH contract address."
      },
      "_liquidatorProfitExchangeSource": {
        "details": "Cached liquidator profit exchange source. ERC20 token address or the zero address for ETH. For use in `safeLiquidateToTokensWithFlashLoan`/`safeLiquidateToEthWithFlashLoan` after it is set by `postFlashLoanTokens`/`postFlashLoanWeth`."
      }
    },
    "title": "FuseSafeLiquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "safeLiquidate(address,address,address,uint256,address,address,address[],bytes[])": {
        "notice": "Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable). "
      },
      "safeLiquidate(address,uint256,address,address,uint256,address,address,address[],bytes[])": {
        "notice": "Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable). "
      },
      "safeLiquidateToEthWithFlashLoan(address,uint256,address,address,uint256,address,address,address[],bytes[],uint256)": {
        "notice": "Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in ETH profit is seized. "
      },
      "safeLiquidateToTokensWithFlashLoan(address,uint256,address,address,uint256,address,address,address,address[],bytes[],uint256)": {
        "notice": "Safely liquidate an unhealthy loan, confirming that at least `minProfitAmount` in ETH profit is seized. "
      }
    },
    "notice": "FuseSafeLiquidator safely liquidates unhealthy borrowers (with flashloan support).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 212,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 215,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5692,
        "contract": "contracts/FuseSafeLiquidator.sol:FuseSafeLiquidator",
        "label": "_liquidatorProfitExchangeSource",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}