{
  "address": "0x44269C5EF9954Ca2342bAA57Aec21A6DB95AF000",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wtoken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MIN_TWAP_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OBSERVATION_BUFFER",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "observationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "observations",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "price0Cumulative",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price1Cumulative",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenB",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "pairsFor",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "baseTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minPeriods",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deviationThresholds",
          "type": "uint256[]"
        }
      ],
      "name": "workable",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wtoken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc69b5e2701303d95ed32a2b242af82a69b34b2283b402cc30ad4523e4bda18cb",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "1593190",
    "logsBloom": "0x
    "blockHash": "0x2dacfcb6c6dc4c5287dbff762d3c9ced343d14dd2bc7a2d7cea11b94210fd835",
    "transactionHash": "0xc69b5e2701303d95ed32a2b242af82a69b34b2283b402cc30ad4523e4bda18cb",
    "logs": [],
    "blockNumber": 16931250,
    "cumulativeGasUsed": "2087678",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
  ],
  "numDeployments": 4,
  "solcInputHash": "cec576f5aa63489edd4cc555b201bbbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wtoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MIN_TWAP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OBSERVATION_BUFFER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"observationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1Cumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenB\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"pairsFor\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"baseTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minPeriods\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deviationThresholds\",\"type\":\"uint256[]\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor to set wtoken address\"},\"price(address,address,address)\":{\"details\":\"Returns the price of `underlying` in terms of `baseToken` given `factory`.\"}},\"stateVariables\":{\"MIN_TWAP_TIME\":{\"details\":\"Minimum TWAP interval.\"},\"OBSERVATION_BUFFER\":{\"details\":\"Length after which observations roll over to index 0.\"},\"observationCount\":{\"details\":\"Total observation count for each pair.\"},\"observations\":{\"details\":\"Array of cumulative price observations for each pair.\"},\"wtoken\":{\"details\":\"wtoken token contract address.\"}},\"title\":\"UniswapTwapPriceOracleV2Root\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pairsFor(address[],address[],address)\":{\"notice\":\"Get pairs for token combinations.\"},\"update(address)\":{\"notice\":\"Update one pair.\"},\"update(address[])\":{\"notice\":\"Update multiple pairs at once.\"},\"workable(address[],address[],uint256[],uint256[])\":{\"notice\":\"Check which of multiple pairs are workable/updatable.\"}},\"notice\":\"Stores cumulative prices and returns TWAPs for assets on Uniswap V2 pairs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol\":\"UniswapTwapPriceOracleV2Root\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"contracts/external/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x81df8718581a02a6613af4f2b9fa9b024e45ef8a9478234564ac9a0849ada6c0\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x169f7dfa721d0159176bf155acb4e011ff0ff5014bbb13949a998fd71255aa54\",\"license\":\"GPL-3.0-only\"},\"contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"../../external/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../../external/uniswap/IUniswapV2Factory.sol\\\";\\n\\n/**\\n * @title UniswapTwapPriceOracleV2Root\\n * @notice Stores cumulative prices and returns TWAPs for assets on Uniswap V2 pairs.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract UniswapTwapPriceOracleV2Root {\\n    /**\\n     * @dev wtoken token contract address.\\n     */\\n    address public immutable wtoken;\\n\\n    /**\\n     * @dev Minimum TWAP interval.\\n     */\\n    uint256 public constant MIN_TWAP_TIME = 15 minutes;\\n\\n    /**\\n    * @dev Constructor to set wtoken address\\n     */\\n    constructor (address _wtoken) {\\n        wtoken = _wtoken;\\n    }\\n\\n    /**\\n     * @dev Return the TWAP value price0. Revert if TWAP time range is not within the threshold.\\n     * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n     * @param pair The pair to query for price0.\\n     */\\n    function price0TWAP(address pair) internal view returns (uint) {\\n        uint length = observationCount[pair];\\n        require(length > 0, 'No length-1 TWAP observation.');\\n        Observation memory lastObservation = observations[pair][(length - 1) % OBSERVATION_BUFFER];\\n        if (lastObservation.timestamp > block.timestamp - MIN_TWAP_TIME) {\\n            require(length > 1, 'No length-2 TWAP observation.');\\n            lastObservation = observations[pair][(length - 2) % OBSERVATION_BUFFER];\\n        }\\n        uint elapsedTime = block.timestamp - lastObservation.timestamp;\\n        require(elapsedTime >= MIN_TWAP_TIME, 'Bad TWAP time.');\\n        uint currPx0Cumu = currentPx0Cumu(pair);\\n        return (currPx0Cumu - lastObservation.price0Cumulative) / (block.timestamp - lastObservation.timestamp); // overflow is desired\\n    }\\n\\n    /**\\n     * @dev Return the TWAP value price1. Revert if TWAP time range is not within the threshold.\\n     * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n     * @param pair The pair to query for price1.\\n     */\\n    function price1TWAP(address pair) internal view returns (uint) {\\n        uint length = observationCount[pair];\\n        require(length > 0, 'No length-1 TWAP observation.');\\n        Observation memory lastObservation = observations[pair][(length - 1) % OBSERVATION_BUFFER];\\n        if (lastObservation.timestamp > block.timestamp - MIN_TWAP_TIME) {\\n            require(length > 1, 'No length-2 TWAP observation.');\\n            lastObservation = observations[pair][(length - 2) % OBSERVATION_BUFFER];\\n        }\\n        uint elapsedTime = block.timestamp - lastObservation.timestamp;\\n        require(elapsedTime >= MIN_TWAP_TIME, 'Bad TWAP time.');\\n        uint currPx1Cumu = currentPx1Cumu(pair);\\n        return (currPx1Cumu - lastObservation.price1Cumulative) / (block.timestamp - lastObservation.timestamp); // overflow is desired\\n    }\\n\\n    /**\\n     * @dev Return the current price0 cumulative value on Uniswap.\\n     * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n     * @param pair The uniswap pair to query for price0 cumulative value.\\n     */\\n    function currentPx0Cumu(address pair) internal view returns (uint px0Cumu) {\\n        uint32 currTime = uint32(block.timestamp);\\n        px0Cumu = IUniswapV2Pair(pair).price0CumulativeLast();\\n        (uint reserve0, uint reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n        if (lastTime != block.timestamp) {\\n            uint32 timeElapsed = currTime - lastTime; // overflow is desired\\n            px0Cumu += uint((reserve1 << 112) / reserve0) * timeElapsed; // overflow is desired\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the current price1 cumulative value on Uniswap.\\n     * Copied from: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/BaseKP3ROracle.sol\\n     * @param pair The uniswap pair to query for price1 cumulative value.\\n     */\\n    function currentPx1Cumu(address pair) internal view returns (uint px1Cumu) {\\n        uint32 currTime = uint32(block.timestamp);\\n        px1Cumu = IUniswapV2Pair(pair).price1CumulativeLast();\\n        (uint reserve0, uint reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n        if (lastTime != currTime) {\\n            uint32 timeElapsed = currTime - lastTime; // overflow is desired\\n            px1Cumu += uint((reserve0 << 112) / reserve1) * timeElapsed; // overflow is desired\\n        }\\n    }\\n    \\n    /**\\n     * @dev Returns the price of `underlying` in terms of `baseToken` given `factory`.\\n     */\\n    function price(address underlying, address baseToken, address factory) external view returns (uint) {\\n        // Return ERC20/ETH TWAP\\n        address pair = IUniswapV2Factory(factory).getPair(underlying, baseToken);\\n        uint256 baseUnit = 10 ** uint256(ERC20Upgradeable(underlying).decimals());\\n        return  (\\n                    (\\n                        (underlying < baseToken ? price0TWAP(pair) : price1TWAP(pair)) / (2 ** 56)\\n                    ) * baseUnit\\n                ) / (2 ** 56); // Scaled by 1e18, not 2 ** 112\\n    }\\n\\n    /**\\n     * @dev Struct for cumulative price observations.\\n     */\\n    struct Observation {\\n        uint32 timestamp;\\n        uint256 price0Cumulative;\\n        uint256 price1Cumulative;\\n    }\\n\\n    /**\\n     * @dev Length after which observations roll over to index 0.\\n     */\\n    uint8 public constant OBSERVATION_BUFFER = 4;\\n\\n    /**\\n     * @dev Total observation count for each pair.\\n     */\\n    mapping(address => uint256) public observationCount;\\n\\n    /**\\n     * @dev Array of cumulative price observations for each pair.\\n     */\\n    mapping(address => Observation[OBSERVATION_BUFFER]) public observations;\\n    \\n    /// @notice Get pairs for token combinations.\\n    function pairsFor(address[] calldata tokenA, address[] calldata tokenB, address factory) external view returns (address[] memory) {\\n        require(tokenA.length > 0 && tokenA.length == tokenB.length, \\\"Token array lengths must be equal and greater than 0.\\\");\\n        address[] memory pairs = new address[](tokenA.length);\\n        for (uint256 i = 0; i < tokenA.length; i++) pairs[i] = IUniswapV2Factory(factory).getPair(tokenA[i], tokenB[i]);\\n        return pairs;\\n    }\\n\\n    /// @notice Check which of multiple pairs are workable/updatable.\\n    function workable(address[] calldata pairs, address[] calldata baseTokens, uint256[] calldata minPeriods, uint256[] calldata deviationThresholds) external view returns (bool[] memory) {\\n        require(pairs.length > 0 && pairs.length == baseTokens.length && pairs.length == minPeriods.length && pairs.length == deviationThresholds.length, \\\"Array lengths must be equal and greater than 0.\\\");\\n        bool[] memory answers = new bool[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) answers[i] = _workable(pairs[i], baseTokens[i], minPeriods[i], deviationThresholds[i]);\\n        return answers;\\n    }\\n    \\n    /// @dev Internal function to check if a pair is workable (updateable AND reserves have changed AND deviation threshold is satisfied).\\n    function _workable(address pair, address baseToken, uint256 minPeriod, uint256 deviationThreshold) internal view returns (bool) {\\n        // Workable if:\\n        // 1) We have no observations\\n        // 2) The elapsed time since the last observation is > minPeriod AND reserves have changed AND deviation threshold is satisfied \\n        // Note that we loop observationCount[pair] around OBSERVATION_BUFFER so we don't waste gas on new storage slots\\n        if (observationCount[pair] <= 0) return true;\\n        (, , uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n        return (block.timestamp - observations[pair][(observationCount[pair] - 1) % OBSERVATION_BUFFER].timestamp) > (minPeriod >= MIN_TWAP_TIME ? minPeriod : MIN_TWAP_TIME) &&\\n            lastTime != observations[pair][(observationCount[pair] - 1) % OBSERVATION_BUFFER].timestamp &&\\n            _deviation(pair, baseToken) >= deviationThreshold;\\n    }\\n\\n    /// @dev Internal function to check if a pair's spot price's deviation from its TWAP price as a ratio scaled by 1e18\\n    function _deviation(address pair, address baseToken) internal view returns (uint256) {\\n        // Get token base unit\\n        address token0 = IUniswapV2Pair(pair).token0();\\n        bool useToken0Price = token0 != baseToken;\\n        address underlying = useToken0Price ? token0 : IUniswapV2Pair(pair).token1();\\n        uint256 baseUnit = 10 ** uint256(ERC20Upgradeable(underlying).decimals());\\n\\n        // Get TWAP price\\n        uint256 twapPrice = (\\n                                (\\n                                    (useToken0Price ? price0TWAP(pair) : price1TWAP(pair)) / (2 ** 56)\\n                                ) * baseUnit\\n                            ) / (2 ** 56); // Scaled by 1e18, not 2 ** 112\\n    \\n        // Get spot price\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n        uint256 spotPrice = useToken0Price ? (reserve1 * baseUnit) / reserve0 : (reserve0 * baseUnit) / reserve1;\\n\\n        // Get ratio and return deviation\\n        uint256 ratio = (spotPrice * 1e18) / twapPrice;\\n        return ratio >= 1e18 ? ratio - 1e18 : 1e18 - ratio;\\n    }\\n    \\n    /// @dev Internal function to check if a pair is updatable at all.\\n    function _updateable(address pair) internal view returns (bool) {\\n        // Updateable if:\\n        // 1) We have no observations\\n        // 2) The elapsed time since the last observation is > MIN_TWAP_TIME\\n        // Note that we loop observationCount[pair] around OBSERVATION_BUFFER so we don't waste gas on new storage slots\\n        return observationCount[pair] <= 0 || (block.timestamp - observations[pair][(observationCount[pair] - 1) % OBSERVATION_BUFFER].timestamp) > MIN_TWAP_TIME;\\n    }\\n\\n    /// @notice Update one pair.\\n    function update(address pair) external {\\n        require(_update(pair), \\\"Failed to update pair.\\\");\\n    }\\n\\n    /// @notice Update multiple pairs at once.\\n    function update(address[] calldata pairs) external {\\n        bool worked = false;\\n        for (uint256 i = 0; i < pairs.length; i++) if (_update(pairs[i])) worked = true;\\n        require(worked, \\\"No pairs can be updated (yet).\\\");\\n    }\\n\\n    /// @dev Internal function to update a single pair.\\n    function _update(address pair) internal returns (bool) {\\n        // Check if workable\\n        if (!_updateable(pair)) return false;\\n\\n        // Get cumulative price(s)\\n        uint256 price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        uint256 price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n        \\n        // Loop observationCount[pair] around OBSERVATION_BUFFER so we don't waste gas on new storage slots\\n        (, , uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n        observations[pair][observationCount[pair] % OBSERVATION_BUFFER] = Observation(lastTime, price0Cumulative, price1Cumulative);\\n        observationCount[pair]++;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1e43008464074cbc3c8846094de57fd3ed979f0641655a0790aca96dc36ca438\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611c4f380380611c4f83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611bc461008b60003960006101720152611bc46000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638eb7938b116100665780638eb7938b1461013f5780639c0591c81461016d578063af8a9ba5146101ac578063b9b2e68f146101b5578063de555942146101c857600080fd5b806302459966146100a35780631c1b8772146100dd578063290ad26e146100f2578063317f17dc1461010c578063421cd20c1461011f575b600080fd5b6100b66100b13660046115de565b6101e8565b6040805163ffffffff90941684526020840192909252908201526060015b60405180910390f35b6100f06100eb36600461160a565b610225565b005b6100fa600481565b60405160ff90911681526020016100d4565b6100f061011a36600461167a565b61027b565b61013261012d3660046116bc565b610325565b6040516100d49190611740565b61015f61014d36600461160a565b60006020819052908152604090205481565b6040519081526020016100d4565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d4565b61015f61038481565b61015f6101c336600461178d565b610504565b6101db6101d63660046117d8565b610654565b6040516100d4919061189c565b6001602052816000526040600020816004811061020457600080fd5b600302018054600182015460029092015463ffffffff909116935090915083565b61022e816107fa565b6102785760405162461bcd60e51b81526020600482015260166024820152752330b4b632b2103a37903ab83230ba32903830b4b91760511b60448201526064015b60405180910390fd5b50565b6000805b828110156102d2576102b684848381811061029c5761029c6118d6565b90506020020160208101906102b1919061160a565b6107fa565b156102c057600191505b806102ca81611902565b91505061027f565b50806103205760405162461bcd60e51b815260206004820152601e60248201527f4e6f2070616972732063616e20626520757064617465642028796574292e0000604482015260640161026f565b505050565b6060841580159061033557508483145b61039f5760405162461bcd60e51b815260206004820152603560248201527f546f6b656e206172726179206c656e67746873206d7573742062652065717561604482015274361030b7321033b932b0ba32b9103a3430b710181760591b606482015260840161026f565b60008567ffffffffffffffff8111156103ba576103ba61191d565b6040519080825280602002602001820160405280156103e3578160200160208202803683370190505b50905060005b868110156104f957836001600160a01b031663e6a43905898984818110610412576104126118d6565b9050602002016020810190610427919061160a565b888885818110610439576104396118d6565b905060200201602081019061044e919061160a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190611933565b8282815181106104cf576104cf6118d6565b6001600160a01b0390921660209283029190910190910152806104f181611902565b9150506103e9565b509695505050505050565b60405163e6a4390560e01b81526001600160a01b0384811660048301528381166024830152600091829184169063e6a4390590604401602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611933565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e19190611950565b6105ef9060ff16600a611a57565b9050600160381b81600160381b876001600160a01b0316896001600160a01b0316106106235761061e85610a13565b61062c565b61062c85610c58565b6106369190611a79565b6106409190611a8d565b61064a9190611a79565b9695505050505050565b6060871580159061066457508786145b801561066f57508784145b801561067a57508782145b6106de5760405162461bcd60e51b815260206004820152602f60248201527f4172726179206c656e67746873206d75737420626520657175616c20616e642060448201526e33b932b0ba32b9103a3430b710181760891b606482015260840161026f565b60008867ffffffffffffffff8111156106f9576106f961191d565b604051908082528060200260200182016040528015610722578160200160208202803683370190505b50905060005b898110156107ec576107b88b8b83818110610745576107456118d6565b905060200201602081019061075a919061160a565b8a8a8481811061076c5761076c6118d6565b9050602002016020810190610781919061160a565b898985818110610793576107936118d6565b905060200201358888868181106107ac576107ac6118d6565b90506020020135610e9d565b8282815181106107ca576107ca6118d6565b91151560209283029190910190910152806107e481611902565b915050610728565b509998505050505050505050565b600061080582611020565b61081157506000919050565b6000826001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190611aac565b90506000836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190611aac565b90506000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109419190611ae1565b6040805160608101825263ffffffff8316815260208082018990528183018890526001600160a01b038b166000908152600182528381209181905292909220549295509350915061099490600490611b26565b600481106109a4576109a46118d6565b825160039190910291909101805463ffffffff191663ffffffff90921691909117815560208083015160018301556040928301516002909201919091556001600160a01b038716600090815290819052908120805491610a0383611902565b9091555060019695505050505050565b6001600160a01b03811660009081526020819052604081205480610a795760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d312054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b0383166000908152600160208190526040822090600490610aa19085611b3a565b610aab9190611b26565b60048110610abb57610abb6118d6565b6040805160608101825260039290920292909201805463ffffffff1682526001810154602083015260020154918101919091529050610afc61038442611b3a565b815163ffffffff161115610bcf5760018211610b5a5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d322054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b03841660009081526001602052604090206004610b7f600285611b3a565b610b899190611b26565b60048110610b9957610b996118d6565b6040805160608101825260039290920292909201805463ffffffff16825260018101546020830152600201549181019190915290505b8051600090610be49063ffffffff1642611b3a565b9050610384811015610c295760405162461bcd60e51b815260206004820152600e60248201526d2130b2102a2ba0a8103a34b6b29760911b604482015260640161026f565b6000610c34866110ac565b8351909150610c499063ffffffff1642611b3a565b60408401516106409083611b3a565b6001600160a01b03811660009081526020819052604081205480610cbe5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d312054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b0383166000908152600160208190526040822090600490610ce69085611b3a565b610cf09190611b26565b60048110610d0057610d006118d6565b6040805160608101825260039290920292909201805463ffffffff1682526001810154602083015260020154918101919091529050610d4161038442611b3a565b815163ffffffff161115610e145760018211610d9f5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d322054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b03841660009081526001602052604090206004610dc4600285611b3a565b610dce9190611b26565b60048110610dde57610dde6118d6565b6040805160608101825260039290920292909201805463ffffffff16825260018101546020830152600201549181019190915290505b8051600090610e299063ffffffff1642611b3a565b9050610384811015610e6e5760405162461bcd60e51b815260206004820152600e60248201526d2130b2102a2ba0a8103a34b6b29760911b604482015260640161026f565b6000610e79866111ec565b8351909150610e8e9063ffffffff1642611b3a565b60208401516106409083611b3a565b6001600160a01b038416600090815260208190526040812054610ec257506001611018565b6000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190611ae1565b92505050610384841015610f3c57610384610f3e565b835b6001600160a01b03871660009081526001602081815260408084209184905290922054600491610f6d91611b3a565b610f779190611b26565b60048110610f8757610f876118d6565b6003020154610f9c9063ffffffff1642611b3a565b118015610fff57506001600160a01b03861660009081526001602081815260408084209184905290922054600491610fd391611b3a565b610fdd9190611b26565b60048110610fed57610fed6118d6565b600302015463ffffffff828116911614155b80156110145750826110118787611305565b10155b9150505b949350505050565b6001600160a01b03811660009081526020819052604081205415806110a657506001600160a01b0382166000908152600160208181526040808420918490529092205461038492916004916110759190611b3a565b61107f9190611b26565b6004811061108f5761108f6118d6565b60030201546110a49063ffffffff1642611b3a565b115b92915050565b600080429050826001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190611aac565b91506000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190611ae1565b92506001600160701b031692506001600160701b031692508363ffffffff168163ffffffff16146111e35760006111b48286611b51565b905063ffffffff81166111cb84607087901b611a79565b6111d59190611a8d565b6111df9087611b76565b9550505b50505050919050565b600080429050826001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190611aac565b91506000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190611ae1565b92506001600160701b031692506001600160701b03169250428163ffffffff16146111e35760006112ee8286611b51565b905063ffffffff81166111cb85607086901b611a79565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a9190611933565b90506001600160a01b0380821690841614156000816113ea57856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190611933565b6113ec565b825b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190611950565b6114609060ff16600a611a57565b90506000600160381b82600160381b866114825761147d8b610a13565b61148b565b61148b8b610c58565b6114959190611a79565b61149f9190611a8d565b6114a99190611a79565b9050600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156114ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115109190611ae1565b506001600160701b031691506001600160701b0316915060008661154857816115398685611a8d565b6115439190611a79565b61155d565b826115538684611a8d565b61155d9190611a79565b905060008461157483670de0b6b3a7640000611a8d565b61157e9190611a79565b9050670de0b6b3a76400008110156115a7576115a281670de0b6b3a7640000611b3a565b6115b9565b6115b9670de0b6b3a764000082611b3a565b9c9b505050505050505050505050565b6001600160a01b038116811461027857600080fd5b600080604083850312156115f157600080fd5b82356115fc816115c9565b946020939093013593505050565b60006020828403121561161c57600080fd5b8135611627816115c9565b9392505050565b60008083601f84011261164057600080fd5b50813567ffffffffffffffff81111561165857600080fd5b6020830191508360208260051b850101111561167357600080fd5b9250929050565b6000806020838503121561168d57600080fd5b823567ffffffffffffffff8111156116a457600080fd5b6116b08582860161162e565b90969095509350505050565b6000806000806000606086880312156116d457600080fd5b853567ffffffffffffffff808211156116ec57600080fd5b6116f889838a0161162e565b9097509550602088013591508082111561171157600080fd5b5061171e8882890161162e565b9094509250506040860135611732816115c9565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156117815783516001600160a01b03168352928401929184019160010161175c565b50909695505050505050565b6000806000606084860312156117a257600080fd5b83356117ad816115c9565b925060208401356117bd816115c9565b915060408401356117cd816115c9565b809150509250925092565b6000806000806000806000806080898b0312156117f457600080fd5b883567ffffffffffffffff8082111561180c57600080fd5b6118188c838d0161162e565b909a50985060208b013591508082111561183157600080fd5b61183d8c838d0161162e565b909850965060408b013591508082111561185657600080fd5b6118628c838d0161162e565b909650945060608b013591508082111561187b57600080fd5b506118888b828c0161162e565b999c989b5096995094979396929594505050565b6020808252825182820181905260009190848201906040850190845b818110156117815783511515835292840192918401916001016118b8565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611916576119166118ec565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561194557600080fd5b8151611627816115c9565b60006020828403121561196257600080fd5b815160ff8116811461162757600080fd5b600181815b808511156119ae578160001904821115611994576119946118ec565b808516156119a157918102915b93841c9390800290611978565b509250929050565b6000826119c5575060016110a6565b816119d2575060006110a6565b81600181146119e857600281146119f257611a0e565b60019150506110a6565b60ff841115611a0357611a036118ec565b50506001821b6110a6565b5060208310610133831016604e8410600b8410161715611a31575081810a6110a6565b611a3b8383611973565b8060001904821115611a4f57611a4f6118ec565b029392505050565b600061162783836119b6565b634e487b7160e01b600052601260045260246000fd5b600082611a8857611a88611a63565b500490565b6000816000190483118215151615611aa757611aa76118ec565b500290565b600060208284031215611abe57600080fd5b5051919050565b80516001600160701b0381168114611adc57600080fd5b919050565b600080600060608486031215611af657600080fd5b611aff84611ac5565b9250611b0d60208501611ac5565b9150604084015163ffffffff811681146117cd57600080fd5b600082611b3557611b35611a63565b500690565b600082821015611b4c57611b4c6118ec565b500390565b600063ffffffff83811690831681811015611b6e57611b6e6118ec565b039392505050565b60008219821115611b8957611b896118ec565b50019056fea26469706673582212202e095512b4808c3359c1bec055feeca6bca22980f086616bd99a0135bef8eb0564736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638eb7938b116100665780638eb7938b1461013f5780639c0591c81461016d578063af8a9ba5146101ac578063b9b2e68f146101b5578063de555942146101c857600080fd5b806302459966146100a35780631c1b8772146100dd578063290ad26e146100f2578063317f17dc1461010c578063421cd20c1461011f575b600080fd5b6100b66100b13660046115de565b6101e8565b6040805163ffffffff90941684526020840192909252908201526060015b60405180910390f35b6100f06100eb36600461160a565b610225565b005b6100fa600481565b60405160ff90911681526020016100d4565b6100f061011a36600461167a565b61027b565b61013261012d3660046116bc565b610325565b6040516100d49190611740565b61015f61014d36600461160a565b60006020819052908152604090205481565b6040519081526020016100d4565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d4565b61015f61038481565b61015f6101c336600461178d565b610504565b6101db6101d63660046117d8565b610654565b6040516100d4919061189c565b6001602052816000526040600020816004811061020457600080fd5b600302018054600182015460029092015463ffffffff909116935090915083565b61022e816107fa565b6102785760405162461bcd60e51b81526020600482015260166024820152752330b4b632b2103a37903ab83230ba32903830b4b91760511b60448201526064015b60405180910390fd5b50565b6000805b828110156102d2576102b684848381811061029c5761029c6118d6565b90506020020160208101906102b1919061160a565b6107fa565b156102c057600191505b806102ca81611902565b91505061027f565b50806103205760405162461bcd60e51b815260206004820152601e60248201527f4e6f2070616972732063616e20626520757064617465642028796574292e0000604482015260640161026f565b505050565b6060841580159061033557508483145b61039f5760405162461bcd60e51b815260206004820152603560248201527f546f6b656e206172726179206c656e67746873206d7573742062652065717561604482015274361030b7321033b932b0ba32b9103a3430b710181760591b606482015260840161026f565b60008567ffffffffffffffff8111156103ba576103ba61191d565b6040519080825280602002602001820160405280156103e3578160200160208202803683370190505b50905060005b868110156104f957836001600160a01b031663e6a43905898984818110610412576104126118d6565b9050602002016020810190610427919061160a565b888885818110610439576104396118d6565b905060200201602081019061044e919061160a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190611933565b8282815181106104cf576104cf6118d6565b6001600160a01b0390921660209283029190910190910152806104f181611902565b9150506103e9565b509695505050505050565b60405163e6a4390560e01b81526001600160a01b0384811660048301528381166024830152600091829184169063e6a4390590604401602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611933565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e19190611950565b6105ef9060ff16600a611a57565b9050600160381b81600160381b876001600160a01b0316896001600160a01b0316106106235761061e85610a13565b61062c565b61062c85610c58565b6106369190611a79565b6106409190611a8d565b61064a9190611a79565b9695505050505050565b6060871580159061066457508786145b801561066f57508784145b801561067a57508782145b6106de5760405162461bcd60e51b815260206004820152602f60248201527f4172726179206c656e67746873206d75737420626520657175616c20616e642060448201526e33b932b0ba32b9103a3430b710181760891b606482015260840161026f565b60008867ffffffffffffffff8111156106f9576106f961191d565b604051908082528060200260200182016040528015610722578160200160208202803683370190505b50905060005b898110156107ec576107b88b8b83818110610745576107456118d6565b905060200201602081019061075a919061160a565b8a8a8481811061076c5761076c6118d6565b9050602002016020810190610781919061160a565b898985818110610793576107936118d6565b905060200201358888868181106107ac576107ac6118d6565b90506020020135610e9d565b8282815181106107ca576107ca6118d6565b91151560209283029190910190910152806107e481611902565b915050610728565b509998505050505050505050565b600061080582611020565b61081157506000919050565b6000826001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190611aac565b90506000836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190611aac565b90506000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561091d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109419190611ae1565b6040805160608101825263ffffffff8316815260208082018990528183018890526001600160a01b038b166000908152600182528381209181905292909220549295509350915061099490600490611b26565b600481106109a4576109a46118d6565b825160039190910291909101805463ffffffff191663ffffffff90921691909117815560208083015160018301556040928301516002909201919091556001600160a01b038716600090815290819052908120805491610a0383611902565b9091555060019695505050505050565b6001600160a01b03811660009081526020819052604081205480610a795760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d312054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b0383166000908152600160208190526040822090600490610aa19085611b3a565b610aab9190611b26565b60048110610abb57610abb6118d6565b6040805160608101825260039290920292909201805463ffffffff1682526001810154602083015260020154918101919091529050610afc61038442611b3a565b815163ffffffff161115610bcf5760018211610b5a5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d322054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b03841660009081526001602052604090206004610b7f600285611b3a565b610b899190611b26565b60048110610b9957610b996118d6565b6040805160608101825260039290920292909201805463ffffffff16825260018101546020830152600201549181019190915290505b8051600090610be49063ffffffff1642611b3a565b9050610384811015610c295760405162461bcd60e51b815260206004820152600e60248201526d2130b2102a2ba0a8103a34b6b29760911b604482015260640161026f565b6000610c34866110ac565b8351909150610c499063ffffffff1642611b3a565b60408401516106409083611b3a565b6001600160a01b03811660009081526020819052604081205480610cbe5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d312054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b0383166000908152600160208190526040822090600490610ce69085611b3a565b610cf09190611b26565b60048110610d0057610d006118d6565b6040805160608101825260039290920292909201805463ffffffff1682526001810154602083015260020154918101919091529050610d4161038442611b3a565b815163ffffffff161115610e145760018211610d9f5760405162461bcd60e51b815260206004820152601d60248201527f4e6f206c656e6774682d322054574150206f62736572766174696f6e2e000000604482015260640161026f565b6001600160a01b03841660009081526001602052604090206004610dc4600285611b3a565b610dce9190611b26565b60048110610dde57610dde6118d6565b6040805160608101825260039290920292909201805463ffffffff16825260018101546020830152600201549181019190915290505b8051600090610e299063ffffffff1642611b3a565b9050610384811015610e6e5760405162461bcd60e51b815260206004820152600e60248201526d2130b2102a2ba0a8103a34b6b29760911b604482015260640161026f565b6000610e79866111ec565b8351909150610e8e9063ffffffff1642611b3a565b60208401516106409083611b3a565b6001600160a01b038416600090815260208190526040812054610ec257506001611018565b6000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190611ae1565b92505050610384841015610f3c57610384610f3e565b835b6001600160a01b03871660009081526001602081815260408084209184905290922054600491610f6d91611b3a565b610f779190611b26565b60048110610f8757610f876118d6565b6003020154610f9c9063ffffffff1642611b3a565b118015610fff57506001600160a01b03861660009081526001602081815260408084209184905290922054600491610fd391611b3a565b610fdd9190611b26565b60048110610fed57610fed6118d6565b600302015463ffffffff828116911614155b80156110145750826110118787611305565b10155b9150505b949350505050565b6001600160a01b03811660009081526020819052604081205415806110a657506001600160a01b0382166000908152600160208181526040808420918490529092205461038492916004916110759190611b3a565b61107f9190611b26565b6004811061108f5761108f6118d6565b60030201546110a49063ffffffff1642611b3a565b115b92915050565b600080429050826001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190611aac565b91506000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190611ae1565b92506001600160701b031692506001600160701b031692508363ffffffff168163ffffffff16146111e35760006111b48286611b51565b905063ffffffff81166111cb84607087901b611a79565b6111d59190611a8d565b6111df9087611b76565b9550505b50505050919050565b600080429050826001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112549190611aac565b91506000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190611ae1565b92506001600160701b031692506001600160701b03169250428163ffffffff16146111e35760006112ee8286611b51565b905063ffffffff81166111cb85607086901b611a79565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a9190611933565b90506001600160a01b0380821690841614156000816113ea57856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190611933565b6113ec565b825b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190611950565b6114609060ff16600a611a57565b90506000600160381b82600160381b866114825761147d8b610a13565b61148b565b61148b8b610c58565b6114959190611a79565b61149f9190611a8d565b6114a99190611a79565b9050600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156114ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115109190611ae1565b506001600160701b031691506001600160701b0316915060008661154857816115398685611a8d565b6115439190611a79565b61155d565b826115538684611a8d565b61155d9190611a79565b905060008461157483670de0b6b3a7640000611a8d565b61157e9190611a79565b9050670de0b6b3a76400008110156115a7576115a281670de0b6b3a7640000611b3a565b6115b9565b6115b9670de0b6b3a764000082611b3a565b9c9b505050505050505050505050565b6001600160a01b038116811461027857600080fd5b600080604083850312156115f157600080fd5b82356115fc816115c9565b946020939093013593505050565b60006020828403121561161c57600080fd5b8135611627816115c9565b9392505050565b60008083601f84011261164057600080fd5b50813567ffffffffffffffff81111561165857600080fd5b6020830191508360208260051b850101111561167357600080fd5b9250929050565b6000806020838503121561168d57600080fd5b823567ffffffffffffffff8111156116a457600080fd5b6116b08582860161162e565b90969095509350505050565b6000806000806000606086880312156116d457600080fd5b853567ffffffffffffffff808211156116ec57600080fd5b6116f889838a0161162e565b9097509550602088013591508082111561171157600080fd5b5061171e8882890161162e565b9094509250506040860135611732816115c9565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156117815783516001600160a01b03168352928401929184019160010161175c565b50909695505050505050565b6000806000606084860312156117a257600080fd5b83356117ad816115c9565b925060208401356117bd816115c9565b915060408401356117cd816115c9565b809150509250925092565b6000806000806000806000806080898b0312156117f457600080fd5b883567ffffffffffffffff8082111561180c57600080fd5b6118188c838d0161162e565b909a50985060208b013591508082111561183157600080fd5b61183d8c838d0161162e565b909850965060408b013591508082111561185657600080fd5b6118628c838d0161162e565b909650945060608b013591508082111561187b57600080fd5b506118888b828c0161162e565b999c989b5096995094979396929594505050565b6020808252825182820181905260009190848201906040850190845b818110156117815783511515835292840192918401916001016118b8565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611916576119166118ec565b5060010190565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561194557600080fd5b8151611627816115c9565b60006020828403121561196257600080fd5b815160ff8116811461162757600080fd5b600181815b808511156119ae578160001904821115611994576119946118ec565b808516156119a157918102915b93841c9390800290611978565b509250929050565b6000826119c5575060016110a6565b816119d2575060006110a6565b81600181146119e857600281146119f257611a0e565b60019150506110a6565b60ff841115611a0357611a036118ec565b50506001821b6110a6565b5060208310610133831016604e8410600b8410161715611a31575081810a6110a6565b611a3b8383611973565b8060001904821115611a4f57611a4f6118ec565b029392505050565b600061162783836119b6565b634e487b7160e01b600052601260045260246000fd5b600082611a8857611a88611a63565b500490565b6000816000190483118215151615611aa757611aa76118ec565b500290565b600060208284031215611abe57600080fd5b5051919050565b80516001600160701b0381168114611adc57600080fd5b919050565b600080600060608486031215611af657600080fd5b611aff84611ac5565b9250611b0d60208501611ac5565b9150604084015163ffffffff811681146117cd57600080fd5b600082611b3557611b35611a63565b500690565b600082821015611b4c57611b4c6118ec565b500390565b600063ffffffff83811690831681811015611b6e57611b6e6118ec565b039392505050565b60008219821115611b8957611b896118ec565b50019056fea26469706673582212202e095512b4808c3359c1bec055feeca6bca22980f086616bd99a0135bef8eb0564736f6c634300080b0033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor to set wtoken address"
      },
      "price(address,address,address)": {
        "details": "Returns the price of `underlying` in terms of `baseToken` given `factory`."
      }
    },
    "stateVariables": {
      "MIN_TWAP_TIME": {
        "details": "Minimum TWAP interval."
      },
      "OBSERVATION_BUFFER": {
        "details": "Length after which observations roll over to index 0."
      },
      "observationCount": {
        "details": "Total observation count for each pair."
      },
      "observations": {
        "details": "Array of cumulative price observations for each pair."
      },
      "wtoken": {
        "details": "wtoken token contract address."
      }
    },
    "title": "UniswapTwapPriceOracleV2Root",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pairsFor(address[],address[],address)": {
        "notice": "Get pairs for token combinations."
      },
      "update(address)": {
        "notice": "Update one pair."
      },
      "update(address[])": {
        "notice": "Update multiple pairs at once."
      },
      "workable(address[],address[],uint256[],uint256[])": {
        "notice": "Check which of multiple pairs are workable/updatable."
      }
    },
    "notice": "Stores cumulative prices and returns TWAPs for assets on Uniswap V2 pairs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40709,
        "contract": "contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol:UniswapTwapPriceOracleV2Root",
        "label": "observationCount",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 40717,
        "contract": "contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol:UniswapTwapPriceOracleV2Root",
        "label": "observations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(Observation)40700_storage)4_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Observation)40700_storage)4_storage": {
        "base": "t_struct(Observation)40700_storage",
        "encoding": "inplace",
        "label": "struct UniswapTwapPriceOracleV2Root.Observation[4]",
        "numberOfBytes": "384"
      },
      "t_mapping(t_address,t_array(t_struct(Observation)40700_storage)4_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniswapTwapPriceOracleV2Root.Observation[4])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Observation)40700_storage)4_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Observation)40700_storage": {
        "encoding": "inplace",
        "label": "struct UniswapTwapPriceOracleV2Root.Observation",
        "members": [
          {
            "astId": 40695,
            "contract": "contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol:UniswapTwapPriceOracleV2Root",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 40697,
            "contract": "contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol:UniswapTwapPriceOracleV2Root",
            "label": "price0Cumulative",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 40699,
            "contract": "contracts/oracles/default/UniswapTwapPriceOracleV2Root.sol:UniswapTwapPriceOracleV2Root",
            "label": "price1Cumulative",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}