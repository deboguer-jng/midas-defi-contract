{
  "address": "0xdEC1DcA21384902d9FA6E00ec3874e8A07D6e8d6",
  "abi": [
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract FusePoolDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolAssetsByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "underlyingName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "underlyingSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "membership",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuseFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "borrowGuardianPaused",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolAsset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "getPoolAssetsWithData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "underlyingName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "underlyingSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "membership",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fuseFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "borrowGuardianPaused",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolAsset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "getPoolSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller[]",
          "name": "comptrollers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxHealth",
          "type": "uint256"
        }
      ],
      "name": "getPoolUsersWithData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolUser[][]",
          "name": "",
          "type": "tuple[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IComptroller",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxHealth",
          "type": "uint256"
        }
      ],
      "name": "getPoolUsersWithData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolUser[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPoolsByAccountWithData",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "underlyingSymbols",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "whitelistedAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPoolsBySupplier",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPoolsBySupplierWithData",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "underlyingSymbols",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "whitelistedAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxHealth",
          "type": "uint256"
        }
      ],
      "name": "getPublicPoolUsersWithData",
      "outputs": [
        {
          "internalType": "contract IComptroller[]",
          "name": "",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolUser[][]",
          "name": "",
          "type": "tuple[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "whitelistedAdmin",
          "type": "bool"
        }
      ],
      "name": "getPublicPoolsByVerificationWithData",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "underlyingSymbols",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "whitelistedAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPublicPoolsWithData",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "underlyingSymbols",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "whitelistedAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getWhitelistedPoolsByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getWhitelistedPoolsByAccountWithData",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockPosted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestampPosted",
              "type": "uint256"
            }
          ],
          "internalType": "struct FusePoolDirectory.FusePool[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "underlyingTokens",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "underlyingSymbols",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "whitelistedAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct FusePoolLens.FusePoolData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FusePoolDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bf5c3e568f4602a7fafbaf6896a816d9975699f78cf190963526e47a27aab06",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "4261218",
    "logsBloom": "0x
    "blockHash": "0x24805154befb3c6dc022785cc256e5b0e2d9876dc1553762358534dfcb4d1340",
    "transactionHash": "0x4bf5c3e568f4602a7fafbaf6896a816d9975699f78cf190963526e47a27aab06",
    "logs": [],
    "blockNumber": 16934205,
    "cumulativeGasUsed": "4414569",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "01d1249b5cf313f282601fc85bc4d51d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract FusePoolDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolAssetsByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"membership\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuseFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrowGuardianPaused\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolAsset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getPoolAssetsWithData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"membership\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fuseFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrowGuardianPaused\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolAsset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getPoolSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller[]\",\"name\":\"comptrollers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxHealth\",\"type\":\"uint256\"}],\"name\":\"getPoolUsersWithData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolLens.FusePoolUser[][]\",\"name\":\"\",\"type\":\"tuple[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxHealth\",\"type\":\"uint256\"}],\"name\":\"getPoolUsersWithData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolLens.FusePoolUser[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPoolsByAccountWithData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"underlyingSymbols\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPoolsBySupplier\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPoolsBySupplierWithData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"underlyingSymbols\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHealth\",\"type\":\"uint256\"}],\"name\":\"getPublicPoolUsersWithData\",\"outputs\":[{\"internalType\":\"contract IComptroller[]\",\"name\":\"\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolLens.FusePoolUser[][]\",\"name\":\"\",\"type\":\"tuple[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"name\":\"getPublicPoolsByVerificationWithData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"underlyingSymbols\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicPoolsWithData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"underlyingSymbols\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWhitelistedPoolsByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWhitelistedPoolsByAccountWithData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockPosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampPosted\",\"type\":\"uint256\"}],\"internalType\":\"struct FusePoolDirectory.FusePool[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"underlyingSymbols\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"whitelistedAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct FusePoolLens.FusePoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FusePoolDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"kind\":\"dev\",\"methods\":{\"getPoolAssetsByUser(address,address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"getPoolAssetsWithData(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\",\"params\":{\"comptroller\":\"The Comptroller proxy contract of the Fuse pool.\"},\"returns\":{\"_0\":\"An array of Fuse pool assets.\"}},\"getPoolUsersWithData(address,uint256)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\",\"params\":{\"comptroller\":\"The Comptroller proxy contract of the Fuse pool.\",\"maxHealth\":\"The maximum health (scaled by 1e18) for which to return data.\"},\"returns\":{\"_0\":\"An array of Fuse pool users, the pool's close factor, and the pool's liquidation incentive.\"}},\"getPoolUsersWithData(address[],uint256)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\",\"params\":{\"comptrollers\":\"The Comptroller proxy contracts of the Fuse pools.\",\"maxHealth\":\"The maximum health (scaled by 1e18) for which to return data.\"},\"returns\":{\"_0\":\"An array of arrays of Fuse pool users, an array of pools' close factors, an array of pools' liquidation incentives, and an array of booleans indicating if retrieving each pool's data failed.\"}},\"getPoolsByAccountWithData(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\"},\"getPoolsBySupplier(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"getPoolsBySupplierWithData(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\"},\"getPublicPoolUsersWithData(uint256)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\",\"params\":{\"maxHealth\":\"The maximum health (scaled by 1e18) for which to return data.\"},\"returns\":{\"_0\":\"An array of pools' Comptroller proxy addresses, an array of arrays of Fuse pool users, an array of pools' close factors, an array of pools' liquidation incentives, and an array of booleans indicating if retrieving each pool's data failed.\"}},\"getPublicPoolsByVerificationWithData(bool)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\"},\"getPublicPoolsWithData()\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\"},\"getWhitelistedPoolsByAccount(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive.\"},\"getWhitelistedPoolsByAccountWithData(address)\":{\"details\":\"This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\"}},\"title\":\"FusePoolLens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"directory()\":{\"notice\":\"`FusePoolDirectory` contract object.\"},\"getPoolAssetsByUser(address,address)\":{\"notice\":\"Returns arrays of FusePoolAsset for a specific user\"},\"getPoolAssetsWithData(address)\":{\"notice\":\"Returns the assets of the specified Fuse pool.\"},\"getPoolSummary(address)\":{\"notice\":\"Returns total supply balance (in ETH), total borrow balance (in ETH), underlying token addresses, and underlying token symbols of a Fuse pool.\"},\"getPoolUsersWithData(address,uint256)\":{\"notice\":\"Returns the borrowers of the specified Fuse pool.\"},\"getPoolUsersWithData(address[],uint256)\":{\"notice\":\"Returns the users of the specified Fuse pools.\"},\"getPoolsByAccountWithData(address)\":{\"notice\":\"Returns arrays of the indexes of Fuse pools created by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\"},\"getPoolsBySupplier(address)\":{\"notice\":\"Returns arrays of Fuse pool indexes and data supplied to by `account`.\"},\"getPoolsBySupplierWithData(address)\":{\"notice\":\"Returns arrays of the indexes of Fuse pools supplied to by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\"},\"getPublicPoolUsersWithData(uint256)\":{\"notice\":\"Returns the users of each public Fuse pool.\"},\"getPublicPoolsByVerificationWithData(bool)\":{\"notice\":\"Returns arrays of all whitelisted public Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\"},\"getPublicPoolsWithData()\":{\"notice\":\"Returns arrays of all public Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\"},\"getWhitelistedPoolsByAccount(address)\":{\"notice\":\"Returns arrays of Fuse pool indexes and data with a whitelist containing `account`. Note that the whitelist does not have to be enforced.\"},\"getWhitelistedPoolsByAccountWithData(address)\":{\"notice\":\"Returns arrays of the indexes of Fuse pools with a whitelist containing `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\"},\"initialize(address,string,string)\":{\"notice\":\"Constructor to set the `FusePoolDirectory` contract object.\"}},\"notice\":\"FusePoolLens returns data on Fuse interest rate pools in mass for viewing by dApps, bots, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FusePoolLens.sol\":\"FusePoolLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xbdec72f55ce6d1f234cde556b3e38fc0f739f46e9288cc4ae32b9334365889db\",\"license\":\"MIT\"},\"contracts/FusePoolDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\\\";\\n\\n\\nimport \\\"./external/compound/IComptroller.sol\\\";\\nimport \\\"./external/compound/IUnitroller.sol\\\";\\nimport \\\"./external/compound/IPriceOracle.sol\\\";\\nimport \\\"./compound/Unitroller.sol\\\";\\n\\n/**\\n * @title FusePoolDirectory\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FusePoolDirectory is a directory for Fuse interest rate pools.\\n */\\ncontract FusePoolDirectory is OwnableUpgradeable {\\n    /**\\n     * @dev Initializes a deployer whitelist if desired.\\n     * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\n     * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\\n     */\\n    function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\\n        __Ownable_init();\\n        enforceDeployerWhitelist = _enforceDeployerWhitelist;\\n        for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\\n    }\\n\\n    /**\\n     * @dev Struct for a Fuse interest rate pool.\\n     */\\n    struct FusePool {\\n        string name;\\n        address creator;\\n        address comptroller;\\n        uint256 blockPosted;\\n        uint256 timestampPosted;\\n    }\\n\\n    /**\\n     * @dev Array of Fuse interest rate pools.\\n     */\\n    FusePool[] public pools;\\n\\n    /**\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool indexes.\\n     */\\n    mapping(address => uint256[]) private _poolsByAccount;\\n\\n    /**\\n     * @dev Maps Fuse pool Comptroller addresses to bools indicating if they have been registered via the directory.\\n     */\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Emitted when a new Fuse pool is added to the directory.\\n     */\\n    event PoolRegistered(uint256 index, FusePool pool);\\n\\n    /**\\n     * @dev Booleans indicating if the deployer whitelist is enforced.\\n     */\\n    bool public enforceDeployerWhitelist;\\n\\n    /**\\n     * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\\n     */\\n    mapping(address => bool) public deployerWhitelist;\\n\\n    /**\\n     * @dev Controls if the deployer whitelist is to be enforced.\\n     * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\\n     */\\n    function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\\n        enforceDeployerWhitelist = enforce;\\n    }\\n\\n    /**\\n     * @dev Adds/removes Ethereum accounts to the deployer whitelist.\\n     * @param deployers Array of Ethereum accounts to be whitelisted.\\n     * @param status Whether to add or remove the accounts.\\n     */\\n    function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\\n        require(deployers.length > 0, \\\"No deployers supplied.\\\");\\n        for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\\n    }\\n\\n    /**\\n     * @dev Adds a new Fuse pool to the directory (without checking msg.sender).\\n     * @param name The name of the pool.\\n     * @param comptroller The pool's Comptroller proxy contract address.\\n     * @return The index of the registered Fuse pool.\\n     */\\n    function _registerPool(string memory name, address comptroller) internal returns (uint256) {\\n        require(!poolExists[comptroller], \\\"Pool already exists in the directory.\\\");\\n        require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \\\"Sender is not on deployer whitelist.\\\");\\n        require(bytes(name).length <= 100, \\\"No pool name supplied.\\\");\\n        FusePool memory pool = FusePool(name, msg.sender, comptroller, block.number, block.timestamp);\\n        pools.push(pool);\\n        _poolsByAccount[msg.sender].push(pools.length - 1);\\n        poolExists[comptroller] = true;\\n        emit PoolRegistered(pools.length - 1, pool);\\n        return pools.length - 1;\\n    }\\n\\n    /**\\n     * @dev Deploys a new Fuse pool and adds to the directory.\\n     * @param name The name of the pool.\\n     * @param implementation The Comptroller implementation contract address.\\n     * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\\n     * @param closeFactor The pool's close factor (scaled by 1e18).\\n     * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\\n     * @param priceOracle The pool's PriceOracle contract address.\\n     * @return The index of the registered Fuse pool and the Unitroller proxy address.\\n     */\\n    function deployPool(string memory name, address implementation, bool enforceWhitelist, uint256 closeFactor, uint256 liquidationIncentive, address priceOracle) external returns (uint256, address) {\\n        // Input validation\\n        require(implementation != address(0), \\\"No Comptroller implementation contract address specified.\\\");\\n        require(priceOracle != address(0), \\\"No PriceOracle contract address specified.\\\");\\n\\n        // Deploy CEtherDelegator using msg.sender, underlying, and block.number as a salt\\n//        bytes32 salt = keccak256(abi.encodePacked(msg.sender, address(0), block.number));\\n//\\n\\n//        address proxy = Create2Upgradeable.deploy(0, salt, cEtherDelegatorCreationCode);\\n\\n        // Deploy Unitroller using msg.sender, name, and block.number as a salt\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, name, block.number));\\n        bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode);\\n        address proxy = Create2Upgradeable.deploy(0, salt, unitrollerCreationCode);\\n\\n        // Setup Unitroller\\n        IUnitroller unitroller = IUnitroller(proxy);\\n        require(unitroller._setPendingImplementation(implementation) == 0, \\\"Failed to set pending implementation on Unitroller.\\\"); // Checks Comptroller implementation whitelist\\n        IComptroller comptrollerImplementation = IComptroller(implementation);\\n        comptrollerImplementation._become(unitroller);\\n        IComptroller comptrollerProxy = IComptroller(proxy);\\n\\n        // Set pool parameters\\n        require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \\\"Failed to set pool close factor.\\\");\\n        require(comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0, \\\"Failed to set pool liquidation incentive.\\\");\\n        require(comptrollerProxy._setPriceOracle(IPriceOracle(priceOracle)) == 0, \\\"Failed to set pool price oracle.\\\");\\n\\n        // Whitelist\\n        if (enforceWhitelist) require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \\\"Failed to enforce supplier/borrower whitelist.\\\");\\n\\n        // Enable auto-implementation\\n        require(comptrollerProxy._toggleAutoImplementations(true) == 0, \\\"Failed to enable pool auto implementations.\\\");\\n\\n        // Make msg.sender the admin\\n        require(unitroller._setPendingAdmin(msg.sender) == 0, \\\"Failed to set pending admin on Unitroller.\\\");\\n\\n        // Register the pool with this FusePoolDirectory\\n        return (_registerPool(name, proxy), proxy);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all Fuse pools' data.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getAllPools() external view returns (FusePool[] memory) {\\n        return pools;\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all public Fuse pool indexes and data.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPublicPools() external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try IComptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n            } catch { }\\n\\n            arrayLength++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try IComptroller(pools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n            } catch { }\\n\\n            indexes[index] = i;\\n            publicPools[index] = pools[i];\\n            index++;\\n        }\\n\\n        return (indexes, publicPools);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool indexes and data created by `account`.\\n     */\\n    function getPoolsByAccount(address account) external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\\n        FusePool[] memory accountPools = new FusePool[](_poolsByAccount[account].length);\\n\\n        for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\\n            indexes[i] = _poolsByAccount[account][i];\\n            accountPools[i] = pools[_poolsByAccount[account][i]];\\n        }\\n\\n        return (indexes, accountPools);\\n    }\\n\\n    /**\\n     * @dev Maps Ethereum accounts to arrays of Fuse pool Comptroller proxy contract addresses.\\n     */\\n    mapping(address => address[]) private _bookmarks;\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool Unitroller (Comptroller proxy) contract addresses bookmarked by `account`.\\n     */\\n    function getBookmarks(address account) external view returns (address[] memory) {\\n        return _bookmarks[account];\\n    }\\n\\n    /**\\n     * @notice Bookmarks a Fuse pool Unitroller (Comptroller proxy) contract addresses.\\n     */\\n    function bookmarkPool(address comptroller) external {\\n        _bookmarks[msg.sender].push(comptroller);\\n    }\\n\\n    /**\\n     * @notice Modify existing Fuse pool name.\\n     */\\n    function setPoolName(uint256 index, string calldata name) external {\\n        IComptroller _comptroller = IComptroller(pools[index].comptroller);\\n        require(msg.sender == _comptroller.admin() && _comptroller.adminHasRights() || msg.sender == owner());\\n        pools[index].name = name;\\n    }\\n\\n    /**\\n     * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\\n     */\\n    mapping(address => bool) public adminWhitelist;\\n\\n    /**\\n     * @dev Event emitted when the admin whitelist is updated.\\n     */\\n    event AdminWhitelistUpdated(address[] admins, bool status);\\n\\n    /**\\n     * @dev Adds/removes Ethereum accounts to the admin whitelist.\\n     * @param admins Array of Ethereum accounts to be whitelisted.\\n     * @param status Whether to add or remove the accounts.\\n     */\\n    function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\\n        require(admins.length > 0, \\\"No admins supplied.\\\");\\n        for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\\n        emit AdminWhitelistUpdated(admins, status);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all public Fuse pool indexes and data with whitelisted admins.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, FusePool[] memory) {\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n\\n                try comptroller.admin() returns (address admin) {\\n                    if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n                } catch { }\\n            } catch { }\\n\\n            arrayLength++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePool[] memory publicPools = new FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n                if (enforceWhitelist) continue;\\n\\n                try comptroller.admin() returns (address admin) {\\n                    if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n                } catch { }\\n            } catch { }\\n\\n            indexes[index] = i;\\n            publicPools[index] = pools[i];\\n            index++;\\n        }\\n\\n        return (indexes, publicPools);\\n    }\\n}\\n\",\"keccak256\":\"0x771ffad04791f6440bb9ad5b2556855074b026f5b45d9b5c94ba73c4a65c558f\",\"license\":\"UNLICENSED\"},\"contracts/FusePoolLens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"./external/compound/IComptroller.sol\\\";\\nimport \\\"./external/compound/IPriceOracle.sol\\\";\\nimport \\\"./external/compound/ICToken.sol\\\";\\nimport \\\"./external/compound/ICErc20.sol\\\";\\nimport \\\"./external/compound/IRewardsDistributor.sol\\\";\\n\\nimport \\\"./external/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./FusePoolDirectory.sol\\\";\\nimport \\\"./oracles/MasterPriceOracle.sol\\\";\\n\\n/**\\n * @title FusePoolLens\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice FusePoolLens returns data on Fuse interest rate pools in mass for viewing by dApps, bots, etc.\\n */\\ncontract FusePoolLens is Initializable {\\n    /**\\n     * @notice Constructor to set the `FusePoolDirectory` contract object.\\n     */\\n    function initialize(FusePoolDirectory _directory, string memory _name, string memory _symbol) public initializer {\\n        require(address(_directory) != address(0), \\\"FusePoolDirectory instance cannot be the zero address.\\\");\\n        directory = _directory;\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    string public name;\\n    string public symbol;\\n\\n    /**\\n     * @notice `FusePoolDirectory` contract object.\\n     */\\n    FusePoolDirectory public directory;\\n\\n    /**\\n     * @dev Struct for Fuse pool summary data.\\n     */\\n    struct FusePoolData {\\n        uint256 totalSupply;\\n        uint256 totalBorrow;\\n        address[] underlyingTokens;\\n        string[] underlyingSymbols;\\n        bool whitelistedAdmin;\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all public Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     */\\n    function getPublicPoolsWithData() external returns (uint256[] memory, FusePoolDirectory.FusePool[] memory, FusePoolData[] memory, bool[] memory) {\\n        (uint256[] memory indexes, FusePoolDirectory.FusePool[] memory publicPools) = directory.getPublicPools();\\n        (FusePoolData[] memory data, bool[] memory errored) = getPoolsData(publicPools);\\n        return (indexes, publicPools, data, errored);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of all whitelisted public Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     */\\n    function getPublicPoolsByVerificationWithData(bool whitelistedAdmin) external returns (uint256[] memory, FusePoolDirectory.FusePool[] memory, FusePoolData[] memory, bool[] memory) {\\n        (uint256[] memory indexes, FusePoolDirectory.FusePool[] memory publicPools) = directory.getPublicPoolsByVerification(whitelistedAdmin);\\n        (FusePoolData[] memory data, bool[] memory errored) = getPoolsData(publicPools);\\n        return (indexes, publicPools, data, errored);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of the indexes of Fuse pools created by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     */\\n    function getPoolsByAccountWithData(address account) external returns (uint256[] memory, FusePoolDirectory.FusePool[] memory, FusePoolData[] memory, bool[] memory) {\\n        (uint256[] memory indexes, FusePoolDirectory.FusePool[] memory accountPools) = directory.getPoolsByAccount(account);\\n        (FusePoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\\n        return (indexes, accountPools, data, errored);\\n    }\\n\\n    /**\\n     * @notice Internal function returning arrays of requested Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     */\\n    function getPoolsData(FusePoolDirectory.FusePool[] memory pools) internal returns (FusePoolData[] memory, bool[] memory) {\\n        FusePoolData[] memory data = new FusePoolData[](pools.length);\\n        bool[] memory errored = new bool[](pools.length);\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            try this.getPoolSummary(IComptroller(pools[i].comptroller)) returns (uint256 _totalSupply, uint256 _totalBorrow, address[] memory _underlyingTokens, string[] memory _underlyingSymbols, bool _whitelistedAdmin) {\\n                data[i] = FusePoolData(_totalSupply, _totalBorrow, _underlyingTokens, _underlyingSymbols, _whitelistedAdmin);\\n            } catch {\\n                errored[i] = true;\\n            }\\n        }\\n\\n        return (data, errored);\\n    }\\n\\n    /**\\n     * @notice Returns total supply balance (in ETH), total borrow balance (in ETH), underlying token addresses, and underlying token symbols of a Fuse pool.\\n     */\\n    function getPoolSummary(IComptroller comptroller) external returns (uint256, uint256, address[] memory, string[] memory, bool) {\\n        uint256 totalBorrow = 0;\\n        uint256 totalSupply = 0;\\n        ICToken[] memory cTokens = comptroller.getAllMarkets();\\n        address[] memory underlyingTokens = new address[](cTokens.length);\\n        string[] memory underlyingSymbols = new string[](cTokens.length);\\n        IPriceOracle oracle = comptroller.oracle();\\n\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            ICToken cToken = cTokens[i];\\n            (bool isListed, ) = comptroller.markets(address(cToken));\\n            if (!isListed) continue;\\n            uint256 assetTotalBorrow = cToken.totalBorrowsCurrent();\\n            uint256 assetTotalSupply = cToken.getCash() + assetTotalBorrow - (cToken.totalReserves() + cToken.totalAdminFees() + cToken.totalFuseFees());\\n            uint256 underlyingPrice = oracle.getUnderlyingPrice(cToken);\\n            totalBorrow = totalBorrow + (assetTotalBorrow * underlyingPrice) / 1e18;\\n            totalSupply = totalSupply + (assetTotalSupply * underlyingPrice) / 1e18;\\n\\n            if (cToken.isCEther()) {\\n                underlyingTokens[i] = address(0);\\n                underlyingSymbols[i] = \\\"ETH\\\";\\n            } else {\\n                underlyingTokens[i] = ICErc20(address(cToken)).underlying();\\n                (, underlyingSymbols[i]) = getTokenNameAndSymbol(underlyingTokens[i]);\\n            }\\n        }\\n\\n        bool whitelistedAdmin = directory.adminWhitelist(comptroller.admin());\\n        return (totalSupply, totalBorrow, underlyingTokens, underlyingSymbols, whitelistedAdmin);\\n    }\\n\\n    /**\\n     * @dev Struct for a Fuse pool asset.\\n     */\\n    struct FusePoolAsset {\\n        address cToken;\\n        address underlyingToken;\\n        string underlyingName;\\n        string underlyingSymbol;\\n        uint256 underlyingDecimals;\\n        uint256 underlyingBalance;\\n        uint256 supplyRatePerBlock;\\n        uint256 borrowRatePerBlock;\\n        uint256 totalSupply;\\n        uint256 totalBorrow;\\n        uint256 supplyBalance;\\n        uint256 borrowBalance;\\n        uint256 liquidity;\\n        bool membership;\\n        uint256 exchangeRate; // Price of cTokens in terms of underlying tokens\\n        uint256 underlyingPrice; // Price of underlying tokens in ETH (scaled by 1e18)\\n        address oracle;\\n        uint256 collateralFactor;\\n        uint256 reserveFactor;\\n        uint256 adminFee;\\n        uint256 fuseFee;\\n        bool borrowGuardianPaused;\\n    }\\n\\n    /**\\n     * @notice Returns data on the specified assets of the specified Fuse pool.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     * @param comptroller The Comptroller proxy contract address of the Fuse pool.\\n     * @param cTokens The cToken contract addresses of the assets to query.\\n     * @param user The user for which to get account data.\\n     * @return An array of Fuse pool assets.\\n     */\\n    function getPoolAssetsWithData(IComptroller comptroller, ICToken[] memory cTokens, address user) internal returns (FusePoolAsset[] memory) {\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            (bool isListed, ) = comptroller.markets(address(cTokens[i]));\\n            if (isListed) arrayLength++;\\n        }\\n\\n        FusePoolAsset[] memory detailedAssets = new FusePoolAsset[](arrayLength);\\n        uint256 index = 0;\\n        IPriceOracle oracle = comptroller.oracle();\\n\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            // Check if market is listed and get collateral factor\\n            (bool isListed, uint256 collateralFactorMantissa) = comptroller.markets(address(cTokens[i]));\\n            if (!isListed) continue;\\n\\n            // Start adding data to FusePoolAsset\\n            FusePoolAsset memory asset;\\n            ICToken cToken = cTokens[i];\\n            asset.cToken = address(cToken);\\n\\n            // Get underlying asset data\\n            if (cToken.isCEther()) {\\n                asset.underlyingName = name;\\n                asset.underlyingSymbol = symbol;\\n                asset.underlyingDecimals = 18;\\n                asset.underlyingBalance = user.balance;\\n            } else {\\n                asset.underlyingToken = ICErc20(address(cToken)).underlying();\\n                ERC20Upgradeable underlying = ERC20Upgradeable(asset.underlyingToken);\\n                (asset.underlyingName, asset.underlyingSymbol) = getTokenNameAndSymbol(asset.underlyingToken);\\n                asset.underlyingDecimals = underlying.decimals();\\n                asset.underlyingBalance = underlying.balanceOf(user);\\n            }\\n\\n            // Get cToken data\\n            asset.supplyRatePerBlock = cToken.supplyRatePerBlock();\\n            asset.borrowRatePerBlock = cToken.borrowRatePerBlock();\\n            asset.liquidity = cToken.getCash();\\n            asset.totalBorrow = cToken.totalBorrowsCurrent();\\n            asset.totalSupply = asset.liquidity + asset.totalBorrow - (cToken.totalReserves() + cToken.totalAdminFees() + cToken.totalFuseFees());\\n            asset.supplyBalance = cToken.balanceOfUnderlying(user);\\n            asset.borrowBalance = cToken.borrowBalanceStored(user); // We would use borrowBalanceCurrent but we already accrue interest above\\n            asset.membership = comptroller.checkMembership(user, cToken);\\n            asset.exchangeRate = cToken.exchangeRateStored(); // We would use exchangeRateCurrent but we already accrue interest above\\n            asset.underlyingPrice = oracle.getUnderlyingPrice(cToken);\\n\\n            // Get oracle for this cToken\\n            asset.oracle = address(oracle);\\n\\n            try MasterPriceOracle(asset.oracle).oracles(asset.underlyingToken) returns (IPriceOracle _oracle) {\\n                asset.oracle = address(_oracle);\\n            } catch { }\\n\\n            // More cToken data\\n            asset.collateralFactor = collateralFactorMantissa;\\n            asset.reserveFactor = cToken.reserveFactorMantissa();\\n            asset.adminFee = cToken.adminFeeMantissa();\\n            asset.fuseFee = cToken.fuseFeeMantissa();\\n            asset.borrowGuardianPaused = comptroller.borrowGuardianPaused(address(cToken));\\n\\n            // Add to assets array and increment index\\n            detailedAssets[index] = asset;\\n            index++;\\n        }\\n\\n        return (detailedAssets);\\n    }\\n\\n    /**\\n     * @notice Returns the `name` and `symbol` of `token`.\\n     * Supports Uniswap V2 and SushiSwap LP tokens as well as MKR.\\n     * @param token An ERC20 token contract object.\\n     * @return The `name` and `symbol`.\\n     */\\n    function getTokenNameAndSymbol(address token) internal view returns (string memory, string memory) {\\n        // MKR is a DSToken and uses bytes32\\n        if (token == 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2) return (\\\"Maker\\\", \\\"MKR\\\");\\n        if (token == 0xB8c77482e45F1F44dE1745F52C74426C631bDD52) return (\\\"BNB\\\", \\\"BNB\\\");\\n\\n        // Get name and symbol from token contract\\n        ERC20Upgradeable tokenContract = ERC20Upgradeable(token);\\n        string memory name = tokenContract.name();\\n        string memory symbol = tokenContract.symbol();\\n\\n        // Check for Uniswap V2/SushiSwap pair\\n        try IUniswapV2Pair(token).token0() returns (address _token0) {\\n            bool isUniswapToken = keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\\\"Uniswap V2\\\")) && keccak256(abi.encodePacked(symbol)) == keccak256(abi.encodePacked(\\\"UNI-V2\\\"));\\n            bool isSushiSwapToken = !isUniswapToken && keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\\\"SushiSwap LP Token\\\")) && keccak256(abi.encodePacked(symbol)) == keccak256(abi.encodePacked(\\\"SLP\\\"));\\n\\n            if (isUniswapToken || isSushiSwapToken) {\\n                ERC20Upgradeable token0 = ERC20Upgradeable(_token0);\\n                ERC20Upgradeable token1 = ERC20Upgradeable(IUniswapV2Pair(token).token1());\\n                name = string(abi.encodePacked(isSushiSwapToken ? \\\"SushiSwap \\\" : \\\"Uniswap \\\", token0.symbol(), \\\"/\\\", token1.symbol(), \\\" LP\\\"));\\n                symbol = string(abi.encodePacked(token0.symbol(), \\\"-\\\", token1.symbol()));\\n            }\\n        } catch { }\\n\\n        return (name, symbol);\\n    }\\n\\n    /**\\n     * @notice Returns the assets of the specified Fuse pool.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     * @param comptroller The Comptroller proxy contract of the Fuse pool.\\n     * @return An array of Fuse pool assets.\\n     */\\n    function getPoolAssetsWithData(IComptroller comptroller) external returns (FusePoolAsset[] memory) {\\n        return getPoolAssetsWithData(comptroller, comptroller.getAllMarkets(), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Struct for a Fuse pool user.\\n     */\\n    struct FusePoolUser {\\n        address account;\\n        uint256 totalBorrow;\\n        uint256 totalCollateral;\\n        uint256 health;\\n    }\\n\\n    /**\\n     * @notice Returns the borrowers of the specified Fuse pool.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     * @param comptroller The Comptroller proxy contract of the Fuse pool.\\n     * @param maxHealth The maximum health (scaled by 1e18) for which to return data.\\n     * @return An array of Fuse pool users, the pool's close factor, and the pool's liquidation incentive.\\n     */\\n    function getPoolUsersWithData(IComptroller comptroller, uint256 maxHealth) external returns (FusePoolUser[] memory, uint256, uint256) {\\n        address[] memory users = comptroller.getAllBorrowers();\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            uint256 totalBorrow = 0;\\n            uint256 totalCollateral = 0;\\n            FusePoolAsset[] memory assets = getPoolAssetsWithData(comptroller, comptroller.getAssetsIn(users[i]), users[i]);\\n\\n            for (uint256 j = 0; j < assets.length; j++) {\\n                totalBorrow = totalBorrow + (assets[j].borrowBalance * assets[j].underlyingPrice) / 1e18;\\n                if (assets[j].membership) {\\n                    totalCollateral = totalCollateral +\\n                        (\\n                            (\\n                                (assets[j].supplyBalance * assets[j].underlyingPrice) / 1e18\\n                            ) * assets[j].collateralFactor\\n                        ) / 1e18;\\n                }\\n            }\\n\\n            uint256 health = totalBorrow > 0 ? (totalCollateral * 1e18) / totalBorrow : 1e36;\\n            if (health <= maxHealth) arrayLength++;\\n        }\\n\\n        FusePoolUser[] memory detailedUsers = new FusePoolUser[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            uint256 totalBorrow = 0;\\n            uint256 totalCollateral = 0;\\n            FusePoolAsset[] memory assets = getPoolAssetsWithData(comptroller, comptroller.getAssetsIn(users[i]), users[i]);\\n\\n            for (uint256 j = 0; j < assets.length; j++) {\\n                totalBorrow = totalBorrow + (assets[j].borrowBalance * assets[j].underlyingPrice) / 1e18;\\n                if (assets[j].membership) {\\n                    totalCollateral = totalCollateral +\\n                        (\\n                            (\\n                                (assets[j].supplyBalance * assets[j].underlyingPrice) / 1e18\\n                            ) * assets[j].collateralFactor\\n                        ) / 1e18;\\n                }\\n            }\\n\\n            uint256 health = totalBorrow > 0 ? (totalCollateral * 1e18) / totalBorrow : 1e36;\\n            if (health > maxHealth) continue;\\n            detailedUsers[index] = FusePoolUser(users[i], totalBorrow, totalCollateral, health);\\n            index++;\\n        }\\n\\n        return (detailedUsers, comptroller.closeFactorMantissa(), comptroller.liquidationIncentiveMantissa());\\n    }\\n\\n    /**\\n     * @notice Returns the users of each public Fuse pool.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     * @param maxHealth The maximum health (scaled by 1e18) for which to return data.\\n     * @return An array of pools' Comptroller proxy addresses, an array of arrays of Fuse pool users, an array of pools' close factors, an array of pools' liquidation incentives, and an array of booleans indicating if retrieving each pool's data failed.\\n     */\\n    function getPublicPoolUsersWithData(uint256 maxHealth) external returns (IComptroller[] memory, FusePoolUser[][] memory, uint256[] memory, uint256[] memory, bool[] memory) {\\n        // Get Comptroller addresses of all public pools\\n        IComptroller[] memory comptrollers;\\n\\n        // Scope to avoid \\\"stack too deep\\\" error\\n        {\\n            (, FusePoolDirectory.FusePool[] memory publicPools) = directory.getPublicPools();\\n            comptrollers = new IComptroller[](publicPools.length);\\n            for (uint256 i = 0; i < publicPools.length; i++) comptrollers[i] = IComptroller(publicPools[i].comptroller);\\n        }\\n\\n        // Get all public pools' data\\n        (FusePoolUser[][] memory users, uint256[] memory closeFactors, uint256[] memory liquidationIncentives, bool[] memory errored) = getPoolUsersWithData(comptrollers, maxHealth);\\n        return (comptrollers, users, closeFactors, liquidationIncentives, errored);\\n    }\\n\\n    /**\\n     * @notice Returns the users of the specified Fuse pools.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     * @param comptrollers The Comptroller proxy contracts of the Fuse pools.\\n     * @param maxHealth The maximum health (scaled by 1e18) for which to return data.\\n     * @return An array of arrays of Fuse pool users, an array of pools' close factors, an array of pools' liquidation incentives, and an array of booleans indicating if retrieving each pool's data failed.\\n     */\\n    function getPoolUsersWithData(IComptroller[] memory comptrollers, uint256 maxHealth) public returns (FusePoolUser[][] memory, uint256[] memory, uint256[] memory, bool[] memory) {\\n        FusePoolUser[][] memory users = new FusePoolUser[][](comptrollers.length);\\n        uint256[] memory closeFactors = new uint256[](comptrollers.length);\\n        uint256[] memory liquidationIncentives = new uint256[](comptrollers.length);\\n        bool[] memory errored = new bool[](comptrollers.length);\\n\\n        for (uint256 i = 0; i < comptrollers.length; i++) {\\n            try this.getPoolUsersWithData(IComptroller(comptrollers[i]), maxHealth) returns (FusePoolUser[] memory _users, uint256 closeFactor, uint256 liquidationIncentive) {\\n                users[i] = _users;\\n                closeFactors[i] = closeFactor;\\n                liquidationIncentives[i] = liquidationIncentive;\\n            } catch {\\n                errored[i] = true;\\n            }\\n        }\\n\\n        return (users, closeFactors, liquidationIncentives, errored);\\n    }\\n\\n    /**\\n    * @notice Returns arrays of FusePoolAsset for a specific user\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPoolAssetsByUser(IComptroller comptroller, address user) public returns (FusePoolAsset[] memory) {\\n        FusePoolAsset[] memory assets = getPoolAssetsWithData(comptroller, comptroller.getAssetsIn(user), user);\\n        return assets;\\n    }\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool indexes and data supplied to by `account`.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getPoolsBySupplier(address account) public view returns (uint256[] memory, FusePoolDirectory.FusePool[] memory) {\\n        FusePoolDirectory.FusePool[] memory pools = directory.getAllPools();\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            try comptroller.suppliers(account) returns (bool isSupplier) {\\n                if (isSupplier) {\\n                    ICToken[] memory allMarkets = comptroller.getAllMarkets();\\n\\n                    for (uint256 j = 0; j < allMarkets.length; j++) if (allMarkets[j].balanceOf(account) > 0) {\\n                        arrayLength++;\\n                        break;\\n                    }\\n                }\\n            } catch {}\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePoolDirectory.FusePool[] memory accountPools = new FusePoolDirectory.FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            try comptroller.suppliers(account) returns (bool isSupplier) {\\n                if (isSupplier) {\\n                    ICToken[] memory allMarkets = comptroller.getAllMarkets();\\n\\n                    for (uint256 j = 0; j < allMarkets.length; j++) if (allMarkets[j].balanceOf(account) > 0) {\\n                        indexes[index] = i;\\n                        accountPools[index] = pools[i];\\n                        index++;\\n                        break;\\n                    }\\n                }\\n            } catch {}\\n        }\\n\\n        return (indexes, accountPools);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of the indexes of Fuse pools supplied to by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     */\\n    function getPoolsBySupplierWithData(address account) external returns (uint256[] memory, FusePoolDirectory.FusePool[] memory, FusePoolData[] memory, bool[] memory) {\\n        (uint256[] memory indexes, FusePoolDirectory.FusePool[] memory accountPools) = getPoolsBySupplier(account);\\n        (FusePoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\\n        return (indexes, accountPools, data, errored);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of Fuse pool indexes and data with a whitelist containing `account`.\\n     * Note that the whitelist does not have to be enforced.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     */\\n    function getWhitelistedPoolsByAccount(address account) public view returns (uint256[] memory, FusePoolDirectory.FusePool[] memory) {\\n        FusePoolDirectory.FusePool[] memory pools = directory.getAllPools();\\n        uint256 arrayLength = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            if (comptroller.whitelist(account)) arrayLength++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](arrayLength);\\n        FusePoolDirectory.FusePool[] memory accountPools = new FusePoolDirectory.FusePool[](arrayLength);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            IComptroller comptroller = IComptroller(pools[i].comptroller);\\n\\n            if (comptroller.whitelist(account)) {\\n                indexes[index] = i;\\n                accountPools[index] = pools[i];\\n                index++;\\n                break;\\n            }\\n        }\\n\\n        return (indexes, accountPools);\\n    }\\n\\n    /**\\n     * @notice Returns arrays of the indexes of Fuse pools with a whitelist containing `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n     * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n     * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n     */\\n    function getWhitelistedPoolsByAccountWithData(address account) external returns (uint256[] memory, FusePoolDirectory.FusePool[] memory, FusePoolData[] memory, bool[] memory) {\\n        (uint256[] memory indexes, FusePoolDirectory.FusePool[] memory accountPools) = getWhitelistedPoolsByAccount(account);\\n        (FusePoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\\n        return (indexes, accountPools, data, errored);\\n    }\\n}\\n\",\"keccak256\":\"0x9815598204f6fdaea3fdfa603cbda8824fbe4f8366ce9d6366dccec7ee123d3e\",\"license\":\"UNLICENSED\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Returns a boolean indicating if the sender has admin rights\\n     */\\n    function hasAdminRights() internal view returns (bool) {\\n        ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n        return (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) || (msg.sender == address(fuseAdmin) && comptrollerStorage.fuseAdminHasRights());\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_,\\n                        uint256 reserveFactorMantissa_,\\n                        uint256 adminFeeMantissa_) public {\\n        require(msg.sender == address(fuseAdmin), \\\"only Fuse admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // Set reserve factor\\n        err = _setReserveFactorFresh(reserveFactorMantissa_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting reserve factor failed\\\");\\n\\n        // Set admin fee\\n        err = _setAdminFeeFresh(adminFeeMantissa_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n    \\n    /**\\n     * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\n     */\\n    function getPendingFuseFeeFromAdmin() internal view returns (uint) {\\n        return fuseAdmin.interestFeeRate();\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint).max) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) override external nonReentrant(false) returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) override external nonReentrant(false) returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) override external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) override external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) override external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) override external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() override external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() override external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)), reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() override external nonReentrant(false) returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) override external nonReentrant(false) returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) override public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() override public nonReentrant(false) returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() override public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() override external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() override virtual public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumber == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, totalBorrows, add_(totalReserves, add_(totalAdminFees, totalFuseFees)));\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumber);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        return finishInterestAccrual(currentBlockNumber, cashPrior, borrowRateMantissa, blockDelta);\\n    }\\n\\n    /**\\n     * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\n     */\\n    function finishInterestAccrual(uint currentBlockNumber, uint cashPrior, uint borrowRateMantissa, uint blockDelta) private returns (uint) {\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\n         *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor = mul_(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\\n        uint totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\n        uint totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, totalReserves);\\n        uint totalFuseFeesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: fuseFeeMantissa}), interestAccumulated, totalFuseFees);\\n        uint totalAdminFeesNew = mul_ScalarTruncateAddUInt(Exp({mantissa: adminFeeMantissa}), interestAccumulated, totalAdminFees);\\n        uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n        totalFuseFees = totalFuseFeesNew;\\n        totalAdminFees = totalAdminFeesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        // Check max supply\\n        // unused function\\n        /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\n\\n        vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        uint cashPrior = getCashPrior();\\n\\n        if (cashPrior < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        // Check min borrow for this user for this asset\\n        allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == type(uint).max) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant(false) returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == type(uint).max) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) override external nonReentrant(true) returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    struct SeizeInternalLocalVars {\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n        uint liquidatorSeizeTokens;\\n        uint protocolSeizeTokens;\\n        uint protocolSeizeAmount;\\n        uint exchangeRateMantissa;\\n        uint totalReservesNew;\\n        uint totalFuseFeeNew;\\n        uint totalSupplyNew;\\n        uint feeSeizeTokens;\\n        uint feeSeizeAmount;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        SeizeInternalLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(vars.mathErr));\\n        }\\n\\n        vars.protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa: protocolSeizeShareMantissa}));\\n        vars.feeSeizeTokens = mul_(seizeTokens, Exp({mantissa: feeSeizeShareMantissa}));\\n        vars.liquidatorSeizeTokens = sub_(sub_(seizeTokens, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n        vars.protocolSeizeAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), vars.protocolSeizeTokens);\\n        vars.feeSeizeAmount = mul_ScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), vars.feeSeizeTokens);\\n\\n        vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n        vars.totalSupplyNew = sub_(sub_(totalSupply, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n        vars.totalFuseFeeNew = add_(totalFuseFees, vars.feeSeizeAmount);\\n\\n        (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        totalReserves = vars.totalReservesNew;\\n        totalSupply = vars.totalSupplyNew;\\n        totalFuseFees = vars.totalFuseFeeNew;\\n\\n        accountTokens[borrower] = vars.borrowerTokensNew;\\n        accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n        emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Internal function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\n      * @dev Admin function to accrue interest and set a new admin fee\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setAdminFee(uint newAdminFeeMantissa) external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\n            return fail(Error(error), FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setAdminFeeFresh(newAdminFeeMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new admin fee\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setAdminFeeFresh(uint newAdminFeeMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\\n        }\\n\\n        // Sanitize newAdminFeeMantissa\\n        if (newAdminFeeMantissa == type(uint).max) newAdminFeeMantissa = adminFeeMantissa;\\n\\n        // Get latest Fuse fee\\n        uint newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\n\\n        // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa \\u2264 reserveFactorPlusFeesMaxMantissa\\n        if (add_(add_(reserveFactorMantissa, newAdminFeeMantissa), newFuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\n        }\\n\\n        // If setting admin fee\\n        if (adminFeeMantissa != newAdminFeeMantissa) {\\n            // Check caller is admin\\n            if (!hasAdminRights()) {\\n                return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\\n            }\\n\\n            // Set admin fee\\n            uint oldAdminFeeMantissa = adminFeeMantissa;\\n            adminFeeMantissa = newAdminFeeMantissa;\\n\\n            // Emit event\\n            emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\n        }\\n\\n        // If setting Fuse fee\\n        if (fuseFeeMantissa != newFuseFeeMantissa) {\\n            // Set Fuse fee\\n            uint oldFuseFeeMantissa = fuseFeeMantissa;\\n            fuseFeeMantissa = newFuseFeeMantissa;\\n\\n            // Emit event\\n            emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) override external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (add_(add_(newReserveFactorMantissa, adminFeeMantissa), fuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) override external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(msg.sender, reduceAmount);\\n\\n        emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawFuseFees(uint withdrawAmount) external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\n            return fail(Error(error), FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _withdrawFuseFeesFresh(withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces Fuse fees by transferring to Fuse\\n     * @dev Requires fresh interest accrual\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawFuseFeesFresh(uint withdrawAmount) internal returns (uint) {\\n        // totalFuseFees - reduceAmount\\n        uint totalFuseFeesNew;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < withdrawAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check withdrawAmount \\u2264 fuseFees[n] (totalFuseFees)\\n        if (withdrawAmount > totalFuseFees) {\\n            return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked withdrawAmount <= totalFuseFees above, so this should never revert.\\n        totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\n\\n        // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\n        totalFuseFees = totalFuseFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(address(fuseAdmin), withdrawAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces admin fees by transferring to admin\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawAdminFees(uint withdrawAmount) external nonReentrant(false) returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\n            return fail(Error(error), FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _withdrawAdminFeesFresh(withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces admin fees by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param withdrawAmount Amount of fees to withdraw\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _withdrawAdminFeesFresh(uint withdrawAmount) internal returns (uint) {\\n        // totalAdminFees - reduceAmount\\n        uint totalAdminFeesNew;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < withdrawAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check withdrawAmount \\u2264 adminFees[n] (totalAdminFees)\\n        if (withdrawAmount > totalAdminFees) {\\n            return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // We checked withdrawAmount <= totalAdminFees above, so this should never revert.\\n        totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\n\\n        // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\n        totalAdminFees = totalAdminFeesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(address(uint160(UnitrollerAdminStorage(address(comptroller)).admin())), withdrawAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        // Attempt to reset interest checkpoints on old IRM\\n        if (address(oldInterestRateModel) != address(0)) address(oldInterestRateModel).call(abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\"));\\n\\n        // Attempt to add first interest checkpoint on new IRM\\n        address(newInterestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest()\\\"));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the cToken ERC20 name and symbol\\n     * @dev Admin function to update the cToken ERC20 name and symbol\\n     * @param _name the new ERC20 token name to use\\n     * @param _symbol the new ERC20 token symbol to use\\n     */\\n    function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\\n        // Check caller is admin\\n        require(hasAdminRights(), \\\"caller not admin\\\");\\n\\n        // Set ERC20 name and symbol\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() virtual internal view returns (uint) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) virtual internal returns (uint) {\\n      return 1;\\n    }\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address to, uint amount) virtual internal {}\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant(bool localOnly) {\\n        _beforeNonReentrant(localOnly);\\n        _;\\n        _afterNonReentrant(localOnly);\\n    }\\n\\n    /**\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n     * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n     */\\n    function _beforeNonReentrant(bool localOnly) private {\\n        require(_notEntered, \\\"re-entered\\\");\\n        if (!localOnly) comptroller._beforeNonReentrant();\\n        _notEntered = false;\\n    }\\n\\n    /**\\n     * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n     * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n     * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n     */\\n    function _afterNonReentrant(bool localOnly) private {\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n        if (!localOnly) comptroller._afterNonReentrant();\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     * @param errorMessage The revert string to return on failure.\\n     */\\n    function _functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.call(data);\\n\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n\\n        return returndata;\\n    }\\n}\\n\",\"keccak256\":\"0xee73ba24563deee5066a0551d0b595d55c8d483fc9a41c06fbab73ad5764e9b7\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenAdminStorage {\\n    /*\\n     * Administrator for Fuse\\n     */\\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(payable(0x8425bd497b6519bb2C8DC5Bb40c1b0C8DCD6dDf6));\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Administrator for this contract\\n     */\\n    address payable internal __admin;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\n     */\\n    bool internal __fuseAdminHasRights;\\n\\n    /**\\n     * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\n     */\\n    bool internal __adminHasRights;\\n}\\n\\ncontract CTokenStorage is CTokenAdminStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /*\\n     * Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /*\\n     * Maximum fraction of interest that can be set aside for reserves + fees\\n     */\\n    uint internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n    /*\\n     * LEGACY USE ONLY: Pending administrator for this contract\\n     */\\n    address payable private __pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /*\\n     * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for admin fees\\n     */\\n    uint public adminFeeMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for Fuse fees\\n     */\\n    uint public fuseFeeMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total amount of admin fees of the underlying held in this market\\n     */\\n    uint public totalAdminFees;\\n\\n    /**\\n     * @notice Total amount of Fuse fees of the underlying held in this market\\n     */\\n    uint public totalFuseFees;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /*\\n     * Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /*\\n     * Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /*\\n     * Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /*\\n     * Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n    /*\\n     * Share of seized collateral taken as fees\\n     */\\n    uint public constant feeSeizeShareMantissa = 1e17; //10%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    function isCToken() external virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Indicator that this is or is not a CEther contract (for inspection)\\n     */\\n    function isCEther() external virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the admin fee is changed\\n     */\\n    event NewAdminFee(uint oldAdminFeeMantissa, uint newAdminFeeMantissa);\\n\\n    /**\\n     * @notice Event emitted when the Fuse fee is changed\\n     */\\n    event NewFuseFee(uint oldFuseFeeMantissa, uint newFuseFeeMantissa);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\n    function approve(address spender, uint amount) virtual external returns (bool);\\n    function allowance(address owner, address spender) external virtual view returns (uint);\\n    function balanceOf(address owner) external virtual view returns (uint);\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external virtual view returns (uint);\\n    function supplyRatePerBlock() external virtual view returns (uint);\\n    function totalBorrowsCurrent() virtual external returns (uint);\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\n    function borrowBalanceStored(address account) public virtual view returns (uint);\\n    function exchangeRateCurrent() virtual public returns (uint);\\n    function exchangeRateStored() public virtual view returns (uint);\\n    function getCash() external virtual view returns (uint);\\n    function accrueInterest() virtual public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) virtual external returns (uint);\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\n\\n}\\n\\ncontract CEtherInterface is CErc20Storage {}\\n\",\"keccak256\":\"0xe37cb31474232fd25ffa46afecd46713ea06e93f4c975a12a2137663d613e7ae\",\"license\":\"UNLICENSED\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x73a3b687650a3ce6630a3511abfa66e8fbd98ff757c3670d91072faff7dbc867\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\n    function exitMarket(address cToken) virtual external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n    function mintWithinLimits(address cToken, uint exchangeRateMantissa, uint accountTokens, uint mintAmount) virtual external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n    function borrowWithinLimits(address cToken, uint accountBorrowsNew) virtual external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) virtual external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) virtual external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n    \\n    /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n    function _beforeNonReentrant() virtual external;\\n    function _afterNonReentrant() virtual external;\\n}\\n\",\"keccak256\":\"0x4ad8d62dd640e4235603e1bd1f19f2cfcf7d6e1033f9aff22d8ca3b7d7e5110a\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /*\\n     * Administrator for Fuse\\n     */\\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(payable(0x8425bd497b6519bb2C8DC5Bb40c1b0C8DCD6dDf6));\\n\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Whether or not the Fuse admin has admin rights\\n     */\\n    bool public fuseAdminHasRights = true;\\n\\n    /**\\n     * @notice Whether or not the admin has admin rights\\n     */\\n    bool public adminHasRights = true;\\n\\n    /**\\n     * @notice Returns a boolean indicating if the sender has admin rights\\n     */\\n    function hasAdminRights() internal view returns (bool) {\\n        return (msg.sender == admin && adminHasRights) || (msg.sender == address(fuseAdmin) && fuseAdminHasRights);\\n    }\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /*\\n     * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint internal maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        // Whether or not this market is listed\\n        bool isListed;\\n\\n        // Multiplier representing the most one can borrow against their collateral in this market.\\n        // For instance, 0.9 to allow borrowing 90% of collateral value.\\n        // Must be between 0 and 1, and stored as a mantissa.\\n        uint collateralFactorMantissa;\\n\\n        // Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /**\\n     * @dev Maps borrowers to booleans indicating if they have entered any markets\\n     */\\n    mapping(address => bool) internal borrowers;\\n\\n    /// @notice A list of all borrowers who have entered markets\\n    address[] public allBorrowers;\\n\\n    // Indexes of borrower account addresses in the `allBorrowers` array\\n    mapping(address => uint256) internal borrowerIndexes;\\n\\n    /**\\n     * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n     */\\n    mapping(address => bool) public suppliers;\\n\\n    /// @notice All cTokens addresses mapped by their underlying token addresses\\n    mapping(address => CToken) public cTokensByUnderlying;\\n\\n    /// @notice Whether or not the supplier whitelist is enforced\\n    bool public enforceWhitelist;\\n\\n    /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n    mapping(address => bool) public whitelist;\\n\\n    /// @notice An array of all whitelisted accounts\\n    address[] public whitelistArray;\\n\\n    // Indexes of account addresses in the `whitelistArray` array\\n    mapping(address => uint256) internal whitelistIndexes;\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /**\\n     * @dev Whether or not the implementation should be auto-upgraded.\\n     */\\n    bool public autoImplementation;\\n\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint) public borrowCaps;\\n\\n    /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n    mapping(address => uint) public supplyCaps;\\n\\n    /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n    address[] public rewardsDistributors;\\n\\n    /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n    bool internal _notEntered;\\n\\n    /// @dev Whether or not _notEntered has been initialized\\n    bool internal _notEnteredInitialized;\\n}\\n\",\"keccak256\":\"0xfa2d05e417788925e230193ce96bf22f7b47914d7af0b8b78172cfa1b5197c84\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return uint256 The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance uint256 The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success bool Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success bool Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success bool Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x3858a5cb911a0f809592eb61d5bb091c97ee3fbd5221140bf58168646ca2e467\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance uint256 The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success bool Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining uint256 The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9415ce94867782b67663b03bf89358445fc9e070a3e3150c5b2b0a7b7c76fd4a\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        SUPPLIER_NOT_WHITELISTED,\\n        BORROW_BELOW_MIN,\\n        SUPPLY_ABOVE_MAX,\\n        NONZERO_TOTAL_SUPPLY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n        TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n        SET_WHITELIST_STATUS_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        UNSUPPORT_MARKET_OWNER_CHECK,\\n        UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n        UNSUPPORT_MARKET_IN_USE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        UTILIZATION_ABOVE_MAX\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        NEW_UTILIZATION_RATE_ABOVE_MAX,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\n        WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\n        WITHDRAW_FUSE_FEES_FRESH_CHECK,\\n        WITHDRAW_FUSE_FEES_VALIDATION,\\n        WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n        WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n        WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n        WITHDRAW_ADMIN_FEES_VALIDATION,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n        SET_ADMIN_FEE_ADMIN_CHECK,\\n        SET_ADMIN_FEE_FRESH_CHECK,\\n        SET_ADMIN_FEE_BOUNDS_CHECK,\\n        SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\n        SET_FUSE_FEE_FRESH_CHECK,\\n        SET_FUSE_FEE_BOUNDS_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint(err);\\n    }\\n}\",\"keccak256\":\"0x78f4f150b2b5c4469a0bc2ec4851c4957a5f212da0ae96f891aed2f2fe502150\",\"license\":\"UNLICENSED\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x0a139421d4f29abe87c4fbe9f81eb9d8fb99b7348420c51c3ced5ee39d036eff\",\"license\":\"UNLICENSED\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0x5fa705da5d89a68efb99b9c01d0ed23d323f40fc1b60365310e69bb844e31858\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFuseFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface IFuseFeeDistributor {\\n    function minBorrowEth() external view returns (uint256);\\n    function maxSupplyEth() external view returns (uint256);\\n    function maxUtilizationRate() external view returns (uint256);\\n    function interestFeeRate() external view returns (uint256);\\n    function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation) external view returns (bool);\\n    function cErc20DelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\\n    function cEtherDelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\\n    function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n    function latestCErc20Delegate(address oldImplementation) external view returns (address cErc20Delegate, bool allowResign, bytes memory becomeImplementationData);\\n    function latestCEtherDelegate(address oldImplementation) external view returns (address cEtherDelegate, bool allowResign, bytes memory becomeImplementationData);\\n    function deployCEther(bytes calldata constructorData) external returns (address);\\n    function deployCErc20(bytes calldata constructorData) external returns (address);\\n    fallback () external payable;\\n    receive () external payable;\\n}\\n\",\"keccak256\":\"0xcd8b75a088ebe837c5c06642a7e316c676750f526740c22b48cec5abb80386f5\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual public view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual public view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x80b6b0ed24679747638a41540e39b298dc7b189e666f96823f1c021db4d29d13\",\"license\":\"UNLICENSED\"},\"contracts/compound/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\\n}\\n\",\"keccak256\":\"0x684421feb428ec29e91ba229c9aac8d1625e8a13eb6814102ab58d63f516e73b\",\"license\":\"UNLICENSED\"},\"contracts/compound/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title Unitroller\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Event emitted when the Fuse admin rights are changed\\n      */\\n    event FuseAdminRightsToggled(bool hasRights);\\n\\n    /**\\n      * @notice Event emitted when the admin rights are changed\\n      */\\n    event AdminRightsToggled(bool hasRights);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n        if (!fuseAdmin.comptrollerImplementationWhitelist(comptrollerImplementation, newPendingImplementation)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK);\\n        }\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n        pendingComptrollerImplementation = newPendingImplementation;\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = comptrollerImplementation;\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        comptrollerImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Toggles Fuse admin rights.\\n      * @param hasRights Boolean indicating if the Fuse admin is to have rights.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _toggleFuseAdminRights(bool hasRights) external returns (uint) {\\n        // Check caller = admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n        }\\n\\n        // Check that rights have not already been set to the desired value\\n        if (fuseAdminHasRights == hasRights) return uint(Error.NO_ERROR);\\n\\n        // Set fuseAdminHasRights\\n        fuseAdminHasRights = hasRights;\\n\\n        // Emit FuseAdminRightsToggled()\\n        emit FuseAdminRightsToggled(fuseAdminHasRights);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Toggles admin rights.\\n      * @param hasRights Boolean indicating if the admin is to have rights.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _toggleAdminRights(bool hasRights) external returns (uint) {\\n        // Check caller = admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n        }\\n\\n        // Check that rights have not already been set to the desired value\\n        if (adminHasRights == hasRights) return uint(Error.NO_ERROR);\\n\\n        // Set adminHasRights\\n        adminHasRights = hasRights;\\n\\n        // Emit AdminRightsToggled()\\n        emit AdminRightsToggled(hasRights);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (!hasAdminRights()) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    fallback () payable external {\\n        // Check for automatic implementation\\n        if (msg.sender != address(this)) {\\n            (bool callSuccess, bytes memory data) = address(this).staticcall(abi.encodeWithSignature(\\\"autoImplementation()\\\"));\\n            bool autoImplementation;\\n            if (callSuccess) (autoImplementation) = abi.decode(data, (bool));\\n\\n            if (autoImplementation) {\\n                address latestComptrollerImplementation = fuseAdmin.latestComptrollerImplementation(comptrollerImplementation);\\n\\n                if (comptrollerImplementation != latestComptrollerImplementation) {\\n                    address oldImplementation = comptrollerImplementation; // Save current value for inclusion in log\\n                    comptrollerImplementation = latestComptrollerImplementation;\\n                    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n                }\\n            }\\n        }\\n\\n        // delegate all other functions to current implementation\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce054523faeeb9a33dc7e6e629b98fa0a92748af6c1b7f5d8375a6d09ce844b9\",\"license\":\"UNLICENSED\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n    function underlying() external view returns (address);\\n    function liquidateBorrow(address borrower, uint repayAmount, ICToken cTokenCollateral) external returns (uint);\\n}\\n\",\"keccak256\":\"0x6372f7428d7f26e1b75e148bb97ba708e0ae5e11403890264b68c1cd3a35d288\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function comptroller() external view returns (address);\\n    function adminFeeMantissa() external view returns (uint256);\\n    function fuseFeeMantissa() external view returns (uint256);\\n    function reserveFactorMantissa() external view returns (uint256);\\n    function totalReserves() external view returns (uint);\\n    function totalAdminFees() external view returns (uint);\\n    function totalFuseFees() external view returns (uint);\\n\\n    function isCToken() external view returns (bool);\\n    function isCEther() external view returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x8612e6d992c55389287de1495b7ae867c59a3c5cd2aee1d6f6d9c1138a473b48\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IUnitroller.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ninterface IComptroller {\\n    function admin() external view returns (address);\\n    function adminHasRights() external view returns (bool);\\n    function fuseAdminHasRights() external view returns (bool);\\n\\n    function oracle() external view returns (IPriceOracle);\\n    function closeFactorMantissa() external view returns (uint);\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function markets(address cToken) external view returns (bool, uint);\\n\\n    function getAssetsIn(address account) external view returns (ICToken[] memory);\\n    function checkMembership(address account, ICToken cToken) external view returns (bool);\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n\\n    function _setPriceOracle(IPriceOracle newOracle) external returns (uint);\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256);\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint);\\n    function _become(IUnitroller unitroller) external;\\n\\n    function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n    function getAllMarkets() external view returns (ICToken[] memory);\\n    function getAllBorrowers() external view returns (address[] memory);\\n    function suppliers(address account) external view returns (bool);\\n    function enforceWhitelist() external view returns (bool);\\n    function whitelist(address account) external view returns (bool);\\n\\n    function _setWhitelistEnforcement(bool enforce) external returns (uint);\\n    function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint);\\n\\n    function _toggleAutoImplementations(bool enabled) external returns (uint);\\n}\\n\",\"keccak256\":\"0x557268338fb61e56228b37f686ae55bb892d33daa13d8b0135cfbf55f1f66e87\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(ICToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x8845d62c64d11c0ddbf6786b21dc6f8f796acbdb0129f35f89f9648298e81921\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title RewardsDistributor\\n * @author Compound\\n */\\ninterface IRewardsDistributor {\\n    /// @dev The token to reward (i.e., COMP)\\n    function rewardToken() external view returns (address);\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    function compSupplySpeeds(address) external view returns (uint);\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    function compBorrowSpeeds(address) external view returns (uint);\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    function compAccrued(address) external view returns (uint);\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param supplier The minter/redeemer\\n     */\\n    function flywheelPreSupplierAction(address cToken, address supplier) external;\\n\\n    /**\\n     * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n     * @dev Called by the Comptroller\\n     * @param cToken The relevant market\\n     * @param borrower The borrower\\n     */\\n    function flywheelPreBorrowerAction(address cToken, address borrower) external;\\n\\n    /**\\n     * @notice Returns an array of all markets.\\n     */\\n    function getAllMarkets() external view returns (ICToken[] memory);\\n}\\n\",\"keccak256\":\"0xeb1ca1cad4d6fc86888d477a975ef033693ee05c3553e8ec9578a74941d9ebd9\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IUnitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ninterface IUnitroller {\\n    function _setPendingImplementation(address newPendingImplementation) external returns (uint);\\n    function _setPendingAdmin(address newPendingAdmin) external returns (uint);\\n}\\n\",\"keccak256\":\"0x1fd504cc54f0fc4a1668bb069c29a7a30d195cd9620d0058ddd9c8901f6985dd\",\"license\":\"BSD-3-Clause\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x169f7dfa721d0159176bf155acb4e011ff0ff5014bbb13949a998fd71255aa54\",\"license\":\"GPL-3.0-only\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle is IPriceOracle {\\n    /**\\n     * @notice Get the price of an underlying asset.\\n     * @param underlying The underlying asset to get the price of.\\n     * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n     * Zero means the price is unavailable.\\n     */\\n    function price(address underlying) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd851f103b5d11e5c845bc916507ebb0ee09cefd99dee1340d34b7c94fda7f082\",\"license\":\"UNLICENSED\"},\"contracts/oracles/MasterPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\nimport \\\"../external/compound/ICToken.sol\\\";\\nimport \\\"../external/compound/ICErc20.sol\\\";\\n\\nimport \\\"./BasePriceOracle.sol\\\";\\n\\n/**\\n * @title MasterPriceOracle\\n * @notice Use a combination of price oracles.\\n * @dev Implements `PriceOracle`.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract MasterPriceOracle is Initializable, IPriceOracle, BasePriceOracle {\\n    /**\\n     * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\n     */\\n    mapping(address => IPriceOracle) public oracles;\\n\\n    /**\\n     * @dev Default/fallback `PriceOracle`.\\n     */\\n    IPriceOracle public defaultOracle;\\n\\n    /**\\n     * @dev The administrator of this `MasterPriceOracle`.\\n     */\\n    address public admin;\\n\\n    /**\\n     * @dev Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n     */\\n    bool internal noAdminOverwrite;\\n\\n    /**\\n     * @dev The Wrapped native asset address.\\n     */\\n    address public wtoken;\\n\\n    /**\\n     * @dev Returns a boolean indicating if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n     */\\n    function canAdminOverwrite() external view returns (bool) {\\n        return !noAdminOverwrite;\\n    }\\n\\n    /**\\n     * @dev Event emitted when `admin` is changed.\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Event emitted when the default oracle is changed.\\n     */\\n    event NewDefaultOracle(address oldOracle, address newOracle);\\n\\n    /**\\n     * @dev Event emitted when an underlying token's oracle is changed.\\n     */\\n    event NewOracle(address underlying, address oldOracle, address newOracle);\\n\\n    /**\\n     * @dev Constructor to initialize state variables.\\n     * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\\n     * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\\n     * @param _defaultOracle The default `PriceOracle` contract to use.\\n     * @param _admin The admin who can assign oracles to underlying tokens.\\n     * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n     */\\n    function initialize(\\n        address[] memory underlyings, \\n        IPriceOracle[] memory _oracles, \\n        IPriceOracle _defaultOracle, \\n        address _admin, \\n        bool _canAdminOverwrite, \\n        address _wtoken\\n    ) external initializer {\\n        // Input validation\\n        require(underlyings.length == _oracles.length, \\\"Lengths of both arrays must be equal.\\\");\\n\\n        // Initialize state variables\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            address underlying = underlyings[i];\\n            IPriceOracle newOracle = _oracles[i];\\n            oracles[underlying] = newOracle;\\n            emit NewOracle(underlying, address(0), address(newOracle));\\n        }\\n\\n        defaultOracle = _defaultOracle;\\n        admin = _admin;\\n        noAdminOverwrite = !_canAdminOverwrite;\\n        wtoken = _wtoken;\\n    }\\n\\n    /**\\n     * @dev Sets `_oracles` for `underlyings`.\\n     */\\n    function add(address[] calldata underlyings, IPriceOracle[] calldata _oracles) external onlyAdmin {\\n        // Input validation\\n        require(underlyings.length > 0 && underlyings.length == _oracles.length, \\\"Lengths of both arrays must be equal and greater than 0.\\\");\\n\\n        // Assign oracles to underlying tokens\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            address underlying = underlyings[i];\\n            address oldOracle = address(oracles[underlying]);\\n            if (noAdminOverwrite) require(oldOracle == address(0), \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\");\\n            IPriceOracle newOracle = _oracles[i];\\n            oracles[underlying] = newOracle;\\n            emit NewOracle(underlying, oldOracle, address(newOracle));\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes the admin and emits an event.\\n     */\\n    function setDefaultOracle(IPriceOracle newOracle) external onlyAdmin {\\n        IPriceOracle oldOracle = defaultOracle;\\n        defaultOracle = newOracle;\\n        emit NewDefaultOracle(address(oldOracle), address(newOracle));\\n    }\\n\\n    /**\\n     * @dev Changes the admin and emits an event.\\n     */\\n    function changeAdmin(address newAdmin) external onlyAdmin {\\n        address oldAdmin = admin;\\n        admin = newAdmin;\\n        emit NewAdmin(oldAdmin, newAdmin);\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if `msg.sender == admin`.\\n     */\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"Sender is not the admin.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the price in ETH of the token underlying `cToken`.\\n     * @dev Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\\n     * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n     */\\n    function getUnderlyingPrice(ICToken cToken) external override view returns (uint) {\\n        // Get underlying ERC20 token address\\n        address underlying = address(ICErc20(address(cToken)).underlying());\\n\\n        // Return 1e18 for WETH\\n        if (underlying == wtoken) return 1e18;\\n\\n        // Get underlying price from assigned oracle\\n        IPriceOracle oracle = oracles[underlying];\\n        if (address(oracle) != address(0)) return oracle.getUnderlyingPrice(cToken);\\n        if (address(defaultOracle) != address(0)) return defaultOracle.getUnderlyingPrice(cToken);\\n        revert(\\\"Price oracle not found for this underlying token address.\\\");\\n    }\\n\\n    /**\\n     * @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\\n     */\\n    function price(address underlying) external override view returns (uint) {\\n        // Return 1e18 for WETH\\n        if (underlying == wtoken) return 1e18;\\n\\n        // Get underlying price from assigned oracle\\n        IPriceOracle oracle = oracles[underlying];\\n        if (address(oracle) != address(0)) return BasePriceOracle(address(oracle)).price(underlying);\\n        if (address(defaultOracle) != address(0)) return BasePriceOracle(address(defaultOracle)).price(underlying);\\n        revert(\\\"Price oracle not found for this underlying token address.\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x55620ebc46ab83c5b32cad352206d03e7279aa634647e91b662afbd193bbb6fb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614bf8806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370733375116100a2578063c3530a6311610071578063c3530a6314610251578063c41c2f2414610264578063d0a164fb1461028f578063d64996e514610297578063dedfe22f146102aa57600080fd5b806370733375146101ff578063906571471461021257806395d89b41146102275780639c00a3d41461022f57600080fd5b806351678684116100de5780635167868414610182578063586f6c10146101a557806359d2fea6146101c8578063635629e6146101ec57600080fd5b806306fdde03146101105780630b9c80bd1461012e5780630c5eb5a41461014f57806327e16c1f1461016f575b600080fd5b6101186102ce565b6040516101259190613ab1565b60405180910390f35b61014161013c366004613ae3565b61035c565b604051610125929190613bc5565b61016261015d366004613bf3565b6108d5565b6040516101259190613c2c565b61016261017d366004613ae3565b61095d565b610195610190366004613ae3565b6109d5565b6040516101259493929190613e5f565b6101b86101b3366004613ff2565b610a78565b6040516101259493929190614137565b6101db6101d6366004613ae3565b610cfb565b60405161012595949392919061418f565b6101956101fa366004613ae3565b6114d5565b61019561020d366004613ae3565b6114e7565b61022561022036600461424d565b6114f9565b005b610118611672565b61024261023d3660046142c2565b61167f565b604051610125939291906142ee565b61014161025f366004613ae3565b611db3565b600354610277906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b6101956120d0565b6101956102a5366004614321565b612175565b6102bd6102b836600461433e565b6121b5565b604051610125959493929190614357565b600180546102db906143f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610307906143f6565b80156103545780601f1061032957610100808354040283529160200191610354565b820191906000526020600020905b81548152906001019060200180831161033757829003601f168201915b505050505081565b6060806000600360009054906101000a90046001600160a01b03166001600160a01b031663d88ff1f46040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dc9190810190614576565b90506000805b82518110156105d25760008382815181106103ff576103ff6145aa565b6020026020010151604001519050806001600160a01b03166316dc15fe886040518263ffffffff1660e01b815260040161044891906001600160a01b0391909116815260200190565b602060405180830381865afa925050508015610481575060408051601f3d908101601f1916820190925261047e918101906145d0565b60015b61048a576105bf565b80156105bd576000826001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f891908101906145ed565b905060005b81518110156105ba57600082828151811061051a5761051a6145aa565b60209081029190910101516040516370a0823160e01b81526001600160a01b038d81166004830152909116906370a0823190602401602060405180830381865afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610590919061467b565b11156105a857856105a0816146aa565b9650506105ba565b806105b2816146aa565b9150506104fd565b50505b505b50806105ca816146aa565b9150506103e2565b506000816001600160401b038111156105ed576105ed613f3f565b604051908082528060200260200182016040528015610616578160200160208202803683370190505b5090506000826001600160401b0381111561063357610633613f3f565b60405190808252806020026020018201604052801561066c57816020015b6106596138b9565b8152602001906001900390816106515790505b5090506000805b85518110156108c7576000868281518110610690576106906145aa565b6020026020010151604001519050806001600160a01b03166316dc15fe8b6040518263ffffffff1660e01b81526004016106d991906001600160a01b0391909116815260200190565b602060405180830381865afa925050508015610712575060408051601f3d908101601f1916820190925261070f918101906145d0565b60015b61071b576108b4565b80156108b2576000826001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078991908101906145ed565b905060005b81518110156108af5760008282815181106107ab576107ab6145aa565b60200260200101516001600160a01b03166370a082318f6040518263ffffffff1660e01b81526004016107ed91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e919061467b565b111561089d5784888781518110610847576108476145aa565b602002602001018181525050898581518110610865576108656145aa565b602002602001015187878151811061087f5761087f6145aa565b60200260200101819052508580610895906146aa565b9650506108af565b806108a7816146aa565b91505061078e565b50505b505b50806108bf816146aa565b915050610673565b509197909650945050505050565b604051632aff3bff60e21b81526001600160a01b03828116600483015260609160009161095591869182169063abfceffc90602401600060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094f91908101906145ed565b85612312565b949350505050565b60606109cf82836001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c991908101906145ed565b33612312565b92915050565b6003546040516351f6c8e360e11b81526001600160a01b03838116600483015260609283928392839260009283929091169063a3ed91c6906024015b600060405180830381865afa158015610a2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5691908101906146c5565b91509150600080610a6683613072565b949a9399509750929550909350505050565b606080606080600086516001600160401b03811115610a9957610a99613f3f565b604051908082528060200260200182016040528015610acc57816020015b6060815260200190600190039081610ab75790505b509050600087516001600160401b03811115610aea57610aea613f3f565b604051908082528060200260200182016040528015610b13578160200160208202803683370190505b509050600088516001600160401b03811115610b3157610b31613f3f565b604051908082528060200260200182016040528015610b5a578160200160208202803683370190505b509050600089516001600160401b03811115610b7857610b78613f3f565b604051908082528060200260200182016040528015610ba1578160200160208202803683370190505b50905060005b8a51811015610cea57306001600160a01b0316639c00a3d48c8381518110610bd157610bd16145aa565b60200260200101518c6040518363ffffffff1660e01b8152600401610c0b9291906001600160a01b03929092168252602082015260400190565b6000604051808303816000875af1925050508015610c4b57506040513d6000823e601f3d908101601f19168201604052610c489190810190614780565b60015b610c78576001828281518110610c6357610c636145aa565b91151560209283029190910190910152610cd8565b82888581518110610c8b57610c8b6145aa565b602002602001018190525081878581518110610ca957610ca96145aa565b60200260200101818152505080868581518110610cc857610cc86145aa565b6020026020010181815250505050505b80610ce2816146aa565b915050610ba7565b509299919850965090945092505050565b60008060608060008060009050600080886001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7191908101906145ed565b9050600081516001600160401b03811115610d8e57610d8e613f3f565b604051908082528060200260200182016040528015610db7578160200160208202803683370190505b509050600082516001600160401b03811115610dd557610dd5613f3f565b604051908082528060200260200182016040528015610e0857816020015b6060815260200190600190039081610df35790505b50905060008b6001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190614865565b905060005b84518110156113cd576000858281518110610e9157610e916145aa565b6020026020010151905060008e6001600160a01b0316638e8f294b836040518263ffffffff1660e01b8152600401610ed891906001600160a01b0391909116815260200190565b6040805180830381865afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f189190614882565b50905080610f275750506113bb565b6000826001600160a01b03166373acee986040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d919061467b565b90506000836001600160a01b031663dc028ab16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff3919061467b565b846001600160a01b03166361feacff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611055919061467b565b856001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b7919061467b565b6110c191906148b0565b6110cb91906148b0565b82856001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e919061467b565b61113891906148b0565b61114291906148c8565b60405163fc57d4df60e01b81526001600160a01b03868116600483015291925060009188169063fc57d4df90602401602060405180830381865afa15801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b2919061467b565b9050670de0b6b3a76400006111c782856148df565b6111d191906148fe565b6111db908d6148b0565b9b50670de0b6b3a76400006111f082846148df565b6111fa91906148fe565b611204908c6148b0565b9a50846001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126891906145d0565b156112df576000898781518110611281576112816145aa565b60200260200101906001600160a01b031690816001600160a01b0316815250506040518060400160405280600381526020016208aa8960eb1b8152508887815181106112cf576112cf6145aa565b60200260200101819052506113b5565b846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190614865565b898781518110611353576113536145aa565b60200260200101906001600160a01b031690816001600160a01b031681525050611395898781518110611388576113886145aa565b6020026020010151613279565b90508887815181106113a9576113a96145aa565b60200260200101819052505b50505050505b806113c5816146aa565b915050610e74565b506000600360009054906101000a90046001600160a01b03166001600160a01b03166343e20a1d8e6001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190614865565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be91906145d0565b959d969c50929a5090985092965092945050505050565b606080606080600080610a568761035c565b606080606080600080610a5687611db3565b600054610100900460ff166115145760005460ff1615611518565b303b155b6115805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156115a2576000805461ffff19166101011790555b6001600160a01b0384166116175760405162461bcd60e51b815260206004820152603660248201527f46757365506f6f6c4469726563746f727920696e7374616e63652063616e6e6f6044820152753a103132903a3432903d32b9379030b2323932b9b99760511b6064820152608401611577565b600380546001600160a01b0319166001600160a01b03861617905582516116459060019060208601906138fa565b5081516116599060029060208501906138fa565b50801561166c576000805461ff00191690555b50505050565b600280546102db906143f6565b60606000806000856001600160a01b03166332abcdbe6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156116c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ec9190810190614984565b90506000805b82518110156119755760008060006117bc8b8c6001600160a01b031663abfceffc898881518110611725576117256145aa565b60200260200101516040518263ffffffff1660e01b815260040161175891906001600160a01b0391909116815260200190565b600060405180830381865afa158015611775573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179d91908101906145ed565b8887815181106117af576117af6145aa565b6020026020010151612312565b905060005b815181101561190b57670de0b6b3a76400008282815181106117e5576117e56145aa565b60200260200101516101e00151838381518110611804576118046145aa565b6020026020010151610160015161181b91906148df565b61182591906148fe565b61182f90856148b0565b9350818181518110611843576118436145aa565b60200260200101516101a00151156118f957670de0b6b3a7640000828281518110611870576118706145aa565b60200260200101516102200151670de0b6b3a7640000848481518110611898576118986145aa565b60200260200101516101e001518585815181106118b7576118b76145aa565b602002602001015161014001516118ce91906148df565b6118d891906148fe565b6118e291906148df565b6118ec91906148fe565b6118f690846148b0565b92505b80611903816146aa565b9150506117c1565b50600080841161192a576ec097ce7bc90715b34b9f1000000000611947565b8361193d84670de0b6b3a76400006148df565b61194791906148fe565b90508a811161195e578561195a816146aa565b9650505b50505050808061196d906146aa565b9150506116f2565b506000816001600160401b0381111561199057611990613f3f565b6040519080825280602002602001820160405280156119f557816020015b6119e2604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b8152602001906001900390816119ae5790505b5090506000805b8451811015611cdc576000806000611ab98d8e6001600160a01b031663abfceffc8b8881518110611a2f57611a2f6145aa565b60200260200101516040518263ffffffff1660e01b8152600401611a6291906001600160a01b0391909116815260200190565b600060405180830381865afa158015611a7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aa791908101906145ed565b8a87815181106117af576117af6145aa565b905060005b8151811015611c0857670de0b6b3a7640000828281518110611ae257611ae26145aa565b60200260200101516101e00151838381518110611b0157611b016145aa565b60200260200101516101600151611b1891906148df565b611b2291906148fe565b611b2c90856148b0565b9350818181518110611b4057611b406145aa565b60200260200101516101a0015115611bf657670de0b6b3a7640000828281518110611b6d57611b6d6145aa565b60200260200101516102200151670de0b6b3a7640000848481518110611b9557611b956145aa565b60200260200101516101e00151858581518110611bb457611bb46145aa565b60200260200101516101400151611bcb91906148df565b611bd591906148fe565b611bdf91906148df565b611be991906148fe565b611bf390846148b0565b92505b80611c00816146aa565b915050611abe565b506000808411611c27576ec097ce7bc90715b34b9f1000000000611c44565b83611c3a84670de0b6b3a76400006148df565b611c4491906148fe565b90508c811115611c575750505050611cca565b60405180608001604052808a8781518110611c7457611c746145aa565b60200260200101516001600160a01b0316815260200185815260200184815260200182815250878781518110611cac57611cac6145aa565b60200260200101819052508580611cc2906146aa565b965050505050505b80611cd4816146aa565b9150506119fc565b5081896001600160a01b031663e87554466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d40919061467b565b8a6001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da2919061467b565b965096509650505050509250925092565b6060806000600360009054906101000a90046001600160a01b03166001600160a01b031663d88ff1f46040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e339190810190614576565b90506000805b8251811015611f06576000838281518110611e5657611e566145aa565b6020026020010151604001519050806001600160a01b0316639b19251a886040518263ffffffff1660e01b8152600401611e9f91906001600160a01b0391909116815260200190565b602060405180830381865afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee091906145d0565b15611ef35782611eef816146aa565b9350505b5080611efe816146aa565b915050611e39565b506000816001600160401b03811115611f2157611f21613f3f565b604051908082528060200260200182016040528015611f4a578160200160208202803683370190505b5090506000826001600160401b03811115611f6757611f67613f3f565b604051908082528060200260200182016040528015611fa057816020015b611f8d6138b9565b815260200190600190039081611f855790505b5090506000805b85518110156108c7576000868281518110611fc457611fc46145aa565b6020026020010151604001519050806001600160a01b0316639b19251a8b6040518263ffffffff1660e01b815260040161200d91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561202a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204e91906145d0565b156120bd5781858481518110612066576120666145aa565b602002602001018181525050868281518110612084576120846145aa565b602002602001015184848151811061209e5761209e6145aa565b602002602001018190525082806120b4906146aa565b935050506108c7565b50806120c8816146aa565b915050611fa7565b606080606080600080600360009054906101000a90046001600160a01b03166001600160a01b0316634ae26ea16040518163ffffffff1660e01b8152600401600060405180830381865afa15801561212c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261215491908101906146c5565b9150915060008061216483613072565b949993985096509294509092505050565b6003546040516310c51ddf60e11b8152821515600482015260609182918291829160009182916001600160a01b039091169063218a3bbe90602401610a11565b6060806060806060806000600360009054906101000a90046001600160a01b03166001600160a01b0316634ae26ea16040518163ffffffff1660e01b8152600401600060405180830381865afa158015612213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261223b91908101906146c5565b91505080516001600160401b0381111561225757612257613f3f565b604051908082528060200260200182016040528015612280578160200160208202803683370190505b50915060005b81518110156122e9578181815181106122a1576122a16145aa565b6020026020010151604001518382815181106122bf576122bf6145aa565b6001600160a01b0390921660209283029190910190910152806122e1816146aa565b915050612286565b50506000806000806122fb858c610a78565b979e929d50909b5099509497509395505050505050565b60606000805b84518110156123e1576000866001600160a01b0316638e8f294b878481518110612344576123446145aa565b60200260200101516040518263ffffffff1660e01b815260040161237791906001600160a01b0391909116815260200190565b6040805180830381865afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190614882565b50905080156123ce57826123ca816146aa565b9350505b50806123d9816146aa565b915050612318565b506000816001600160401b038111156123fc576123fc613f3f565b60405190808252806020026020018201604052801561243557816020015b61242261397e565b81526020019060019003908161241a5790505b509050600080876001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249d9190614865565b905060005b8751811015613065576000808a6001600160a01b0316638e8f294b8b85815181106124cf576124cf6145aa565b60200260200101516040518263ffffffff1660e01b815260040161250291906001600160a01b0391909116815260200190565b6040805180830381865afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125429190614882565b9150915081612552575050613053565b61255a61397e565b60008b858151811061256e5761256e6145aa565b6020908102919091018101516001600160a01b03811680855260408051632b1e137760e21b81529051929450909263ac784ddc926004808401938290030181865afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e591906145d0565b1561272957600180546125f7906143f6565b80601f0160208091040260200160405190810160405280929190818152602001828054612623906143f6565b80156126705780601f1061264557610100808354040283529160200191612670565b820191906000526020600020905b81548152906001019060200180831161265357829003601f168201915b505050505082604001819052506002805461268a906143f6565b80601f01602080910402602001604051908101604052809291908181526020018280546126b6906143f6565b80156127035780601f106126d857610100808354040283529160200191612703565b820191906000526020600020905b8154815290600101906020018083116126e657829003601f168201915b50505050506060830152601260808301526001600160a01b038b163160a083015261288f565b806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278b9190614865565b6001600160a01b0316602083018190526127a481613279565b84604001856060018290528290525050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281691906149b8565b60ff1660808401526040516370a0823160e01b81526001600160a01b038d811660048301528216906370a0823190602401602060405180830381865afa158015612864573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612888919061467b565b60a0840152505b806001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f1919061467b565b8260c0018181525050806001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa158015612938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295c919061467b565b8260e0018181525050806001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c7919061467b565b82610180018181525050806001600160a01b03166373acee986040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a35919061467b565b82610120018181525050806001600160a01b031663dc028ab16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa1919061467b565b816001600160a01b03166361feacff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b03919061467b565b826001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b65919061467b565b612b6f91906148b0565b612b7991906148b0565b826101200151836101800151612b8f91906148b0565b612b9991906148c8565b610100830152604051633af9e66960e01b81526001600160a01b038c81166004830152821690633af9e669906024016020604051808303816000875af1158015612be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0b919061467b565b6101408301526040516395dd919360e01b81526001600160a01b038c811660048301528216906395dd919390602401602060405180830381865afa158015612c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7b919061467b565b61016083015260405163929fe9a160e01b81526001600160a01b038c8116600483015282811660248301528e169063929fe9a190604401602060405180830381865afa158015612ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf391906145d0565b15156101a08301526040805163182df0f560e01b815290516001600160a01b0383169163182df0f59160048083019260209291908290030181865afa158015612d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d64919061467b565b6101c083015260405163fc57d4df60e01b81526001600160a01b03828116600483015287169063fc57d4df90602401602060405180830381865afa158015612db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd4919061467b565b6101e08301526001600160a01b038681166102008401819052602084015160405163addd509960e01b8152921660048301529063addd509990602401602060405180830381865afa925050508015612e49575060408051601f3d908101601f19168201909252612e4691810190614865565b60015b612e5257612e62565b6001600160a01b03166102008301525b8282610220018181525050806001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf919061467b565b82610240018181525050806001600160a01b0316638d02d9a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b919061467b565b82610260018181525050806001600160a01b031663dbfe7c196040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa7919061467b565b610280830152604051636d154ea560e01b81526001600160a01b0382811660048301528e1690636d154ea590602401602060405180830381865afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301791906145d0565b15156102a083015287518290899089908110613035576130356145aa565b6020026020010181905250868061304b906146aa565b975050505050505b8061305d816146aa565b9150506124a2565b5091979650505050505050565b606080600083516001600160401b0381111561309057613090613f3f565b6040519080825280602002602001820160405280156130f557816020015b6130e26040518060a00160405280600081526020016000815260200160608152602001606081526020016000151581525090565b8152602001906001900390816130ae5790505b509050600084516001600160401b0381111561311357613113613f3f565b60405190808252806020026020018201604052801561313c578160200160208202803683370190505b50905060005b855181101561326e57306001600160a01b03166359d2fea687838151811061316c5761316c6145aa565b6020026020010151604001516040518263ffffffff1660e01b81526004016131a391906001600160a01b0391909116815260200190565b6000604051808303816000875af19250505080156131e357506040513d6000823e601f3d908101601f191682016040526131e091908101906149db565b60015b6132105760018282815181106131fb576131fb6145aa565b9115156020928302919091019091015261325c565b6040518060a0016040528086815260200185815260200184815260200183815260200182151581525088878151811061324b5761324b6145aa565b602002602001018190525050505050505b80613266816146aa565b915050613142565b509094909350915050565b606080739f8f72aa9304c8b593d555f12ef6589cc3a579a26001600160a01b03841614156132e4576040518060400160405280600581526020016426b0b5b2b960d91b8152506040518060400160405280600381526020016226a5a960e91b81525091509150915091565b73b8c77482e45f1f44de1745f52c74426c631bdd526001600160a01b038416141561334a576040518060400160405280600381526020016221272160e91b8152506040518060400160405280600381526020016221272160e91b81525091509150915091565b60008390506000816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561338f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133b79190810190614ad6565b90506000826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156133f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134219190810190614ad6565b9050856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561347d575060408051601f3d908101601f1916820190925261347a91810190614865565b60015b613486576138ae565b604051692ab734b9bbb0b8102b1960b11b6020820152600090602a0160405160208183030381529060405280519060200120846040516020016134c99190614b0a565b6040516020818303038152906040528051906020012014801561353b5750604051652aa72496ab1960d11b602082015260260160405160208183030381529060405280519060200120836040516020016135239190614b0a565b60405160208183030381529060405280519060200120145b90506000811580156135a857506040517129bab9b434a9bbb0b8102628102a37b5b2b760711b602082015260320160405160208183030381529060405280519060200120856040516020016135909190614b0a565b60405160208183030381529060405280519060200120145b80156136005750604051620534c560ec1b602082015260230160405160208183030381529060405280519060200120846040516020016135e89190614b0a565b60405160208183030381529060405280519060200120145b9050818061360b5750805b156138aa57600083905060008a6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136799190614865565b9050826136a6576040518060400160405280600881526020016702ab734b9bbb0b8160c51b8152506136ca565b6040518060400160405280600a815260200169029bab9b434a9bbb0b8160b51b8152505b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015613708573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137309190810190614ad6565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561376e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137969190810190614ad6565b6040516020016137a893929190614b26565b6040516020818303038152906040529650816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156137f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261381f9190810190614ad6565b816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561385d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138859190810190614ad6565b604051602001613896929190614b86565b604051602081830303815290604052955050505b5050505b909590945092505050565b6040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b828054613906906143f6565b90600052602060002090601f016020900481019282613928576000855561396e565b82601f1061394157805160ff191683800117855561396e565b8280016001018555821561396e579182015b8281111561396e578251825591602001919060010190613953565b5061397a929150613a44565b5090565b604051806102c0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b5b8082111561397a5760008155600101613a45565b60005b83811015613a74578181015183820152602001613a5c565b8381111561166c5750506000910152565b60008151808452613a9d816020860160208601613a59565b601f01601f19169290920160200192915050565b602081526000613ac46020830184613a85565b9392505050565b6001600160a01b0381168114613ae057600080fd5b50565b600060208284031215613af557600080fd5b8135613ac481613acb565b600081518084526020808501945080840160005b83811015613b3057815187529582019590820190600101613b14565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613065578284038952815160a08151818752613b7b82880182613a85565b838901516001600160a01b03908116898b01526040808601519091169089015260608085015190890152608093840151939097019290925250509784019790840190600101613b59565b604081526000613bd86040830185613b00565b8281036020840152613bea8185613b3b565b95945050505050565b60008060408385031215613c0657600080fd5b8235613c1181613acb565b91506020830135613c2181613acb565b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613d9e57888303603f19018552815180516001600160a01b031684526102c0818901516001600160a01b038116868b015250878201518189870152613c9e82870182613a85565b91505060608083015186830382880152613cb88382613a85565b6080858101519089015260a0808601519089015260c0808601519089015260e08086015190890152610100808601519089015261012080860151908901526101408086015190890152610160808601519089015261018080860151908901526101a0808601511515908901526101c080860151908901526101e08086015190890152610200808601516001600160a01b03169089015261022080860151908901526102408086015190890152610260808601519089015261028080860151908901526102a094850151151594909701939093525050509386019390860190600101613c53565b509098975050505050505050565b600081518084526020808501945080840160005b83811015613b305781516001600160a01b031687529582019590820190600101613dc0565b600081518084526020808501808196508360051b8101915082860160005b85811015613065578284038952613e1b848351613a85565b98850198935090840190600101613e03565b600081518084526020808501945080840160005b83811015613b30578151151587529582019590820190600101613e41565b60006080808352613e7281840188613b00565b602084820381860152613e858289613b3b565b91506040858303818701528288518085528385019150838160051b860101848b0160005b83811015613f1a57601f19888403018552815160a0815185528882015189860152878201518189870152613edf82870182613dac565b91505060608083015186830382880152613ef98382613de5565b938d01511515968d0196909652505094870194925090860190600101613ea9565b505088810360608a0152613f2e818b613e2d565b9d9c50505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613f7757613f77613f3f565b60405290565b604051608081016001600160401b0381118282101715613f7757613f77613f3f565b604051601f8201601f191681016001600160401b0381118282101715613fc757613fc7613f3f565b604052919050565b60006001600160401b03821115613fe857613fe8613f3f565b5060051b60200190565b6000806040838503121561400557600080fd5b82356001600160401b0381111561401b57600080fd5b8301601f8101851361402c57600080fd5b8035602061404161403c83613fcf565b613f9f565b82815260059290921b8301810191818101908884111561406057600080fd5b938201935b8385101561408757843561407881613acb565b82529382019390820190614065565b98969091013596505050505050565b600081518084526020808501945080840160005b83811015613b3057815180516001600160a01b0316885283810151848901526040808201519089015260609081015190880152608090960195908201906001016140aa565b600081518084526020808501808196508360051b8101915082860160005b85811015613065578284038952614125848351614096565b9885019893509084019060010161410d565b60808152600061414a60808301876140ef565b828103602084015261415c8187613b00565b905082810360408401526141708186613b00565b905082810360608401526141848185613e2d565b979650505050505050565b85815284602082015260a0604082015260006141ae60a0830186613dac565b82810360608401526141c08186613de5565b91505082151560808301529695505050505050565b60006001600160401b038211156141ee576141ee613f3f565b50601f01601f191660200190565b600082601f83011261420d57600080fd5b813561421b61403c826141d5565b81815284602083860101111561423057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561426257600080fd5b833561426d81613acb565b925060208401356001600160401b038082111561428957600080fd5b614295878388016141fc565b935060408601359150808211156142ab57600080fd5b506142b8868287016141fc565b9150509250925092565b600080604083850312156142d557600080fd5b82356142e081613acb565b946020939093013593505050565b6060815260006143016060830186614096565b60208301949094525060400152919050565b8015158114613ae057600080fd5b60006020828403121561433357600080fd5b8135613ac481614313565b60006020828403121561435057600080fd5b5035919050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156143995781516001600160a01b031684529284019290840190600101614374565b505050838103828501526143ad81896140ef565b91505082810360408401526143c28187613b00565b905082810360608401526143d68186613b00565b905082810360808401526143ea8185613e2d565b98975050505050505050565b600181811c9082168061440a57607f821691505b6020821081141561442b57634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f83011261444257600080fd5b815161445061403c826141d5565b81815284602083860101111561446557600080fd5b610955826020830160208701613a59565b600082601f83011261448757600080fd5b8151602061449761403c83613fcf565b82815260059290921b840181019181810190868411156144b657600080fd5b8286015b8481101561456b5780516001600160401b03808211156144da5760008081fd5b9088019060a0828b03601f19018113156144f45760008081fd5b6144fc613f55565b878401518381111561450e5760008081fd5b61451c8d8a83880101614431565b825250604092508284015161453081613acb565b8189015260608481015161454381613acb565b93820193909352608084810151938201939093529201519082015283529183019183016144ba565b509695505050505050565b60006020828403121561458857600080fd5b81516001600160401b0381111561459e57600080fd5b61095584828501614476565b634e487b7160e01b600052603260045260246000fd5b80516145cb81614313565b919050565b6000602082840312156145e257600080fd5b8151613ac481614313565b6000602080838503121561460057600080fd5b82516001600160401b0381111561461657600080fd5b8301601f8101851361462757600080fd5b805161463561403c82613fcf565b81815260059190911b8201830190838101908783111561465457600080fd5b928401925b8284101561418457835161466c81613acb565b82529284019290840190614659565b60006020828403121561468d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156146be576146be614694565b5060010190565b600080604083850312156146d857600080fd5b82516001600160401b03808211156146ef57600080fd5b818501915085601f83011261470357600080fd5b8151602061471361403c83613fcf565b82815260059290921b8401810191818101908984111561473257600080fd5b948201945b8386101561475057855182529482019490820190614737565b9188015191965090935050508082111561476957600080fd5b5061477685828601614476565b9150509250929050565b6000806000606080858703121561479657600080fd5b84516001600160401b038111156147ac57600080fd5b8501601f810187136147bd57600080fd5b805160206147cd61403c83613fcf565b82815260079290921b8301810191818101908a8411156147ec57600080fd5b938201935b8385101561484a576080858c03121561480a5760008081fd5b614812613f7d565b855161481d81613acb565b815285840151848201526040808701519082015286860151878201528252608090940193908201906147f1565b91890151604090990151919a98995090979650505050505050565b60006020828403121561487757600080fd5b8151613ac481613acb565b6000806040838503121561489557600080fd5b82516148a081614313565b6020939093015192949293505050565b600082198211156148c3576148c3614694565b500190565b6000828210156148da576148da614694565b500390565b60008160001904831182151516156148f9576148f9614694565b500290565b60008261491b57634e487b7160e01b600052601260045260246000fd5b500490565b600082601f83011261493157600080fd5b8151602061494161403c83613fcf565b82815260059290921b8401810191818101908684111561496057600080fd5b8286015b8481101561456b57805161497781613acb565b8352918301918301614964565b60006020828403121561499657600080fd5b81516001600160401b038111156149ac57600080fd5b61095584828501614920565b6000602082840312156149ca57600080fd5b815160ff81168114613ac457600080fd5b600080600080600060a086880312156149f357600080fd5b85519450602080870151945060408701516001600160401b0380821115614a1957600080fd5b614a258a838b01614920565b95506060890151915080821115614a3b57600080fd5b818901915089601f830112614a4f57600080fd5b8151614a5d61403c82613fcf565b81815260059190911b8301840190848101908c831115614a7c57600080fd5b8585015b83811015614ab457805185811115614a985760008081fd5b614aa68f89838a0101614431565b845250918601918601614a80565b50809750505050505050614aca608087016145c0565b90509295509295909350565b600060208284031215614ae857600080fd5b81516001600160401b03811115614afe57600080fd5b61095584828501614431565b60008251614b1c818460208701613a59565b9190910192915050565b60008451614b38818460208901613a59565b845190830190614b4c818360208901613a59565b602f60f81b91019081528351614b69816001840160208801613a59565b620204c560ec1b6001929091019182015260040195945050505050565b60008351614b98818460208801613a59565b602d60f81b9083019081528351614bb6816001840160208801613a59565b0160010194935050505056fea2646970667358221220376ec0a90385225dcd9c4c4e600c0e61c486e0f95ec69f2bdc5c7417b522783d64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806370733375116100a2578063c3530a6311610071578063c3530a6314610251578063c41c2f2414610264578063d0a164fb1461028f578063d64996e514610297578063dedfe22f146102aa57600080fd5b806370733375146101ff578063906571471461021257806395d89b41146102275780639c00a3d41461022f57600080fd5b806351678684116100de5780635167868414610182578063586f6c10146101a557806359d2fea6146101c8578063635629e6146101ec57600080fd5b806306fdde03146101105780630b9c80bd1461012e5780630c5eb5a41461014f57806327e16c1f1461016f575b600080fd5b6101186102ce565b6040516101259190613ab1565b60405180910390f35b61014161013c366004613ae3565b61035c565b604051610125929190613bc5565b61016261015d366004613bf3565b6108d5565b6040516101259190613c2c565b61016261017d366004613ae3565b61095d565b610195610190366004613ae3565b6109d5565b6040516101259493929190613e5f565b6101b86101b3366004613ff2565b610a78565b6040516101259493929190614137565b6101db6101d6366004613ae3565b610cfb565b60405161012595949392919061418f565b6101956101fa366004613ae3565b6114d5565b61019561020d366004613ae3565b6114e7565b61022561022036600461424d565b6114f9565b005b610118611672565b61024261023d3660046142c2565b61167f565b604051610125939291906142ee565b61014161025f366004613ae3565b611db3565b600354610277906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b6101956120d0565b6101956102a5366004614321565b612175565b6102bd6102b836600461433e565b6121b5565b604051610125959493929190614357565b600180546102db906143f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610307906143f6565b80156103545780601f1061032957610100808354040283529160200191610354565b820191906000526020600020905b81548152906001019060200180831161033757829003601f168201915b505050505081565b6060806000600360009054906101000a90046001600160a01b03166001600160a01b031663d88ff1f46040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103dc9190810190614576565b90506000805b82518110156105d25760008382815181106103ff576103ff6145aa565b6020026020010151604001519050806001600160a01b03166316dc15fe886040518263ffffffff1660e01b815260040161044891906001600160a01b0391909116815260200190565b602060405180830381865afa925050508015610481575060408051601f3d908101601f1916820190925261047e918101906145d0565b60015b61048a576105bf565b80156105bd576000826001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f891908101906145ed565b905060005b81518110156105ba57600082828151811061051a5761051a6145aa565b60209081029190910101516040516370a0823160e01b81526001600160a01b038d81166004830152909116906370a0823190602401602060405180830381865afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610590919061467b565b11156105a857856105a0816146aa565b9650506105ba565b806105b2816146aa565b9150506104fd565b50505b505b50806105ca816146aa565b9150506103e2565b506000816001600160401b038111156105ed576105ed613f3f565b604051908082528060200260200182016040528015610616578160200160208202803683370190505b5090506000826001600160401b0381111561063357610633613f3f565b60405190808252806020026020018201604052801561066c57816020015b6106596138b9565b8152602001906001900390816106515790505b5090506000805b85518110156108c7576000868281518110610690576106906145aa565b6020026020010151604001519050806001600160a01b03166316dc15fe8b6040518263ffffffff1660e01b81526004016106d991906001600160a01b0391909116815260200190565b602060405180830381865afa925050508015610712575060408051601f3d908101601f1916820190925261070f918101906145d0565b60015b61071b576108b4565b80156108b2576000826001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078991908101906145ed565b905060005b81518110156108af5760008282815181106107ab576107ab6145aa565b60200260200101516001600160a01b03166370a082318f6040518263ffffffff1660e01b81526004016107ed91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e919061467b565b111561089d5784888781518110610847576108476145aa565b602002602001018181525050898581518110610865576108656145aa565b602002602001015187878151811061087f5761087f6145aa565b60200260200101819052508580610895906146aa565b9650506108af565b806108a7816146aa565b91505061078e565b50505b505b50806108bf816146aa565b915050610673565b509197909650945050505050565b604051632aff3bff60e21b81526001600160a01b03828116600483015260609160009161095591869182169063abfceffc90602401600060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261094f91908101906145ed565b85612312565b949350505050565b60606109cf82836001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c991908101906145ed565b33612312565b92915050565b6003546040516351f6c8e360e11b81526001600160a01b03838116600483015260609283928392839260009283929091169063a3ed91c6906024015b600060405180830381865afa158015610a2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5691908101906146c5565b91509150600080610a6683613072565b949a9399509750929550909350505050565b606080606080600086516001600160401b03811115610a9957610a99613f3f565b604051908082528060200260200182016040528015610acc57816020015b6060815260200190600190039081610ab75790505b509050600087516001600160401b03811115610aea57610aea613f3f565b604051908082528060200260200182016040528015610b13578160200160208202803683370190505b509050600088516001600160401b03811115610b3157610b31613f3f565b604051908082528060200260200182016040528015610b5a578160200160208202803683370190505b509050600089516001600160401b03811115610b7857610b78613f3f565b604051908082528060200260200182016040528015610ba1578160200160208202803683370190505b50905060005b8a51811015610cea57306001600160a01b0316639c00a3d48c8381518110610bd157610bd16145aa565b60200260200101518c6040518363ffffffff1660e01b8152600401610c0b9291906001600160a01b03929092168252602082015260400190565b6000604051808303816000875af1925050508015610c4b57506040513d6000823e601f3d908101601f19168201604052610c489190810190614780565b60015b610c78576001828281518110610c6357610c636145aa565b91151560209283029190910190910152610cd8565b82888581518110610c8b57610c8b6145aa565b602002602001018190525081878581518110610ca957610ca96145aa565b60200260200101818152505080868581518110610cc857610cc86145aa565b6020026020010181815250505050505b80610ce2816146aa565b915050610ba7565b509299919850965090945092505050565b60008060608060008060009050600080886001600160a01b031663b0772d0b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7191908101906145ed565b9050600081516001600160401b03811115610d8e57610d8e613f3f565b604051908082528060200260200182016040528015610db7578160200160208202803683370190505b509050600082516001600160401b03811115610dd557610dd5613f3f565b604051908082528060200260200182016040528015610e0857816020015b6060815260200190600190039081610df35790505b50905060008b6001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190614865565b905060005b84518110156113cd576000858281518110610e9157610e916145aa565b6020026020010151905060008e6001600160a01b0316638e8f294b836040518263ffffffff1660e01b8152600401610ed891906001600160a01b0391909116815260200190565b6040805180830381865afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f189190614882565b50905080610f275750506113bb565b6000826001600160a01b03166373acee986040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d919061467b565b90506000836001600160a01b031663dc028ab16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff3919061467b565b846001600160a01b03166361feacff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611055919061467b565b856001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b7919061467b565b6110c191906148b0565b6110cb91906148b0565b82856001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e919061467b565b61113891906148b0565b61114291906148c8565b60405163fc57d4df60e01b81526001600160a01b03868116600483015291925060009188169063fc57d4df90602401602060405180830381865afa15801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b2919061467b565b9050670de0b6b3a76400006111c782856148df565b6111d191906148fe565b6111db908d6148b0565b9b50670de0b6b3a76400006111f082846148df565b6111fa91906148fe565b611204908c6148b0565b9a50846001600160a01b031663ac784ddc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126891906145d0565b156112df576000898781518110611281576112816145aa565b60200260200101906001600160a01b031690816001600160a01b0316815250506040518060400160405280600381526020016208aa8960eb1b8152508887815181106112cf576112cf6145aa565b60200260200101819052506113b5565b846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190614865565b898781518110611353576113536145aa565b60200260200101906001600160a01b031690816001600160a01b031681525050611395898781518110611388576113886145aa565b6020026020010151613279565b90508887815181106113a9576113a96145aa565b60200260200101819052505b50505050505b806113c5816146aa565b915050610e74565b506000600360009054906101000a90046001600160a01b03166001600160a01b03166343e20a1d8e6001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190614865565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be91906145d0565b959d969c50929a5090985092965092945050505050565b606080606080600080610a568761035c565b606080606080600080610a5687611db3565b600054610100900460ff166115145760005460ff1615611518565b303b155b6115805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156115a2576000805461ffff19166101011790555b6001600160a01b0384166116175760405162461bcd60e51b815260206004820152603660248201527f46757365506f6f6c4469726563746f727920696e7374616e63652063616e6e6f6044820152753a103132903a3432903d32b9379030b2323932b9b99760511b6064820152608401611577565b600380546001600160a01b0319166001600160a01b03861617905582516116459060019060208601906138fa565b5081516116599060029060208501906138fa565b50801561166c576000805461ff00191690555b50505050565b600280546102db906143f6565b60606000806000856001600160a01b03166332abcdbe6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156116c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ec9190810190614984565b90506000805b82518110156119755760008060006117bc8b8c6001600160a01b031663abfceffc898881518110611725576117256145aa565b60200260200101516040518263ffffffff1660e01b815260040161175891906001600160a01b0391909116815260200190565b600060405180830381865afa158015611775573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179d91908101906145ed565b8887815181106117af576117af6145aa565b6020026020010151612312565b905060005b815181101561190b57670de0b6b3a76400008282815181106117e5576117e56145aa565b60200260200101516101e00151838381518110611804576118046145aa565b6020026020010151610160015161181b91906148df565b61182591906148fe565b61182f90856148b0565b9350818181518110611843576118436145aa565b60200260200101516101a00151156118f957670de0b6b3a7640000828281518110611870576118706145aa565b60200260200101516102200151670de0b6b3a7640000848481518110611898576118986145aa565b60200260200101516101e001518585815181106118b7576118b76145aa565b602002602001015161014001516118ce91906148df565b6118d891906148fe565b6118e291906148df565b6118ec91906148fe565b6118f690846148b0565b92505b80611903816146aa565b9150506117c1565b50600080841161192a576ec097ce7bc90715b34b9f1000000000611947565b8361193d84670de0b6b3a76400006148df565b61194791906148fe565b90508a811161195e578561195a816146aa565b9650505b50505050808061196d906146aa565b9150506116f2565b506000816001600160401b0381111561199057611990613f3f565b6040519080825280602002602001820160405280156119f557816020015b6119e2604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b8152602001906001900390816119ae5790505b5090506000805b8451811015611cdc576000806000611ab98d8e6001600160a01b031663abfceffc8b8881518110611a2f57611a2f6145aa565b60200260200101516040518263ffffffff1660e01b8152600401611a6291906001600160a01b0391909116815260200190565b600060405180830381865afa158015611a7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aa791908101906145ed565b8a87815181106117af576117af6145aa565b905060005b8151811015611c0857670de0b6b3a7640000828281518110611ae257611ae26145aa565b60200260200101516101e00151838381518110611b0157611b016145aa565b60200260200101516101600151611b1891906148df565b611b2291906148fe565b611b2c90856148b0565b9350818181518110611b4057611b406145aa565b60200260200101516101a0015115611bf657670de0b6b3a7640000828281518110611b6d57611b6d6145aa565b60200260200101516102200151670de0b6b3a7640000848481518110611b9557611b956145aa565b60200260200101516101e00151858581518110611bb457611bb46145aa565b60200260200101516101400151611bcb91906148df565b611bd591906148fe565b611bdf91906148df565b611be991906148fe565b611bf390846148b0565b92505b80611c00816146aa565b915050611abe565b506000808411611c27576ec097ce7bc90715b34b9f1000000000611c44565b83611c3a84670de0b6b3a76400006148df565b611c4491906148fe565b90508c811115611c575750505050611cca565b60405180608001604052808a8781518110611c7457611c746145aa565b60200260200101516001600160a01b0316815260200185815260200184815260200182815250878781518110611cac57611cac6145aa565b60200260200101819052508580611cc2906146aa565b965050505050505b80611cd4816146aa565b9150506119fc565b5081896001600160a01b031663e87554466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d40919061467b565b8a6001600160a01b0316634ada90af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da2919061467b565b965096509650505050509250925092565b6060806000600360009054906101000a90046001600160a01b03166001600160a01b031663d88ff1f46040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e339190810190614576565b90506000805b8251811015611f06576000838281518110611e5657611e566145aa565b6020026020010151604001519050806001600160a01b0316639b19251a886040518263ffffffff1660e01b8152600401611e9f91906001600160a01b0391909116815260200190565b602060405180830381865afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee091906145d0565b15611ef35782611eef816146aa565b9350505b5080611efe816146aa565b915050611e39565b506000816001600160401b03811115611f2157611f21613f3f565b604051908082528060200260200182016040528015611f4a578160200160208202803683370190505b5090506000826001600160401b03811115611f6757611f67613f3f565b604051908082528060200260200182016040528015611fa057816020015b611f8d6138b9565b815260200190600190039081611f855790505b5090506000805b85518110156108c7576000868281518110611fc457611fc46145aa565b6020026020010151604001519050806001600160a01b0316639b19251a8b6040518263ffffffff1660e01b815260040161200d91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561202a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204e91906145d0565b156120bd5781858481518110612066576120666145aa565b602002602001018181525050868281518110612084576120846145aa565b602002602001015184848151811061209e5761209e6145aa565b602002602001018190525082806120b4906146aa565b935050506108c7565b50806120c8816146aa565b915050611fa7565b606080606080600080600360009054906101000a90046001600160a01b03166001600160a01b0316634ae26ea16040518163ffffffff1660e01b8152600401600060405180830381865afa15801561212c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261215491908101906146c5565b9150915060008061216483613072565b949993985096509294509092505050565b6003546040516310c51ddf60e11b8152821515600482015260609182918291829160009182916001600160a01b039091169063218a3bbe90602401610a11565b6060806060806060806000600360009054906101000a90046001600160a01b03166001600160a01b0316634ae26ea16040518163ffffffff1660e01b8152600401600060405180830381865afa158015612213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261223b91908101906146c5565b91505080516001600160401b0381111561225757612257613f3f565b604051908082528060200260200182016040528015612280578160200160208202803683370190505b50915060005b81518110156122e9578181815181106122a1576122a16145aa565b6020026020010151604001518382815181106122bf576122bf6145aa565b6001600160a01b0390921660209283029190910190910152806122e1816146aa565b915050612286565b50506000806000806122fb858c610a78565b979e929d50909b5099509497509395505050505050565b60606000805b84518110156123e1576000866001600160a01b0316638e8f294b878481518110612344576123446145aa565b60200260200101516040518263ffffffff1660e01b815260040161237791906001600160a01b0391909116815260200190565b6040805180830381865afa158015612393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b79190614882565b50905080156123ce57826123ca816146aa565b9350505b50806123d9816146aa565b915050612318565b506000816001600160401b038111156123fc576123fc613f3f565b60405190808252806020026020018201604052801561243557816020015b61242261397e565b81526020019060019003908161241a5790505b509050600080876001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249d9190614865565b905060005b8751811015613065576000808a6001600160a01b0316638e8f294b8b85815181106124cf576124cf6145aa565b60200260200101516040518263ffffffff1660e01b815260040161250291906001600160a01b0391909116815260200190565b6040805180830381865afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125429190614882565b9150915081612552575050613053565b61255a61397e565b60008b858151811061256e5761256e6145aa565b6020908102919091018101516001600160a01b03811680855260408051632b1e137760e21b81529051929450909263ac784ddc926004808401938290030181865afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e591906145d0565b1561272957600180546125f7906143f6565b80601f0160208091040260200160405190810160405280929190818152602001828054612623906143f6565b80156126705780601f1061264557610100808354040283529160200191612670565b820191906000526020600020905b81548152906001019060200180831161265357829003601f168201915b505050505082604001819052506002805461268a906143f6565b80601f01602080910402602001604051908101604052809291908181526020018280546126b6906143f6565b80156127035780601f106126d857610100808354040283529160200191612703565b820191906000526020600020905b8154815290600101906020018083116126e657829003601f168201915b50505050506060830152601260808301526001600160a01b038b163160a083015261288f565b806001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278b9190614865565b6001600160a01b0316602083018190526127a481613279565b84604001856060018290528290525050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281691906149b8565b60ff1660808401526040516370a0823160e01b81526001600160a01b038d811660048301528216906370a0823190602401602060405180830381865afa158015612864573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612888919061467b565b60a0840152505b806001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f1919061467b565b8260c0018181525050806001600160a01b031663f8f9da286040518163ffffffff1660e01b8152600401602060405180830381865afa158015612938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295c919061467b565b8260e0018181525050806001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c7919061467b565b82610180018181525050806001600160a01b03166373acee986040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a35919061467b565b82610120018181525050806001600160a01b031663dc028ab16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa1919061467b565b816001600160a01b03166361feacff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b03919061467b565b826001600160a01b0316638f840ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b65919061467b565b612b6f91906148b0565b612b7991906148b0565b826101200151836101800151612b8f91906148b0565b612b9991906148c8565b610100830152604051633af9e66960e01b81526001600160a01b038c81166004830152821690633af9e669906024016020604051808303816000875af1158015612be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0b919061467b565b6101408301526040516395dd919360e01b81526001600160a01b038c811660048301528216906395dd919390602401602060405180830381865afa158015612c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7b919061467b565b61016083015260405163929fe9a160e01b81526001600160a01b038c8116600483015282811660248301528e169063929fe9a190604401602060405180830381865afa158015612ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf391906145d0565b15156101a08301526040805163182df0f560e01b815290516001600160a01b0383169163182df0f59160048083019260209291908290030181865afa158015612d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d64919061467b565b6101c083015260405163fc57d4df60e01b81526001600160a01b03828116600483015287169063fc57d4df90602401602060405180830381865afa158015612db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd4919061467b565b6101e08301526001600160a01b038681166102008401819052602084015160405163addd509960e01b8152921660048301529063addd509990602401602060405180830381865afa925050508015612e49575060408051601f3d908101601f19168201909252612e4691810190614865565b60015b612e5257612e62565b6001600160a01b03166102008301525b8282610220018181525050806001600160a01b031663173b99046040518163ffffffff1660e01b8152600401602060405180830381865afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf919061467b565b82610240018181525050806001600160a01b0316638d02d9a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b919061467b565b82610260018181525050806001600160a01b031663dbfe7c196040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa7919061467b565b610280830152604051636d154ea560e01b81526001600160a01b0382811660048301528e1690636d154ea590602401602060405180830381865afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301791906145d0565b15156102a083015287518290899089908110613035576130356145aa565b6020026020010181905250868061304b906146aa565b975050505050505b8061305d816146aa565b9150506124a2565b5091979650505050505050565b606080600083516001600160401b0381111561309057613090613f3f565b6040519080825280602002602001820160405280156130f557816020015b6130e26040518060a00160405280600081526020016000815260200160608152602001606081526020016000151581525090565b8152602001906001900390816130ae5790505b509050600084516001600160401b0381111561311357613113613f3f565b60405190808252806020026020018201604052801561313c578160200160208202803683370190505b50905060005b855181101561326e57306001600160a01b03166359d2fea687838151811061316c5761316c6145aa565b6020026020010151604001516040518263ffffffff1660e01b81526004016131a391906001600160a01b0391909116815260200190565b6000604051808303816000875af19250505080156131e357506040513d6000823e601f3d908101601f191682016040526131e091908101906149db565b60015b6132105760018282815181106131fb576131fb6145aa565b9115156020928302919091019091015261325c565b6040518060a0016040528086815260200185815260200184815260200183815260200182151581525088878151811061324b5761324b6145aa565b602002602001018190525050505050505b80613266816146aa565b915050613142565b509094909350915050565b606080739f8f72aa9304c8b593d555f12ef6589cc3a579a26001600160a01b03841614156132e4576040518060400160405280600581526020016426b0b5b2b960d91b8152506040518060400160405280600381526020016226a5a960e91b81525091509150915091565b73b8c77482e45f1f44de1745f52c74426c631bdd526001600160a01b038416141561334a576040518060400160405280600381526020016221272160e91b8152506040518060400160405280600381526020016221272160e91b81525091509150915091565b60008390506000816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561338f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133b79190810190614ad6565b90506000826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156133f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134219190810190614ad6565b9050856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561347d575060408051601f3d908101601f1916820190925261347a91810190614865565b60015b613486576138ae565b604051692ab734b9bbb0b8102b1960b11b6020820152600090602a0160405160208183030381529060405280519060200120846040516020016134c99190614b0a565b6040516020818303038152906040528051906020012014801561353b5750604051652aa72496ab1960d11b602082015260260160405160208183030381529060405280519060200120836040516020016135239190614b0a565b60405160208183030381529060405280519060200120145b90506000811580156135a857506040517129bab9b434a9bbb0b8102628102a37b5b2b760711b602082015260320160405160208183030381529060405280519060200120856040516020016135909190614b0a565b60405160208183030381529060405280519060200120145b80156136005750604051620534c560ec1b602082015260230160405160208183030381529060405280519060200120846040516020016135e89190614b0a565b60405160208183030381529060405280519060200120145b9050818061360b5750805b156138aa57600083905060008a6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136799190614865565b9050826136a6576040518060400160405280600881526020016702ab734b9bbb0b8160c51b8152506136ca565b6040518060400160405280600a815260200169029bab9b434a9bbb0b8160b51b8152505b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015613708573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137309190810190614ad6565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561376e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526137969190810190614ad6565b6040516020016137a893929190614b26565b6040516020818303038152906040529650816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156137f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261381f9190810190614ad6565b816001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561385d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138859190810190614ad6565b604051602001613896929190614b86565b604051602081830303815290604052955050505b5050505b909590945092505050565b6040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b828054613906906143f6565b90600052602060002090601f016020900481019282613928576000855561396e565b82601f1061394157805160ff191683800117855561396e565b8280016001018555821561396e579182015b8281111561396e578251825591602001919060010190613953565b5061397a929150613a44565b5090565b604051806102c0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b5b8082111561397a5760008155600101613a45565b60005b83811015613a74578181015183820152602001613a5c565b8381111561166c5750506000910152565b60008151808452613a9d816020860160208601613a59565b601f01601f19169290920160200192915050565b602081526000613ac46020830184613a85565b9392505050565b6001600160a01b0381168114613ae057600080fd5b50565b600060208284031215613af557600080fd5b8135613ac481613acb565b600081518084526020808501945080840160005b83811015613b3057815187529582019590820190600101613b14565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613065578284038952815160a08151818752613b7b82880182613a85565b838901516001600160a01b03908116898b01526040808601519091169089015260608085015190890152608093840151939097019290925250509784019790840190600101613b59565b604081526000613bd86040830185613b00565b8281036020840152613bea8185613b3b565b95945050505050565b60008060408385031215613c0657600080fd5b8235613c1181613acb565b91506020830135613c2181613acb565b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613d9e57888303603f19018552815180516001600160a01b031684526102c0818901516001600160a01b038116868b015250878201518189870152613c9e82870182613a85565b91505060608083015186830382880152613cb88382613a85565b6080858101519089015260a0808601519089015260c0808601519089015260e08086015190890152610100808601519089015261012080860151908901526101408086015190890152610160808601519089015261018080860151908901526101a0808601511515908901526101c080860151908901526101e08086015190890152610200808601516001600160a01b03169089015261022080860151908901526102408086015190890152610260808601519089015261028080860151908901526102a094850151151594909701939093525050509386019390860190600101613c53565b509098975050505050505050565b600081518084526020808501945080840160005b83811015613b305781516001600160a01b031687529582019590820190600101613dc0565b600081518084526020808501808196508360051b8101915082860160005b85811015613065578284038952613e1b848351613a85565b98850198935090840190600101613e03565b600081518084526020808501945080840160005b83811015613b30578151151587529582019590820190600101613e41565b60006080808352613e7281840188613b00565b602084820381860152613e858289613b3b565b91506040858303818701528288518085528385019150838160051b860101848b0160005b83811015613f1a57601f19888403018552815160a0815185528882015189860152878201518189870152613edf82870182613dac565b91505060608083015186830382880152613ef98382613de5565b938d01511515968d0196909652505094870194925090860190600101613ea9565b505088810360608a0152613f2e818b613e2d565b9d9c50505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613f7757613f77613f3f565b60405290565b604051608081016001600160401b0381118282101715613f7757613f77613f3f565b604051601f8201601f191681016001600160401b0381118282101715613fc757613fc7613f3f565b604052919050565b60006001600160401b03821115613fe857613fe8613f3f565b5060051b60200190565b6000806040838503121561400557600080fd5b82356001600160401b0381111561401b57600080fd5b8301601f8101851361402c57600080fd5b8035602061404161403c83613fcf565b613f9f565b82815260059290921b8301810191818101908884111561406057600080fd5b938201935b8385101561408757843561407881613acb565b82529382019390820190614065565b98969091013596505050505050565b600081518084526020808501945080840160005b83811015613b3057815180516001600160a01b0316885283810151848901526040808201519089015260609081015190880152608090960195908201906001016140aa565b600081518084526020808501808196508360051b8101915082860160005b85811015613065578284038952614125848351614096565b9885019893509084019060010161410d565b60808152600061414a60808301876140ef565b828103602084015261415c8187613b00565b905082810360408401526141708186613b00565b905082810360608401526141848185613e2d565b979650505050505050565b85815284602082015260a0604082015260006141ae60a0830186613dac565b82810360608401526141c08186613de5565b91505082151560808301529695505050505050565b60006001600160401b038211156141ee576141ee613f3f565b50601f01601f191660200190565b600082601f83011261420d57600080fd5b813561421b61403c826141d5565b81815284602083860101111561423057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561426257600080fd5b833561426d81613acb565b925060208401356001600160401b038082111561428957600080fd5b614295878388016141fc565b935060408601359150808211156142ab57600080fd5b506142b8868287016141fc565b9150509250925092565b600080604083850312156142d557600080fd5b82356142e081613acb565b946020939093013593505050565b6060815260006143016060830186614096565b60208301949094525060400152919050565b8015158114613ae057600080fd5b60006020828403121561433357600080fd5b8135613ac481614313565b60006020828403121561435057600080fd5b5035919050565b60a0808252865190820181905260009060209060c0840190828a01845b828110156143995781516001600160a01b031684529284019290840190600101614374565b505050838103828501526143ad81896140ef565b91505082810360408401526143c28187613b00565b905082810360608401526143d68186613b00565b905082810360808401526143ea8185613e2d565b98975050505050505050565b600181811c9082168061440a57607f821691505b6020821081141561442b57634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f83011261444257600080fd5b815161445061403c826141d5565b81815284602083860101111561446557600080fd5b610955826020830160208701613a59565b600082601f83011261448757600080fd5b8151602061449761403c83613fcf565b82815260059290921b840181019181810190868411156144b657600080fd5b8286015b8481101561456b5780516001600160401b03808211156144da5760008081fd5b9088019060a0828b03601f19018113156144f45760008081fd5b6144fc613f55565b878401518381111561450e5760008081fd5b61451c8d8a83880101614431565b825250604092508284015161453081613acb565b8189015260608481015161454381613acb565b93820193909352608084810151938201939093529201519082015283529183019183016144ba565b509695505050505050565b60006020828403121561458857600080fd5b81516001600160401b0381111561459e57600080fd5b61095584828501614476565b634e487b7160e01b600052603260045260246000fd5b80516145cb81614313565b919050565b6000602082840312156145e257600080fd5b8151613ac481614313565b6000602080838503121561460057600080fd5b82516001600160401b0381111561461657600080fd5b8301601f8101851361462757600080fd5b805161463561403c82613fcf565b81815260059190911b8201830190838101908783111561465457600080fd5b928401925b8284101561418457835161466c81613acb565b82529284019290840190614659565b60006020828403121561468d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156146be576146be614694565b5060010190565b600080604083850312156146d857600080fd5b82516001600160401b03808211156146ef57600080fd5b818501915085601f83011261470357600080fd5b8151602061471361403c83613fcf565b82815260059290921b8401810191818101908984111561473257600080fd5b948201945b8386101561475057855182529482019490820190614737565b9188015191965090935050508082111561476957600080fd5b5061477685828601614476565b9150509250929050565b6000806000606080858703121561479657600080fd5b84516001600160401b038111156147ac57600080fd5b8501601f810187136147bd57600080fd5b805160206147cd61403c83613fcf565b82815260079290921b8301810191818101908a8411156147ec57600080fd5b938201935b8385101561484a576080858c03121561480a5760008081fd5b614812613f7d565b855161481d81613acb565b815285840151848201526040808701519082015286860151878201528252608090940193908201906147f1565b91890151604090990151919a98995090979650505050505050565b60006020828403121561487757600080fd5b8151613ac481613acb565b6000806040838503121561489557600080fd5b82516148a081614313565b6020939093015192949293505050565b600082198211156148c3576148c3614694565b500190565b6000828210156148da576148da614694565b500390565b60008160001904831182151516156148f9576148f9614694565b500290565b60008261491b57634e487b7160e01b600052601260045260246000fd5b500490565b600082601f83011261493157600080fd5b8151602061494161403c83613fcf565b82815260059290921b8401810191818101908684111561496057600080fd5b8286015b8481101561456b57805161497781613acb565b8352918301918301614964565b60006020828403121561499657600080fd5b81516001600160401b038111156149ac57600080fd5b61095584828501614920565b6000602082840312156149ca57600080fd5b815160ff81168114613ac457600080fd5b600080600080600060a086880312156149f357600080fd5b85519450602080870151945060408701516001600160401b0380821115614a1957600080fd5b614a258a838b01614920565b95506060890151915080821115614a3b57600080fd5b818901915089601f830112614a4f57600080fd5b8151614a5d61403c82613fcf565b81815260059190911b8301840190848101908c831115614a7c57600080fd5b8585015b83811015614ab457805185811115614a985760008081fd5b614aa68f89838a0101614431565b845250918601918601614a80565b50809750505050505050614aca608087016145c0565b90509295509295909350565b600060208284031215614ae857600080fd5b81516001600160401b03811115614afe57600080fd5b61095584828501614431565b60008251614b1c818460208701613a59565b9190910192915050565b60008451614b38818460208901613a59565b845190830190614b4c818360208901613a59565b602f60f81b91019081528351614b69816001840160208801613a59565b620204c560ec1b6001929091019182015260040195945050505050565b60008351614b98818460208801613a59565b602d60f81b9083019081528351614bb6816001840160208801613a59565b0160010194935050505056fea2646970667358221220376ec0a90385225dcd9c4c4e600c0e61c486e0f95ec69f2bdc5c7417b522783d64736f6c634300080b0033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "kind": "dev",
    "methods": {
      "getPoolAssetsByUser(address,address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "getPoolAssetsWithData(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.",
        "params": {
          "comptroller": "The Comptroller proxy contract of the Fuse pool."
        },
        "returns": {
          "_0": "An array of Fuse pool assets."
        }
      },
      "getPoolUsersWithData(address,uint256)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.",
        "params": {
          "comptroller": "The Comptroller proxy contract of the Fuse pool.",
          "maxHealth": "The maximum health (scaled by 1e18) for which to return data."
        },
        "returns": {
          "_0": "An array of Fuse pool users, the pool's close factor, and the pool's liquidation incentive."
        }
      },
      "getPoolUsersWithData(address[],uint256)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.",
        "params": {
          "comptrollers": "The Comptroller proxy contracts of the Fuse pools.",
          "maxHealth": "The maximum health (scaled by 1e18) for which to return data."
        },
        "returns": {
          "_0": "An array of arrays of Fuse pool users, an array of pools' close factors, an array of pools' liquidation incentives, and an array of booleans indicating if retrieving each pool's data failed."
        }
      },
      "getPoolsByAccountWithData(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state."
      },
      "getPoolsBySupplier(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "getPoolsBySupplierWithData(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state."
      },
      "getPublicPoolUsersWithData(uint256)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.",
        "params": {
          "maxHealth": "The maximum health (scaled by 1e18) for which to return data."
        },
        "returns": {
          "_0": "An array of pools' Comptroller proxy addresses, an array of arrays of Fuse pool users, an array of pools' close factors, an array of pools' liquidation incentives, and an array of booleans indicating if retrieving each pool's data failed."
        }
      },
      "getPublicPoolsByVerificationWithData(bool)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state."
      },
      "getPublicPoolsWithData()": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state."
      },
      "getWhitelistedPoolsByAccount(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive."
      },
      "getWhitelistedPoolsByAccountWithData(address)": {
        "details": "This function is not designed to be called in a transaction: it is too gas-intensive. Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state."
      }
    },
    "title": "FusePoolLens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "directory()": {
        "notice": "`FusePoolDirectory` contract object."
      },
      "getPoolAssetsByUser(address,address)": {
        "notice": "Returns arrays of FusePoolAsset for a specific user"
      },
      "getPoolAssetsWithData(address)": {
        "notice": "Returns the assets of the specified Fuse pool."
      },
      "getPoolSummary(address)": {
        "notice": "Returns total supply balance (in ETH), total borrow balance (in ETH), underlying token addresses, and underlying token symbols of a Fuse pool."
      },
      "getPoolUsersWithData(address,uint256)": {
        "notice": "Returns the borrowers of the specified Fuse pool."
      },
      "getPoolUsersWithData(address[],uint256)": {
        "notice": "Returns the users of the specified Fuse pools."
      },
      "getPoolsByAccountWithData(address)": {
        "notice": "Returns arrays of the indexes of Fuse pools created by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed."
      },
      "getPoolsBySupplier(address)": {
        "notice": "Returns arrays of Fuse pool indexes and data supplied to by `account`."
      },
      "getPoolsBySupplierWithData(address)": {
        "notice": "Returns arrays of the indexes of Fuse pools supplied to by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed."
      },
      "getPublicPoolUsersWithData(uint256)": {
        "notice": "Returns the users of each public Fuse pool."
      },
      "getPublicPoolsByVerificationWithData(bool)": {
        "notice": "Returns arrays of all whitelisted public Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed."
      },
      "getPublicPoolsWithData()": {
        "notice": "Returns arrays of all public Fuse pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed."
      },
      "getWhitelistedPoolsByAccount(address)": {
        "notice": "Returns arrays of Fuse pool indexes and data with a whitelist containing `account`. Note that the whitelist does not have to be enforced."
      },
      "getWhitelistedPoolsByAccountWithData(address)": {
        "notice": "Returns arrays of the indexes of Fuse pools with a whitelist containing `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed."
      },
      "initialize(address,string,string)": {
        "notice": "Constructor to set the `FusePoolDirectory` contract object."
      }
    },
    "notice": "FusePoolLens returns data on Fuse interest rate pools in mass for viewing by dApps, bots, etc.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 212,
        "contract": "contracts/FusePoolLens.sol:FusePoolLens",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 215,
        "contract": "contracts/FusePoolLens.sol:FusePoolLens",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3550,
        "contract": "contracts/FusePoolLens.sol:FusePoolLens",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3552,
        "contract": "contracts/FusePoolLens.sol:FusePoolLens",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3556,
        "contract": "contracts/FusePoolLens.sol:FusePoolLens",
        "label": "directory",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(FusePoolDirectory)3494"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FusePoolDirectory)3494": {
        "encoding": "inplace",
        "label": "contract FusePoolDirectory",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}