{
  "address": "0x659A923259cAF09aceFd258E57EaCAAFD422e8cd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_poolUnderlyings",
          "type": "address[][]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "registerPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "underlyingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x728de0e657f08433c9c0bdce6ed8d4e561dafc36ce712bf61ba660d2a3e4e300",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "903017",
    "logsBloom": "0x
    "blockHash": "0x8d316b499a74d3cdded497f35320f80250ee044df02e2611e539ed6184b70441",
    "transactionHash": "0x728de0e657f08433c9c0bdce6ed8d4e561dafc36ce712bf61ba660d2a3e4e300",
    "logs": [],
    "blockNumber": 239034,
    "cumulativeGasUsed": "903017",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ef279da460d9cdb92d75f348cff1bd5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_poolUnderlyings\",\"type\":\"address[][]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"underlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"details\":\"Implements the `PriceOracle` interface used by Fuse pools (and Compound v2).\",\"kind\":\"dev\",\"methods\":{\"getUnderlyingPrice(address)\":{\"details\":\"Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\",\"returns\":{\"_0\":\"Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\"}},\"initialize(address[],address[],address[][])\":{\"details\":\"Initializes an array of LP tokens and pools if desired.\",\"params\":{\"_lpTokens\":\"Array of LP token addresses.\",\"_pools\":\"Array of pool addresses.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"price(address)\":{\"params\":{\"underlying\":\"The underlying token address for which to get the price (set to zero address for ETH).\"},\"returns\":{\"_0\":\"Price denominated in ETH (scaled by 1e18).\"}},\"registerPool(address,address,address[])\":{\"details\":\"Register the pool given LP token address and set the pool info.\",\"params\":{\"_lpToken\":\"LP token to find the corresponding pool.\",\"_pool\":\"Pool address.\",\"_underlyings\":\"Underlying addresses.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"poolOf\":{\"details\":\"Maps Curve LP token addresses to pool addresses.\"},\"underlyingTokens\":{\"details\":\"Maps Curve LP token addresses to underlying token addresses.\"}},\"title\":\"CurveLpTokenPriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUnderlyingPrice(address)\":{\"notice\":\"Returns the price in ETH of the token underlying `cToken`.\"},\"price(address)\":{\"notice\":\"Get the LP token price price for an underlying token address.\"}},\"notice\":\"CurveLpTokenPriceOracle is a price oracle for Curve LP tokens (using the sender as a root oracle).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol\":\"CurveLpTokenPriceOracleNoRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"contracts/external/compound/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ninterface ICErc20 is ICToken {\\n  function underlying() external view returns (address);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICToken cTokenCollateral\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb4174a86be37f5d7b0e1f02af3f81dfbc22ae8e7598cf9203169133372f2cde7\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ninterface ICToken {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function comptroller() external view returns (address);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function fuseFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf3d448eb93652645ae9fd32453be4651f664d00d218f1d0e4fe181a2a39a27f\",\"license\":\"BSD-3-Clause\"},\"contracts/external/compound/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ICToken.sol\\\";\\n\\ninterface IPriceOracle {\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x501ba6588dc3bbcbcd7629eb294b2249dce97cb78e1c78feb1815d220b488368\",\"license\":\"BSD-3-Clause\"},\"contracts/external/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface ICurvePool {\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 _token_amount,\\n    int128 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function exchange(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f0742ed386a0d6b212c556fb05f2b2c056057daab5539e11c26b5d2c2c2266f\",\"license\":\"UNLICENSED\"},\"contracts/external/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface ICurveRegistry {\\n  function get_n_coins(address lp) external view returns (uint256);\\n\\n  function get_coins(address pool) external view returns (address[8] memory);\\n\\n  function get_pool_from_lp_token(address lp) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4d7ad11f1b8afe43d842e09271afc632031fa655b9941fb740d3c74e87a45d5c\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../external/compound/IPriceOracle.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle is IPriceOracle {\\n  /**\\n   * @notice Get the price of an underlying asset.\\n   * @param underlying The underlying asset to get the price of.\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n   * Zero means the price is unavailable.\\n   */\\n  function price(address underlying) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfdb8a3439685177d0150249ec4984ab05fc8a9e4c9172dc714fbb456d0810d47\",\"license\":\"UNLICENSED\"},\"contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../../external/compound/IPriceOracle.sol\\\";\\nimport \\\"../../external/compound/ICToken.sol\\\";\\nimport \\\"../../external/compound/ICErc20.sol\\\";\\n\\nimport \\\"../../external/curve/ICurveRegistry.sol\\\";\\nimport \\\"../../external/curve/ICurvePool.sol\\\";\\n\\nimport \\\"../BasePriceOracle.sol\\\";\\n\\n/**\\n * @title CurveLpTokenPriceOracle\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice CurveLpTokenPriceOracle is a price oracle for Curve LP tokens (using the sender as a root oracle).\\n * @dev Implements the `PriceOracle` interface used by Fuse pools (and Compound v2).\\n */\\ncontract CurveLpTokenPriceOracleNoRegistry is IPriceOracle, BasePriceOracle, OwnableUpgradeable {\\n  /**\\n   * @dev Maps Curve LP token addresses to underlying token addresses.\\n   */\\n  mapping(address => address[]) public underlyingTokens;\\n\\n  /**\\n   * @dev Maps Curve LP token addresses to pool addresses.\\n   */\\n  mapping(address => address) public poolOf;\\n\\n  /**\\n   * @dev Initializes an array of LP tokens and pools if desired.\\n   * @param _lpTokens Array of LP token addresses.\\n   * @param _pools Array of pool addresses.\\n   */\\n  function initialize(\\n    address[] memory _lpTokens,\\n    address[] memory _pools,\\n    address[][] memory _poolUnderlyings\\n  ) public initializer {\\n    __Ownable_init();\\n    for (uint256 i = 0; i < _lpTokens.length; i++) {\\n      poolOf[_lpTokens[i]] = _pools[i];\\n      underlyingTokens[_lpTokens[i]] = _poolUnderlyings[i];\\n    }\\n  }\\n\\n  /**\\n   * @notice Get the LP token price price for an underlying token address.\\n   * @param underlying The underlying token address for which to get the price (set to zero address for ETH).\\n   * @return Price denominated in ETH (scaled by 1e18).\\n   */\\n  function price(address underlying) external view override returns (uint256) {\\n    return _price(underlying);\\n  }\\n\\n  /**\\n   * @notice Returns the price in ETH of the token underlying `cToken`.\\n   * @dev Implements the `PriceOracle` interface for Fuse pools (and Compound v2).\\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n   */\\n  function getUnderlyingPrice(ICToken cToken) external view override returns (uint256) {\\n    address underlying = ICErc20(address(cToken)).underlying();\\n    // Comptroller needs prices to be scaled by 1e(36 - decimals)\\n    // Since `_price` returns prices scaled by 18 decimals, we must scale them by 1e(36 - 18 - decimals)\\n    return (_price(underlying) * 1e18) / (10**uint256(ERC20Upgradeable(underlying).decimals()));\\n  }\\n\\n  /**\\n   * @dev Fetches the fair LP token/ETH price from Curve, with 18 decimals of precision.\\n   * Source: https://github.com/AlphaFinanceLab/homora-v2/blob/master/contracts/oracle/CurveOracle.sol\\n   * @param lpToken The LP token contract address for price retrieval.\\n   */\\n  function _price(address lpToken) internal view returns (uint256) {\\n    address pool = poolOf[lpToken];\\n    require(pool != address(0), \\\"LP token is not registered.\\\");\\n    address[] memory tokens = underlyingTokens[lpToken];\\n    uint256 minPx = type(uint256).max;\\n    uint256 n = tokens.length;\\n\\n    for (uint256 i = 0; i < n; i++) {\\n      address ulToken = tokens[i];\\n      uint256 tokenPx = BasePriceOracle(msg.sender).price(ulToken);\\n      if (tokenPx < minPx) minPx = tokenPx;\\n    }\\n\\n    require(minPx != type(uint256).max, \\\"No minimum underlying token price found.\\\");\\n    return (minPx * ICurvePool(pool).get_virtual_price()) / 1e18; // Use min underlying token prices\\n  }\\n\\n  /**\\n   * @dev Register the pool given LP token address and set the pool info.\\n   * @param _lpToken LP token to find the corresponding pool.\\n   * @param _pool Pool address.\\n   * @param _underlyings Underlying addresses.\\n   */\\n  function registerPool(\\n    address _lpToken,\\n    address _pool,\\n    address[] memory _underlyings\\n  ) external onlyOwner {\\n    address pool = poolOf[_lpToken];\\n    require(pool == address(0), \\\"This LP token is already registered.\\\");\\n    poolOf[_lpToken] = _pool;\\n    underlyingTokens[_lpToken] = _underlyings;\\n  }\\n}\\n\",\"keccak256\":\"0xc2129feb99d093e7a4b96b9b063e18f0b959efdb971cdbdc286050dddfdbe825\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f57806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063904d4d7511610066578063904d4d75146100f6578063988b1fa714610109578063aea9107814610132578063f2fde38b14610153578063fc57d4df1461016657600080fd5b806301eadec41461009857806327a3c201146100c8578063715018a6146100dd5780638da5cb5b146100e5575b600080fd5b6100ab6100a6366004610a4e565b610179565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004610b59565b6101b1565b005b6100db610381565b6033546001600160a01b03166100ab565b6100db610104366004610c51565b6103b7565b6100ab610117366004610cb3565b6066602052600090815260409020546001600160a01b031681565b610145610140366004610cb3565b6104a4565b6040519081526020016100bf565b6100db610161366004610cb3565b6104b5565b610145610174366004610cb3565b610550565b6065602052816000526040600020818154811061019557600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054610100900460ff166101cc5760005460ff16156101d0565b303b155b6102385760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561025a576000805461ffff19166101011790555b610262610653565b60005b84518110156103685783818151811061028057610280610cd0565b60200260200101516066600087848151811061029e5761029e610cd0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508281815181106102fc576102fc610cd0565b60200260200101516065600087848151811061031a5761031a610cd0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906103559291906109bf565b508061036081610cfc565b915050610265565b50801561037b576000805461ff00191690555b50505050565b6033546001600160a01b031633146103ab5760405162461bcd60e51b815260040161022f90610d17565b6103b5600061068a565b565b6033546001600160a01b031633146103e15760405162461bcd60e51b815260040161022f90610d17565b6001600160a01b038084166000908152606660205260409020541680156104565760405162461bcd60e51b8152602060048201526024808201527f54686973204c5020746f6b656e20697320616c726561647920726567697374656044820152633932b21760e11b606482015260840161022f565b6001600160a01b03848116600090815260666020908152604080832080546001600160a01b0319169488169490941790935560658152919020835161049d928501906109bf565b5050505050565b60006104af826106dc565b92915050565b6033546001600160a01b031633146104df5760405162461bcd60e51b815260040161022f90610d17565b6001600160a01b0381166105445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022f565b61054d8161068a565b50565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610d4c565b9050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610d69565b6106279060ff16600a610e70565b610630826106dc565b61064290670de0b6b3a7640000610e7c565b61064c9190610e9b565b9392505050565b600054610100900460ff1661067a5760405162461bcd60e51b815260040161022f90610ebd565b610682610968565b6103b561098f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03808216600090815260666020526040812054909116806107465760405162461bcd60e51b815260206004820152601b60248201527f4c5020746f6b656e206973206e6f7420726567697374657265642e0000000000604482015260640161022f565b6001600160a01b0383166000908152606560209081526040808320805482518185028101850190935280835291929091908301828280156107b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610792575b5050835193945060001993925060009150505b8181101561087b5760008482815181106107df576107df610cd0565b60209081029190910101516040516315d5220f60e31b81526001600160a01b0382166004820152909150600090339063aea9107890602401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190610f08565b905084811015610866578094505b5050808061087390610cfc565b9150506107c3565b506000198214156108df5760405162461bcd60e51b815260206004820152602860248201527f4e6f206d696e696d756d20756e6465726c79696e6720746f6b656e207072696360448201526732903337bab7321760c11b606482015260840161022f565b670de0b6b3a7640000846001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190610f08565b6109549084610e7c565b61095e9190610e9b565b9695505050505050565b600054610100900460ff166103b55760405162461bcd60e51b815260040161022f90610ebd565b600054610100900460ff166109b65760405162461bcd60e51b815260040161022f90610ebd565b6103b53361068a565b828054828255906000526020600020908101928215610a14579160200282015b82811115610a1457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906109df565b50610a20929150610a24565b5090565b5b80821115610a205760008155600101610a25565b6001600160a01b038116811461054d57600080fd5b60008060408385031215610a6157600080fd5b8235610a6c81610a39565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ab957610ab9610a7a565b604052919050565b600067ffffffffffffffff821115610adb57610adb610a7a565b5060051b60200190565b600082601f830112610af657600080fd5b81356020610b0b610b0683610ac1565b610a90565b82815260059290921b84018101918181019086841115610b2a57600080fd5b8286015b84811015610b4e578035610b4181610a39565b8352918301918301610b2e565b509695505050505050565b600080600060608486031215610b6e57600080fd5b833567ffffffffffffffff80821115610b8657600080fd5b610b9287838801610ae5565b9450602091508186013581811115610ba957600080fd5b610bb588828901610ae5565b945050604086013581811115610bca57600080fd5b8601601f81018813610bdb57600080fd5b8035610be9610b0682610ac1565b81815260059190911b8201840190848101908a831115610c0857600080fd5b8584015b83811015610c4057803586811115610c245760008081fd5b610c328d8983890101610ae5565b845250918601918601610c0c565b508096505050505050509250925092565b600080600060608486031215610c6657600080fd5b8335610c7181610a39565b92506020840135610c8181610a39565b9150604084013567ffffffffffffffff811115610c9d57600080fd5b610ca986828701610ae5565b9150509250925092565b600060208284031215610cc557600080fd5b813561064c81610a39565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d1057610d10610ce6565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610d5e57600080fd5b815161064c81610a39565b600060208284031215610d7b57600080fd5b815160ff8116811461064c57600080fd5b600181815b80851115610dc7578160001904821115610dad57610dad610ce6565b80851615610dba57918102915b93841c9390800290610d91565b509250929050565b600082610dde575060016104af565b81610deb575060006104af565b8160018114610e015760028114610e0b57610e27565b60019150506104af565b60ff841115610e1c57610e1c610ce6565b50506001821b6104af565b5060208310610133831016604e8410600b8410161715610e4a575081810a6104af565b610e548383610d8c565b8060001904821115610e6857610e68610ce6565b029392505050565b600061064c8383610dcf565b6000816000190483118215151615610e9657610e96610ce6565b500290565b600082610eb857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215610f1a57600080fd5b505191905056fea2646970667358221220ab26062d98279d14ab13139c4109f66b209949afd4c902c21b80e47092b91de964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063904d4d7511610066578063904d4d75146100f6578063988b1fa714610109578063aea9107814610132578063f2fde38b14610153578063fc57d4df1461016657600080fd5b806301eadec41461009857806327a3c201146100c8578063715018a6146100dd5780638da5cb5b146100e5575b600080fd5b6100ab6100a6366004610a4e565b610179565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004610b59565b6101b1565b005b6100db610381565b6033546001600160a01b03166100ab565b6100db610104366004610c51565b6103b7565b6100ab610117366004610cb3565b6066602052600090815260409020546001600160a01b031681565b610145610140366004610cb3565b6104a4565b6040519081526020016100bf565b6100db610161366004610cb3565b6104b5565b610145610174366004610cb3565b610550565b6065602052816000526040600020818154811061019557600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054610100900460ff166101cc5760005460ff16156101d0565b303b155b6102385760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561025a576000805461ffff19166101011790555b610262610653565b60005b84518110156103685783818151811061028057610280610cd0565b60200260200101516066600087848151811061029e5761029e610cd0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508281815181106102fc576102fc610cd0565b60200260200101516065600087848151811061031a5761031a610cd0565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906103559291906109bf565b508061036081610cfc565b915050610265565b50801561037b576000805461ff00191690555b50505050565b6033546001600160a01b031633146103ab5760405162461bcd60e51b815260040161022f90610d17565b6103b5600061068a565b565b6033546001600160a01b031633146103e15760405162461bcd60e51b815260040161022f90610d17565b6001600160a01b038084166000908152606660205260409020541680156104565760405162461bcd60e51b8152602060048201526024808201527f54686973204c5020746f6b656e20697320616c726561647920726567697374656044820152633932b21760e11b606482015260840161022f565b6001600160a01b03848116600090815260666020908152604080832080546001600160a01b0319169488169490941790935560658152919020835161049d928501906109bf565b5050505050565b60006104af826106dc565b92915050565b6033546001600160a01b031633146104df5760405162461bcd60e51b815260040161022f90610d17565b6001600160a01b0381166105445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022f565b61054d8161068a565b50565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610d4c565b9050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610d69565b6106279060ff16600a610e70565b610630826106dc565b61064290670de0b6b3a7640000610e7c565b61064c9190610e9b565b9392505050565b600054610100900460ff1661067a5760405162461bcd60e51b815260040161022f90610ebd565b610682610968565b6103b561098f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03808216600090815260666020526040812054909116806107465760405162461bcd60e51b815260206004820152601b60248201527f4c5020746f6b656e206973206e6f7420726567697374657265642e0000000000604482015260640161022f565b6001600160a01b0383166000908152606560209081526040808320805482518185028101850190935280835291929091908301828280156107b057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610792575b5050835193945060001993925060009150505b8181101561087b5760008482815181106107df576107df610cd0565b60209081029190910101516040516315d5220f60e31b81526001600160a01b0382166004820152909150600090339063aea9107890602401602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190610f08565b905084811015610866578094505b5050808061087390610cfc565b9150506107c3565b506000198214156108df5760405162461bcd60e51b815260206004820152602860248201527f4e6f206d696e696d756d20756e6465726c79696e6720746f6b656e207072696360448201526732903337bab7321760c11b606482015260840161022f565b670de0b6b3a7640000846001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190610f08565b6109549084610e7c565b61095e9190610e9b565b9695505050505050565b600054610100900460ff166103b55760405162461bcd60e51b815260040161022f90610ebd565b600054610100900460ff166109b65760405162461bcd60e51b815260040161022f90610ebd565b6103b53361068a565b828054828255906000526020600020908101928215610a14579160200282015b82811115610a1457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906109df565b50610a20929150610a24565b5090565b5b80821115610a205760008155600101610a25565b6001600160a01b038116811461054d57600080fd5b60008060408385031215610a6157600080fd5b8235610a6c81610a39565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ab957610ab9610a7a565b604052919050565b600067ffffffffffffffff821115610adb57610adb610a7a565b5060051b60200190565b600082601f830112610af657600080fd5b81356020610b0b610b0683610ac1565b610a90565b82815260059290921b84018101918181019086841115610b2a57600080fd5b8286015b84811015610b4e578035610b4181610a39565b8352918301918301610b2e565b509695505050505050565b600080600060608486031215610b6e57600080fd5b833567ffffffffffffffff80821115610b8657600080fd5b610b9287838801610ae5565b9450602091508186013581811115610ba957600080fd5b610bb588828901610ae5565b945050604086013581811115610bca57600080fd5b8601601f81018813610bdb57600080fd5b8035610be9610b0682610ac1565b81815260059190911b8201840190848101908a831115610c0857600080fd5b8584015b83811015610c4057803586811115610c245760008081fd5b610c328d8983890101610ae5565b845250918601918601610c0c565b508096505050505050509250925092565b600080600060608486031215610c6657600080fd5b8335610c7181610a39565b92506020840135610c8181610a39565b9150604084013567ffffffffffffffff811115610c9d57600080fd5b610ca986828701610ae5565b9150509250925092565b600060208284031215610cc557600080fd5b813561064c81610a39565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d1057610d10610ce6565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610d5e57600080fd5b815161064c81610a39565b600060208284031215610d7b57600080fd5b815160ff8116811461064c57600080fd5b600181815b80851115610dc7578160001904821115610dad57610dad610ce6565b80851615610dba57918102915b93841c9390800290610d91565b509250929050565b600082610dde575060016104af565b81610deb575060006104af565b8160018114610e015760028114610e0b57610e27565b60019150506104af565b60ff841115610e1c57610e1c610ce6565b50506001821b6104af565b5060208310610133831016604e8410600b8410161715610e4a575081810a6104af565b610e548383610d8c565b8060001904821115610e6857610e68610ce6565b029392505050565b600061064c8383610dcf565b6000816000190483118215151615610e9657610e96610ce6565b500290565b600082610eb857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215610f1a57600080fd5b505191905056fea2646970667358221220ab26062d98279d14ab13139c4109f66b209949afd4c902c21b80e47092b91de964736f6c634300080b0033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "details": "Implements the `PriceOracle` interface used by Fuse pools (and Compound v2).",
    "kind": "dev",
    "methods": {
      "getUnderlyingPrice(address)": {
        "details": "Implements the `PriceOracle` interface for Fuse pools (and Compound v2).",
        "returns": {
          "_0": "Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`."
        }
      },
      "initialize(address[],address[],address[][])": {
        "details": "Initializes an array of LP tokens and pools if desired.",
        "params": {
          "_lpTokens": "Array of LP token addresses.",
          "_pools": "Array of pool addresses."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "price(address)": {
        "params": {
          "underlying": "The underlying token address for which to get the price (set to zero address for ETH)."
        },
        "returns": {
          "_0": "Price denominated in ETH (scaled by 1e18)."
        }
      },
      "registerPool(address,address,address[])": {
        "details": "Register the pool given LP token address and set the pool info.",
        "params": {
          "_lpToken": "LP token to find the corresponding pool.",
          "_pool": "Pool address.",
          "_underlyings": "Underlying addresses."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "poolOf": {
        "details": "Maps Curve LP token addresses to pool addresses."
      },
      "underlyingTokens": {
        "details": "Maps Curve LP token addresses to underlying token addresses."
      }
    },
    "title": "CurveLpTokenPriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUnderlyingPrice(address)": {
        "notice": "Returns the price in ETH of the token underlying `cToken`."
      },
      "price(address)": {
        "notice": "Get the LP token price price for an underlying token address."
      }
    },
    "notice": "CurveLpTokenPriceOracle is a price oracle for Curve LP tokens (using the sender as a root oracle).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 212,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 215,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1467,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 40235,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "underlyingTokens",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 40240,
        "contract": "contracts/oracles/default/CurveLpTokenPriceOracleNoRegistry.sol:CurveLpTokenPriceOracleNoRegistry",
        "label": "poolOf",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}